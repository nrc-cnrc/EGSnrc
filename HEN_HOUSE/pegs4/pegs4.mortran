%C80
"#############################################################################"
"                                                                             "
"  Preprocessor for EGS4 source code                                          "
"  Copyright (C) 2015 National Research Council Canada                        "
"  Copyright (C) 1986 Stanford Linear Accelerator Center                      "
"  Copyright (C) 1985 Board of Trustees of the Leland                         "
"                     Stanford Junior University                              "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Authors:         Walter Nelson, 1986                                       "
"                   Hideo Hirayama, 1986                                      "
"                   Dave Rogers, 1986                                         "
"                                                                             "
"  Contributors:    Alex Bielajew                                             "
"                   Iwan Kawrakow                                             "
"                   Ernesto Mainegra-Hing                                     "
"                   Reid Townson                                              "
"                                                                             "
"#############################################################################"
"                                                                             "
"  PEGS4 is jointly copyrighted by SLAC and NRC, is distributed by NRC under  "
"  the terms of the AGPL 3.0 licence, in agreement with SLAC.                 "
"                                                                             "
"  The contributors named above are only those who could be identified from   "
"  this file's revision history.                                              "
"                                                                             "
"  The authors acknowledge Dr. Richard L. Ford for his part in developing the "
"  previous version of the EGS Code System (EGS3 and PEGS3) including the     "
"  documentation thereof.                                                     "
"                                                                             "
"                                                                             "
"  Description:                                                               "
"                                                                             "
"  PEGS4 ('Preprocessor for EGS4') is a stand-alone program whose purpose is  "
"  to generate material data for the EGS4 code, and to provide other          "
"  services for the user who is studying the simulation of electromagnetic    "
"  interactions.                                                              "
"                                                                             "
"                                                                             "
"  Input/Output unit assignments:                                             "
"                                                                             "
"  Unit 5    user input file                                                  "
"  Unit 6    output listing file                                              "
"  Unit 7    output data for input to egs4                                    "
"  Unit 8    input photoelec.,coherent and pair cross sections                "
"  Unit 9    input atomic form factors                                        "
"  Unit 20   input for density effect corrections if used                     "
"  Unit 21   output from plot1 routine if used                                "
"  Unit 22   input for aprime data if used                                    "
"                                                                             "
"  Iwan Kawrakow, 2003: Iimplemented command line options to specify input    "
"  file, density correction file, cross section data file, etc. These files   "
"  are now explicitly opened by name, instead of relying on symbolik links.   "
"                                                                             "
"  Davbe Rogers, 1998: Played with at NRC to get density effect and to get    "
"  better radiative stopping powers. An alternative PLOT routine is included  "
"  which plots in MeV/g/cm**2 and sends the radiative stopping power to a     "
"  file. It is called PLOT1, rename to use then set IUNRST=5 and use option   "
"  PLTN.                                                                      "
"                                                                             "
"  Dave Rogers, 1996: Open all units explicitly near top to allow use on      "
"  HP machines. Need change in pegs4_run to assign 5/6.                       "
"                                                                             "
"  Alex Bielajew, 1992: Changed read of data on units 8 and 9 to free format  "
"  reads. The long NAMELIST caused problems with SunFortran 1.3 and later.    "
"                                                                             "
"  Alex Bielajew, 1989: SUN version. Search 'SUN' to see changes, most of     "
"  which had to do with adhering to stricter FORTRAN.                         "
"                                                                             "
"  Dave Rogers, 1989: Patched to follow FORTRAN77 formats. Patched to place   "
"  comma after NALG in definition if INP NAMELIST in main. Patched to correct "
"  how IUNRST=2,3,4 is handled in SPTOTE and SPTOTP. Error would only have    "
"  affected PLTN and CALL options, not DECK!! Patched to reflect error re     "
"  GASP in SPINT correction, as suggested by Prof. Kamae in Tokyo.            "
"                                                                             "
"#############################################################################"


%L
%I4      "INDENT MORTRAN"
!INDENT F2;
%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
"PEGS4 MACROS                                                      "
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;


"=================================================================="
"SELECT THE FORTRAN STANDARD TO BE USED (1966 OR 1977)             "
REPLACE {$FORTVER} WITH {1977}
"=================================================================="

"******************************************************************"

REPLACE {$TYPE} WITH
  {{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [CHARACTER*4] [ELSE] [INTEGER]
  }

REPLACE {$EXTERNAL} WITH
  {{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [INTRINSIC] [ELSE] [EXTERNAL]
  }

"******************************************************************"

"                                                                  "
SPECIFY ALPHA    AS (0...$);
SPECIFY SYMBOL   AS (0...?);
SPECIFY AOPER    AS ['+'|'-'|'*'|'/'];
SPECIFY NAME     AS LETTER(0,5)[ALPHA];
SPECIFY <COMMA>  AS [','|''];
SPECIFY <NAME>   AS [NAME|''];
SPECIFY LABEL    AS ':'NAME':';
SPECIFY <LABEL>  AS [LABEL|''];
SPECIFY <*>      AS ['*'|''];
;  "---------- BUFFER FLUSH SEMICOLON ----------"

REPLACE {NEWLABEL} WITH {@LG};
;  "---------- BUFFER FLUSH SEMICOLON ----------"

REPLACE {%'{ARB}'={<*>}'{ARB}'}
   WITH {[IF] '{P2}'='*' [APPEND'{P3}'TO'{P1}']
            [ELSE] [ REPLACE {{P1}}WITH{{P3}}]} ;
;  "---------- BUFFER FLUSH SEMICOLON ----------"

"FIRST SOME PARAMETERS"
REPLACE {PARAMETER #=#;} WITH
   { REPLACE {{P1}} WITH {{P2}}}

PARAMETER $MXOPT=14; "NUMBER OF OPTIONS"
PARAMETER $MXEL=20;  "MAXIMUM NUMBER OF ELEMENTS IN MATERIAL"
PARAMETER $MXSTC=73; "NUMBER OF MEDIA WITH STERNHEIMER COEFFICIENTS"
PARAMETER $MXVRT1=1000; "NUMBER OF REPRESENTATIVE ANGLES IN VERT1"
PARAMETER $MXJREFF=200; "SIZE OF MULTIPLE SCATTERING JREFF MAP"
PARAMETER $MSSTEPS=16; "NUMBER OF MULTIPLE SCATTERING STEP SIZES."
PARAMETER $MXVRT2=200; "DISTRIBUTIONS OF NONOVERLAPPING PARTS OF VERT"
PARAMETER $MXSGE=400; "GAMMA SMALL ENERGY INTERVALS"
PARAMETER $MXGE=2000; "GAMMA MAPPED ENERGY INTERVALS"
PARAMETER $MXSEKE=300; "ELECTRON SMALL ENERGY INTERVALS"
PARAMETER $MXEKE=150; "ELECTRON MAPPED ENERGY INTERVALS"
PARAMETER $MXLEKE=100; "ELECTRON ENERGY INTERVALS BELOW EKELIM"
PARAMETER $MXCMFP=100; "CUMULATIVE ELECTRON MEAN FREE PATH"
PARAMETER $MXRANGE=100; "ELECTRON RANGE"
PARAMETER $MXRL=100;   "RAYLEIGH SCATTERING SAMPLING INTERVAL"
PARAMETER $MXBLC=20; "MOLIERE'S LOWER CASE B"
PARAMETER $MXRNTH=20; "RANDOM NUMBER FOR SUBMEDIAN ANGLES"
PARAMETER $MXRNTHI=20; "RANDOM NUMBER FOR SUPERMEDIAN ANGLES"
PARAMETER $FUDGEMS=1.0;  "FULL MS OFF ATOMIC ELECTRONS"

"    CHANGED"

"    PARAMETER $F0(29)=1.E-43; LAST F0-VALUE"
"    PARAMETER $RERR=1.D-5;  RERR-VALUE NEEDED BY DCADRE"
"    PARAMETER $AERR=1.D-60; AERR-VALUE NEEDED BY DCADRE"

"    TO"

"    PARAMETER $F0(29)=1.18E-38; LAST F0-VALUE"
"    PARAMETER $RERR=1.E-5;      RERR-VALUE NEEDED BY DCADRE"
"    PARAMETER $AERR=1.E-16;     AERR-VALUE NEEDED BY DCADRE"

"    FOR SUN COMPATRIBILITY AFB 89/12/27"

PARAMETER $F0(29)=1.18E-38; "LAST F0-VALUE"
PARAMETER $RERR=1.E-5;      "RERR-VALUE NEEDED BY DCADRE"
PARAMETER $AERR=1.E-16;     "AERR-VALUE NEEDED BY DCADRE"

"COMMON BLOCK INSERTION MACROS"
REPLACE {;COMIN/#,#/;} WITH {;COMIN/{P1}/;COMIN/{P2}/;};

"MACROS TO GENERALIZE MORTRAN'S INPUT AND OUTPUT"
REPLACE {;$UINPUT(#)#;} WITH
    {;{SETR A=NEWLABEL}
        READ({P1},{COPY A}){P2};{COPY A}FORMAT} ;
REPLACE {;$UOUTPUT(#)#;} WITH
    {;{SETR A=NEWLABEL}
        WRITE({P1},{COPY A}){P2};{COPY A}FORMAT};
REPLACE {;$UINPUT(#,#)#;} WITH
    {;{SETR A=NEWLABEL}
        READ({P1},{COPY A},{P2}){P3};{COPY A}FORMAT};
REPLACE {$ECHO#({NAME}{<COMMA>}#)#;} WITH
  {{SETR X=NEWLABEL}
  WRITE(IUECHO,{COPY X});{COPY X}FORMAT(' $ECHO {P1}:{P5}');
  [IF] {EXIST 3} [{P1}({P2},{P4}){P5};
  WRITE(IUECHO,{P4}){P5};]
  [ELSE] [{SETR Y=NEWLABEL}{P1}({P2},{COPY Y}){P5};
  WRITE(IUECHO,{COPY Y}){P5};{COPY Y}FORMAT]
  };

"THE FOLLOWING MACRO REMOVES ALL $ECHOWRITE'S AND SHOULD BE"
"COMMENTED OUT IF YOU WANT OUTPUT ON UNIT 6 AS WELL AS UNIT 7"
REPLACE {$ECHOWRITE} WITH {WRITE}

;  "---------- BUFFER FLUSH SEMICOLON ----------"

"REPLACE {$DUMP#;} WITH"
"    {@LG@LS1V@LC10=#1;OUTPUT V@LC10;(' #1=',1P,G15.7);@LU1};"
"REPLACE {$DUMP#,#;} WITH {$DUMP#1;$DUMP#2;}; "
REPLACE {$DUMP{NAME}{<COMMA>}#;} WITH
    {{SETR A=NEWLABEL}
         V{COPY A}={P1};OUTPUT V{COPY A};(' {P1}=',1P,G15.7);
         [IF] {EXIST 2} [$DUMP{P3};]
    ;}

"THE FOLLOWING TWO MACROS ARE USEFUL FOR RUNNING ON CDC-MACHINES."
"FOR IBM-MACHINES, THEY SHOULD BE COMMENTED-OUT."
"REPLACE {READ(#,END=#)#;}"
"    WITH {READ(#1)#3;IF (EOF(#1).NE.0.)GOTO#2;}"
"REPLACE {READ(#,#,END=#)#;}"
"    WITH {D(#1,#2)#4;IF (EOF(#1).NE.0.)GO TO #3;}"

"MACROS TO SPLIT LONG STRING INTO A1 STRINGS"
REPLACE {$S'{SYMBOL}#'} WITH
   {'#1'[IF]{EXIST 2}[,$S'{P2}']};

"NOW FOR SOME SPECIFIC COMMON BLOCKS"

REPLACE {$REAL} WITH {real*4}
REPLACE {$INTEGER} WITH {integer*4}
;
"------------------------------------------------------------------"
"*** BREMPR--BREMS & PAIR DATA                                     "
"------------------------------------------------------------------"
REPLACE {;COMIN/BREMPR/;} WITH
   {;COMMON/BREMPR/DL1(6),DL2(6),DL3(6),DL4(6),DL5(6),DL6(6),
    DELCM,ALPHI(2),BPAR(2),DELPOS(2);
    $REAL dl1,dl2,dl3,dl4,dl5,dl6,delcm,alphi,bpar,delpos;
   };

"------------------------------------------------------------------"
"*** DBRPR                                                         "
"------------------------------------------------------------------"
REPLACE {;COMIN/DBRPR/;} WITH
   {;COMMON/DBRPR/ALFP1(2),ALFP2(2),AL2;
     $REAL ALFP1,ALFP2,al2;
   };

"------------------------------------------------------------------"
"*** DERCON                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/DERCON/;} WITH
   {;COMMON/DERCON/RADDEG,FSC,ERGMEV,R0,RM,RMT2,RMSQ,A22P9,A6680;
     $REAL RADDEG,FSC,ERGMEV,R0,RM,RMT2,RMSQ,A22P9,A6680;
   };

"------------------------------------------------------------------"
"*** ELEMTB                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/ELEMTB/;} WITH
  {;{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [;COMMON/ELEMTB/NET,WATBL(100),RHOTBL(100),
     ITBL(100),ISTATB(100); $REAL ITBL;
    COMMON/ELMTBC/ASYMT(100); $TYPE ASYMT;]
   [ELSE] [;COMMON/ELEMTB/NET,ASYMT(100),WATBL(100),RHOTBL(100),
    ITBL(100),ISTATB(100); $TYPE ASYMT; $REAL ITBL;]
   $INTEGER net,istatb;
   $REAL    watbl,rhotbl;
  }

"------------------------------------------------------------------"
"***EPSTAR      NRCC ADDITION, NOV 1988                            "
"------------------------------------------------------------------"
REPLACE {;COMIN/EPSTAR/;} WITH
   {;
     COMMON/EPSTAR/EPSTEN(150),EPSTD(150),EPSTFL,EPSTTL,NEPST,IEPST,
     NELEPS,ZEPST(20),WEPST(20),IAPRIM,IAPRFL;
     $INTEGER    EPSTFL,ZEPST,NELEPS,IAPRIM,IAPRFL,NEPST,IEPST;
     CHARACTER   EPSTTL*80;
     $REAL       EPSTEN,EPSTD,WEPST;
   };

    "THIS COMMON IS USED FOR OPTION WHICH READS IN DENSITY EFFECT "
    "CORRECTION IN SPINIT AND CALCULATES USING IT IN SPIONB       "
    "THE FLAG EPSTFL IS READ UNDER NAMELIST INPUT, AND DEFAULTS   "
    "   TO ZERO IN THE BLOCK DATA. SET TO UNITY TO USE THE OPTION "
    "PEGS USES THE I-VALUE IN THE DENSITY INPUT FILE              "
    "VARIOUS CHECKS ARE DONE TO ENSURE THE DENSITY CORRECTION     "
    "   CORRESPONDS TO THE MATERIAL DEFINITION IN PEGS            "
    "THE ENERGY TABLE READ IN IS ASSUMED TO BE KINETIC ENERGY IN  "
    "   MEV BUT IS CONVERTED TO TOTAL ENERGY BY THE CODE.         "
    "THE ENERGY OPTION MUST BE USED IN PEGS PRIOR TO THE MIXT,COMP"
    "   OR ELEM OPTIONS TO ALLOW ALL THE CHECKS TO WORK PROPERLY. "
    "NELEPS IS THE NUMBER OF ELEMENTS IN THE MATERIAL             "
    "ZEPST(I) (INTEGER), WEPST(I) ARE THE Z VALUE AND FRACTION    "
    "   BY WEIGHT OF THE I-TH ELEMENT IN THE DATA FILE.           "
    "IAPRIM is a flag to tell which correction to the brem        "
    "       cross section to use:      0 =>  old Koch and Motz    "
    " =1(defaulat) read in new data file; =2, use no corrections. "
    "IAPRFL is a flag to say if APRIM file has been initialized   "

"------------------------------------------------------------------"
"*** FUNCS                                                         "
"------------------------------------------------------------------"
REPLACE {;COMIN/FUNCS/;} WITH
  {;{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [
    ;COMMON/FUNCS/NFARG($NFUNS),NFUNS;
     $INTEGER NFARG,NFUNS;
     COMMON/FUNCSC/FNAME(6,$NFUNS);
     $TYPE FNAME;
   ]
   [ELSE] [
    ;COMMON/FUNCS/FNAME(6,$NFUNS),NFARG($NFUNS),NFUNS;
     $INTEGER NFARG,NFUNS;
     $TYPE FNAME;
   ]
  };

"------------------------------------------------------------------"
"*** LAMOLM                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LAMOLM/;} WITH {
  ;COMMON/LAMOLM/C1,C2,CMOLL,T0;
   $REAL C1,C2,CMOLL,T0;
};

"------------------------------------------------------------------"
"*** LANIHM                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LANIHM/;} WITH {
  ;COMMON/LANIHM/A,C1,C2;
   $REAL A,C1,C2;
};

"------------------------------------------------------------------"
"*** LBHABM                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LBHABM/;} WITH {
  ;COMMON/LBHABM/B1,B2,B3,B4,CBHAB,BETASI,T0;
   $REAL B1,B2,B3,B4,CBHAB,BETASI,T0;
};

"------------------------------------------------------------------"
"*** LBREMR                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LBREMR/;} WITH {
  ;COMMON/LBREMR/E,LA,LB,LD;
   $REAL E;
   $INTEGER LA,LB,LD;
};

"------------------------------------------------------------------"
"*** LBREMZ                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LBREMZ/;} WITH {
  ;COMMON/LBREMZ/CONST,DELC,E,DELTAM,XLNZ;
   $REAL CONST,DELC,E,DELTAM,XLNZ;
};

"------------------------------------------------------------------"
"*** LCOMPM                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LCOMPM/;} WITH {
  ;COMMON/LCOMPM/K0,CCOMP,C1,C2,C3;
   $REAL K0,CCOMP,C1,C2,C3;
};

"------------------------------------------------------------------"
"*** LPAIRR                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LPAIRR/;} WITH {
  ;COMMON/LPAIRR/K,LA,LC,LE;
   $REAL    K;
   $INTEGER LA,LC,LE;
};

"------------------------------------------------------------------"
"*** LPAIRZ                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/LPAIRZ/;}
   WITH {;COMMON/LPAIRZ/K,CONST,DELC,XLNZ,DELTAM;
          $REAL K,CONST,DELC,XLNZ,DELTAM;
   };

"------------------------------------------------------------------"
"*** LSPION--COMMON FOR COMMUNICATION BETWEEN SPINIT AND SPIONB    "
"------------------------------------------------------------------"
REPLACE {;COMIN/LSPION/;} WITH
   {;COMMON/LSPION/CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,ISSB,IEV;
     $REAL CBAR,X0,X1,SK,TOLN10,AFACT,SPC1,SPC2,ISSB,IEV;
   };

"------------------------------------------------------------------"
"*** MIMSD--MATERIAL INDEPENDENT MULTIPLE SCATTERING DATA          "
"------------------------------------------------------------------"
REPLACE {;COMIN/MIMSD/;} WITH
   {;COMMON/MIMSD/BMIN,MSTEPS,JRMAX,MXV1,MXV2,
    MSMAP($MXJREFF),FSTEP($MSSTEPS),FSQR($MSSTEPS),
    VERT1($MXVRT1),VERT2($MXVRT2,$MSSTEPS);
     $INTEGER MSTEPS,JRMAX,MXV1,MXV2,MSMAP;
     $REAL    BMIN,FSTEP,FSQR,VERT1,VERT2;
   }; "TO BE ADDED:"
"NBLC,NRNTH,NRNTHI,BLC0,BLC1,RTHR0,RTHR1,RTHRI0,RTHRI1,"
"THRI0($MXBLC,$MXRNTH),THR, ETC."

"------------------------------------------------------------------"
"*** MIXDAT                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/MIXDAT/;} WITH
  {;{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [
     ;COMMON/MIXDAT/NE,PZ($MXEL),Z($MXEL),WA($MXEL),RHOZ($MXEL),
                    LMED,GASP,TPZ,EZ;
      $INTEGER NE,LMED;
      $REAL    PZ,Z,WA,RHOZ,GASP,TPZ,EZ;
      COMMON/MXDATC/MTYP(4),ASYM($MXEL),MEDIUM(24),IDSTRN(24);
      $TYPE MTYP,ASYM,MEDIUM,IDSTRN;
   ]
   [ELSE] [
      ;COMMON/MIXDAT/MTYP(4),NE,PZ($MXEL),Z($MXEL),WA($MXEL),
                     ASYM($MXEL),RHOZ($MXEL),MEDIUM(24),LMED,
                     IDSTRN(24),GASP,TPZ,EZ;
       $INTEGER MTYP,NE,MEDIUM,LMED,IDSTRN;
       $REAL    PZ,Z,WA,RHOZ,GASP,TPZ,EZ;
       $TYPE ASYM;
   ]
  };

"------------------------------------------------------------------"
"*** MOLVAR                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/MOLVAR/;} WITH
   {;COMMON/MOLVAR/RHO,WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLC,
    EDEN,BLCC,XCC,TEFF0,XR0;
     $REAL RHO,WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZA,ZG,ZP,ZV,ZU,RLC,EDEN,BLCC,
           XCC,TEFF0,XR0;
   };

"------------------------------------------------------------------"
"*** PHPAIR                                                        "
"------------------------------------------------------------------"
REPLACE {$mxpaire} WITH {17}
REPLACE {$mxphote} WITH {61}
REPLACE {;COMIN/PHPAIR/;} WITH
   {;COMMON/PHPAIR/NPHE(100),PHE($mxphote,100),PHD($mxphote,100),
                   EKEDGE(100),PRE($mxpaire),PRD($mxpaire,100);
     $INTEGER      NPHE;
     $REAL         PHE,PHD,EKEDGE,PRE,PRD;
   };

"------------------------------------------------------------------"
"*** PMCONS                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/PMCONS/;} WITH
   {;COMMON/PMCONS/PI,C,RME,HBAR,ECGS,EMKS,AN;
     $REAL PI,C,RME,HBAR,ECGS,EMKS,AN;
   };

"------------------------------------------------------------------"
"*** PWLFIN                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/PWLFIN/;} WITH
   {;COMMON/PWLFIN/EPE,ZTHRE(8),ZEPE(8),NIPE,NALE,EPG,ZTHRG(4),
    ZEPG(4),NIPG,NALG,EPR,ZTHRR(1),ZEPR(1),NIPR,NALR;
     $REAL EPE,ZTHRE,ZEPE,EPG,ZTHRG,ZEPG,EPR,ZTHRR,ZEPR;
     $INTEGER NIPE,NALE,NIPG,NALG,NIPR,NALR;
   };

"------------------------------------------------------------------"
"*** RADLEN                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/RADLEN/;} WITH
   {;COMMON/RADLEN/ALRAD(4),ALRADP(4),A1440,A183;
     $REAL ALRAD,ALRADP,A1440,A183;
   };

"------------------------------------------------------------------"
"*** RAYLEI                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/RAYLEI/;} WITH
   {;COMMON/RAYLEI/AFAC(100,100),AFAC2(100),AFFI(100),XVAL(100),
    COHE($mxphote,100),IRAYL;
     $REAL AFAC,AFAC2,AFFI,XVAL,COHE;
     $INTEGER IRAYL;
   };

"------------------------------------------------------------------"
"*** RSLTS                                                         "
"------------------------------------------------------------------"
REPLACE {;COMIN/RSLTS/;} WITH
   {;COMMON/RSLTS/EBINDA,NEL,AXE,BXE,AFE($MXEKE,8),BFE($MXEKE,8),
    NGL,AXG,BXG,AFG($MXGE,4),BFG($MXGE,4),NGR,AXR,BXR,AFR($MXRL),
    BFR($MXRL);
     $REAL EBINDA,AXE,BXE,AFE,BFE,AXG,BXG,AFG,BFG,AXR,BXR,AFR,BFR;
     $INTEGER NEL,NGL,NGR;
   };

"------------------------------------------------------------------"
"*** SPCOMM                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/SPCOMM/;} WITH
  {;{SETR F=$FORTVER}
   [IF] {COPY F}=1977 [
     ;COMMON/SPCOMM/NMED,STDATA(6,$MXSTC);
      $INTEGER NMED;
      $REAL    STDATA;
      COMMON/SPCOMC/MEDTBL(24,$MXSTC);
      $TYPE         MEDTBL;
   ]
   [ELSE] [
      ;COMMON/SPCOMM/NMED,MEDTBL(24,$MXSTC),STDATA(6,$MXSTC);
       $INTEGER NMED,MEDTBL;
       $REAL    STDATA;
   ]
  }

"------------------------------------------------------------------"
"*** THRESH                                                        "
"------------------------------------------------------------------"
REPLACE {;COMIN/THRESH/;} WITH
   {;COMMON/THRESH/AP,AE,UP,UE,TE,TET2,TEM,THBREM,THMOLL,IUNRST;
     $REAL AP,AE,UP,UE,TE,TET2,TEM,THBREM,THMOLL;
     $INTEGER IUNRST;
   };

;  "---------- BUFFER FLUSH SEMICOLON ----------"

"------------------------------------------------------------------"
"*** FileNames                                                     "
"------------------------------------------------------------------"
REPLACE {;COMIN/FileNames/;} WITH
{;common/file_names/input_file,output_file,density_file,
                    xsection_file,formf_file,egs_home,lenfn,
                    using_sym_links;
    character*256 input_file,output_file,density_file,egs_home,
                  xsection_file,formf_file;
    $INTEGER      lenfn;
    logical       using_sym_links;
};

REPLACE {$EGS_HOME} WITH {egs_home(:lnblnk1(egs_home))};
;


"MACROS TO GENERATE CODE FOR FUNCTIONS IN PEGS"

REPLACE {$RSC(#)} WITH {{P1}};
"IF RESCAN DIDN'T MATCH ANYTHING ELSE,STRIP IT"

"DEFINE PREDECESSORS"
REPLACE {$DEFINEPRED(#,#)} WITH
   {REPLACE {$RSC({P2})$PRED} WITH {$RSC({P1})}} ;
REPLACE {$DEFINEPRED(#,#,#)} WITH
   {REPLACE {$RSC({P2})$PRED} WITH
    {$RSC({P1})}$DEFINEPRED({P2},{P3})};
$DEFINEPRED(1,2,3,4,5,6,7,8,9)
REPLACE {$FUNCTIONS #;} WITH
   {{SETR I=0}   REPLACE {$FLIST} WITH {$RSC( }
    $RSC({P1})$FSCAN;};
REPLACE {$RSC({SYMBOL}#)$FSCAN;} WITH
   {{INCR I}
   REPLACE {$FN({P2})} WITH
   {{COPY I}} APPEND {{P2})} TO {$FLIST}
   REPLACE {$NA({P2})} WITH {$RSC({P1})}
   REPLACE {$NFUNS} WITH {{COPY I}}} ;
REPLACE {$RSC({SYMBOL}#,#)$FSCAN;} WITH
   {{INCR I}
    REPLACE {$FN({P2})} WITH {{COPY I}}
    APPEND {{P2},} TO {$FLIST}
    REPLACE {$NA({P2})} WITH {$RSC({P1})} $RSC({P3})$FSCAN;};
REPLACE {$RSC(#)$NAME} WITH
   {{SETR B={LENGTH 1}}
      [IF] {LENGTH 1}=6 [$S'{P1}']
      [ELSE] [[IF] {LENGTH 1}~=0
         [$S'{P1}',{COMPUTE 6-{COPY B}}*' ']]};
REPLACE {$RSC(#)$DATA(#)} WITH
   {DATA {P2}(1,$FN({P1})),{P2}(2,$FN({P1})),
   {P2}(3,$FN({P1})),
    {P2}(4,$FN({P1})),{P2}(5,$FN({P1})),{P2}(6,$FN({P1}))
    /$RSC({P1})$NAME/} ;
REPLACE {$RSC(#,#)$DATA(#)} WITH
    {$RSC({P1})$DATA({P3});$RSC({P2})$DATA({P3})};
REPLACE {$RSC(#)$NARGS} WITH {$NA({P1})};
REPLACE {$RSC(#,#)$NARGS} WITH {$NA({P1}),$RSC({P2})$NARGS};
REPLACE {$RSC(#)$FNUMS} WITH {$FN({P1})};
REPLACE {$RSC(#,#)$FNUMS} WITH {$FN({P1}),$RSC({P2})$FNUMS};
REPLACE {$RSC(#)$FCALLS} WITH
    {$FN({P1})FI={P1}($NA({P1})$ARGLIST);RETURN;};
REPLACE {$RSC(#,#)$FCALLS}
   WITH {$RSC({P1})$FCALLS$RSC({P2})$FCALLS};
REPLACE {$RSC(#)$ARGLIST} WITH {$RSC({P1})$PRED$ARGLIST,X{P1}};
REPLACE {$RSC(1)$ARGLIST} WITH {X1};
;  "---------- BUFFER FLUSH SEMICOLON ----------"

"BECAUSE OF THE PRECEDING MACROS, THE FOLLOWING MACRO CALL"
"GENERATES MACROS SUCH THAT:"
"   $NFUNS  WILL GIVE THE NUMBER OF FUNCTIONS"
"   $FLIST$NAMES  WILL GIVE A LIST OF FUNCTION NAMES"
"   $FLIST$NARGS  WILL GIVE A LIST OF NUMBER OF ARGUMENTS"
"   $FLIST$FNUMS  WILL GIVE A LIST OF THE NUMBERS FROM 1 TO $NARGS"
"   $FLIST$FCALLS  WILL GENERATE FUNCTION CALL FOR FUNCTION 'FI'"
"   $FN(FUNCTION-NAME) WILL GIVE THE INDEX OF THE GIVEN FUNCTION"
"   $NA(FUNCTION-NAME) WILL GIVE THE NUMBER OF ARGUMENTS"
"      FOR THAT FUNCT."
" ATTENTION**********:"
"ATTENTION---THE ORDER OF SOME OF THE FUNCTIONS IN THE FOLLOWING"
"LIST IS IMPORTANT.  THESE ARE THE FUNCTIONS WHICH ARE USED FOR"
"DISTRIBUTION FUNCTIONS.  ANY DISTRIBUTION FUNCTION WHICH IS USED"
"BY THE HPLT OPTION MUST BE FOLLOWED BY ITS INVERSE, WHICH MUST BE"
"FOLLOWED BY ITS DERIVATIVE.  DISTRIBUTION FUNCTIONS USED BY THE"
"PLOT ROUTINE MUST BE FOLLOWED BY THEIR INVERSES."
"HPLT NOW USES: ALIN,ADFMOL,ALOG.   PLOT COULD USE ANY OF"
"THESE AND ALSO ALKE.  ALKE AND ITS INVERSE ARE ALSO"
"USED BY PWLF, BUT ARE PASSED BY FUNCTION RATHER THAN NUMBER."
"THE ADVANTAGE OF PASSING BY NUMBER IS THAT THE FUNCTION NAME AND"
"NUMBER OF ARGUMENTS ARE AVAILABLE."
;
$FUNCTIONS 1ALIN,1ALINI,1ADFMOL,1ADIMOL,1ADDMOL,
1ALOG,1EXP,1AREC,1ALKE,1ALKEI,
2AMOLDM,1AMOLFM,3AMOLRM,1AMOLTM,2ANIHDM,
1ANIHFM,3ANIHRM,1ANIHTM,2APRIM,2BHABDM,1BHABFM,3BHABRM,1BHABTM,
2BREMDR,1BREMFR,3BREMDZ,3BRMSDZ,1BREMFZ,1BRMSFZ,3BREMRR,3BREMRM,
4BREMRZ,1BREMTM,1BREMTR,3BRMSRM,4BRMSRZ,2BRMSTM,1COHETM,2COHETZ,
2COMPDM,1COMPFM,3COMPRM,1COMPTM,1CRATIO,1EBIND,1EBR1,1EDEDX,1ESIG,
1FCOULC,1GBR1,1GBR2,1GMFP,2PAIRDR,1PAIRFR,3PAIRDZ,1PAIRFZ,
3PAIRRM,3PAIRRR,4PAIRRZ,1PAIRTE,1PAIRTM,1PAIRTR,1PAIRTU,2PAIRTZ,
1PBR1,1PBR2,1PDEDX,2PHOTTZ,1PHOTTE,1PSIG,2SPIONE,
2SPIONP,3SPTOTE,3SPTOTP,1TMXB,1TMXS,1TMXDE2,1XSIF;
;  "---------- BUFFER FLUSH SEMICOLON ----------"

"MACROS TO CONVERT DOUBLE PRECISION TO REAL"
REPLACE {DOUBLEPRECISION} WITH {REAL};
REPLACE {DABS} WITH {ABS} ;
REPLACE {DMAX1} WITH {AMAX1};
REPLACE {DLOG10} WITH {ALOG10};
REPLACE {;DATA#;} WITH {{EMIT;}DATA $$D({P1});};
REPLACE {$$D(#)} WITH {{P1}} ;
REPLACE {$$D(#/#/#)} WITH {{P1}/$$D2({P2})/$$D({P3})};
REPLACE {$$D2(#)} WITH {{P1}} ;
REPLACE {$$D2(#D#)} WITH {{P1}E$$D2({P2})};

"******************************************************************"
"************************ PEGS4 MACROS END ************************"
"******************************************************************"
%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
"MAIN PROGRAM FOR PEGS4                                            "
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"******************************************************************"
"************************ DECLARATIONS ****************************"
"******************************************************************"

program main_pegs4;

implicit none;

;

;COMIN/BREMPR,DBRPR,DERCON,ELEMTB,FUNCS,LSPION,MIMSD,MIXDAT,MOLVAR,
   PHPAIR,PMCONS,PWLFIN,RAYLEI,RSLTS,THRESH,EPSTAR/;"MOD NOV 23,1988"
$REAL XP(4),WASAV(20);
LOGICAL MEDSET,ENGSET;
$TYPE OPTION(4,$MXOPT),OPT(4),BLKW,NAME(6);
$TYPE NAMESB(12),IDFNAM(6);
$INTEGER NH(200);
EXTERNAL ALKE,ALKEI,EFUNS,GFUNS,RFUNS,ALIN,ALINI,AFFACT;
$EXTERNAL ALOG,EXP;

$INTEGER NOPT,NPTS,IDF,EPSTFL_old,IUNRST_old,IAPRIM_old;

" IK: Variable declarations for implicit none"
$INTEGER IFUN,IV,ISUB,I,in,iz,ICH,IOPT,IMIXT,I01,IZZ,NA,ID,
         NTIMES,NBINS,IQI,IRNFLG,IBIN;
$REAL    VLO,VHI,EI,RHOSAV,AX,BX,VALUE,RNLO,RNHI,PINC,AVE;

" IK: Function declarations for implicit none"
$INTEGER IFUNT;
$REAL    ZTBL,EBIND,QD,FI;

"******************************************************************"
"*********************** DATA STATEMENTS **************************"
"******************************************************************"

DATA OPTION/$S'ELEM',$S'MIXT',$S'COMP',$S'ENER',$S'MIMS',$S'PWLF',
   $S'DECK',$S'TEST',$S'DBUG',$S'CALL',$S'PLTN',$S'STOP',$S'PLTI',
   $S'HPLT'/;
DATA NOPT/$MXOPT/,BLKW/' '/;
DATA MEDSET/.FALSE./,ENGSET/.FALSE./;
DATA NPTS/50/,IDF/$FN(ALOG)/;

"******************************************************************"
"********************* NAMELIST DEFINITIONS ***********************"
"******************************************************************"

NAMELIST/PHPRNM/NPHE,PHE,PHD,EKEDGE,PRE,PRD,COHE;
NAMELIST/AFFDT/XVAL,AFAC;
NAMELIST/INP/NE,PZ,RHO,RHOZ,WA,AE,UE,AP,UP,
   IFUN,XP,IV,VLO,VHI,IDF,NPTS,
   EPE,ZTHRE,ZEPE,NIPE,NALE,EPG,ZTHRG,ZEPG,NIPG,NALG,
   EI,ISUB,GASP,IUNRST,IRAYL,AFACT,SK,X0,X1,IEV,CBAR,ISSB,EPSTFL,
   IAPRIM;
"                      MOD NOV 23,1988                    ======"
NAMELIST/PWLFNM/EPE,ZTHRE,ZEPE,NIPE,NALE,EPG,ZTHRG,ZEPG,NIPG,NALG,
   EPR,ZTHRR,ZEPR,NIPR,NALR;

save NOPT,NPTS,IDF;

"******************************************************************"
"*************** PERFORM ONCE-ONLY INITIALIZATION *****************"
"******************************************************************"

call open_units;
write(6,*) 'Returned from call open_units';

"Nov 27, 1996  added explicit opens of all units so can use HP"
"              Note corresponding change in pegs4_run      DR"
"OPEN(UNIT=5,file='fort.5',STATUS='UNKNOWN');  " "terminal/input file"
"OPEN(UNIT=6,file='fort.6',STATUS='UNKNOWN');  " "terminal output/promp"
"OPEN(UNIT=7,file='fort.7',STATUS='UNKNOWN');  " "output listing"
"OPEN(UNIT=8,file='fort.8',STATUS='OLD');      " "Cross section data"
"OPEN(UNIT=9,file='fort.9',STATUS='OLD');      " "Rayleigh form factors"
"OPEN(UNIT=10,file='fort.10',STATUS='UNKNOWN');" "Error logging"
"OPEN(UNIT=20,file='fort.20',STATUS='UNKNOWN');" "Density effect data"
"OPEN(UNIT=21,file='fort.21',STATUS='UNKNOWN');" "plotting output"
"OPEN(UNIT=22,file='fort.22',STATUS='UNKNOWN');" "ICRU37 brem corr"


OUTPUT;('1',20X,'PEGS4 LISTING FILE',/
20X,'(WITH NRCC MODIFICATIONS, Jan 13,1988)');
OUTPUT;(/);
CALL PMDCON;   "COMPUTE PHYSICAL AND MATHEMATICAL CONSTANTS"

"**************************************************************"
"BLIF 92/04/03 changed below from NAMELIST to free format reads"
OUTPUT;(/' This version reads units 8 and 9 in free format'/);
"READ(8,PHPRNM);" "READ IN PHOTOELECTRIC AND PAIR DATA FROM FILE"
READ(8,*)
    NPHE,
    ((PHE(in,iz),in=1,61),iz=1,100),
    ((PHD(in,iz),in=1,61),iz=1,100),
    EKEDGE,
    PRE,
    ((PRD(in,iz),in=1,17),iz=1,100),
    ((COHE(in,iz),in=1,61),iz=1,100);
"READ(9,AFFDT);" "READ IN ATOMIC FORM FACTOR DATA FROM A FILE"
READ(9,*)
    XVAL,
    ((AFAC(in,iz),in=1,100),iz=1,100);
"**************************************************************"

"------------------------------------------------------------------"
"---------------------- START OF OPTION LOOP ----------------------"
"------------------------------------------------------------------"


:OPTION: "MAIN OPTION LOOP"

DO I=1,$MXEL [WASAV(I)=WA(I);WA(I)=0.;]
RHOSAV=RHO;
RHO=0.0;

"******************************************************************"
"* OPTIONS AND PARAMETERS WHICH SHOULD BE PUT IN ASSOCIATED INPUT *"
"******************************************************************"
"                                                                  "
"   ELEM  -  ASYM, RHO (IF NOT SUPPLIED, IT WILL BE FROM TABLE)    "
"   MIXT  -  NE, RHO, ASYM, RHOZ                                   "
"   COMP  -  NE, RHO, ASYM, PZ                                     "
"   ENER  -  AE, UE, AP, UP                                        "
"   MIMS  -  FOR PRODUCING MEDIUM INDEPENDENT MULTIPLE             "
"            SCATTERING DATA (OBSOLETE LEFT-OVER FROM EGS2)        "
"   PWLF  -  (OPTIONALLY ANY OF THE PARAMETERS IN PWLFIN)          "
"   DECK  -  (NONE)                                                "
"   TEST  -  (DEPENDS ON TEMPORARY CODE)                           "
"   DBUG  -  (DITTO)                                               "
"   CALL  -  IFUN, XP(1:4)                                         "
"   PLTN  -  FNAME, IDFNAME, XP, IV, VLO, VHI, NPTS                "
"   PLTI  -  IFUN, IDF, XP, IV, VLO, VHI, NPTS                     "
"   HPLT  -  EI, ISUB                                              "
"   STOP  -  (NONE)                                                "
"                                                                  "
"******************************************************************"

$UINPUT(5,END=:STOP:) OPT;(4A1); "READ IN THE OPTION (1ST CARD)"
OUTPUT OPT;
(//,1X,60('*'),/,' *',T61,'*',/,' *  OPT = ',4A1,T61,'*',/,
 ' *',T61,'*',/,1X,60('*'),//);

EPSTFL_old=EPSTFL; IUNRST_old=IUNRST; IAPRIM_old=IAPRIM;
READ(5,INP,END=:NONAMELIST:); "READ IN NAMELIST/INP/ (2ND CARD)"

IF (RHO.EQ.0) [
DO ICH=1,4 [
IF(OPT(ICH).NE.OPTION(ICH,1)) [RHO=RHOSAV; EXIT;]
]
]

"   LOOK TO SEE IF IT IS IN THE OPTION TABLE."
:LOOK:
DO IOPT=1,NOPT [
DO ICH=1,4 [ IF (OPT(ICH).NE.OPTION(ICH,IOPT)) NEXT :LOOK:;]
GO TO :FOUND:;]
OUTPUT ; (' OPTION NOT FOUND, JOB ABORTED.');  $CALL_EXIT(16);

:FOUND:  "WE FOUND THE OPTION IN THE LIST"
IF (IOPT.GT.3)[
   RHO=RHOSAV;DO I=1,$MXEL [WA(I)=WASAV(I);] "RESTORE"
   "*********************************************"
   "Check if entries placed in wrong OPTION block"
   "*********************************************"
   IF ( EPSTFL ~= EPSTFL_old )["Read EPSTFL here?"
      write(*,'(2a,i2)') 'EPSTFL in wrong OPTION block!',
                 ' Resetting to EPSTFL= ',EPSTFL_old;
      EPSTFL=EPSTFL_old;
   ]
   IF ( IUNRST ~= IUNRST_old )["Read IUNRST here?"
      write(*,'(2a,i2)') 'IUNRST in wrong OPTION block!',
                 ' Resetting to IUNRST= ',IUNRST_old;
      IUNRST=IUNRST_old;
   ]
   IF ( IAPRIM ~= IAPRIM_old )["Read IAPRIM here?"
      write(*,'(2a,i2)') 'IAPRIM in wrong OPTION block!',
                 ' Resetting to IAPRIM= ',IAPRIM_old;
      IAPRIM=IAPRIM_old;
   ]
   "*********************************************"
]
ELSE[ DO I=1,4 [MTYP(I)=OPT(I);] "SAVE MEDIUM TYPE" ]

"------------------------------------------------------------------"
GO TO(:ELEM:,:MIXT:,:COMP:,:ENER:,:MIMS:,:PWLF:,:DECK:,:TEST:,
   :DBUG:,:CALL:,:PLTN:,:STOP:,:PLTI:,:HPLT:),IOPT;
"------------------------------------------------------------------"

:ELEM:
"     HERE FOR NEW MEDIUM WHICH IS AN ELEMENT"
NE=1;
PZ(1)=1;
IMIXT=0;
GO TO :ELEM/MIXT/COMP:;

:MIXT:
"     HERE FOR NEW MEDIUM WHICH IS A MIXTURE (I.E., PROPORTIONS"
"     ARE PER CENT BY WEIGHT OR SOMETHING PROPORTIONAL)"
IF(NE.LE.1) ["NE IS NOT PROPERLY DEFINED"
OUTPUT NE; (//,' NE=',I6,' IS IMPROPERLY DEFINED FOR A MIXTURE');
STOP;]

IMIXT=1;
GO TO :ELEM/MIXT/COMP:;

:COMP:
"     HERE FOR NEW MEDIUM WHICH IS A COMPOUND (I.E., PROPORTIONS"
"     ARE BY RELATIVE NUMBER OF ATOMS PER FORMULA"
IF(NE.LE.1) ["NE IS NOT PROPERLY DEFINED"
  OUTPUT NE; (//,' NE=',I6,' IS IMPROPERLY DEFINED FOR A COMPOUND');
  $CALL_EXIT(17);
]
IMIXT=0;

:ELEM/MIXT/COMP:
"     HERE IS WHERE OPTIONS ELEM, MIXT, AND COMP MEET"

INPUT MEDIUM,IDSTRN; (24A1,6X,24A1);
INPUT (ASYM(I),I=1,NE); (24(A2,1X));
IF (IDSTRN(1).EQ.BLKW) [DO I=1,LMED [IDSTRN(I)=MEDIUM(I);]  ]
OUTPUT MEDIUM,IDSTRN,(ASYM(I),I=1,NE);
(1X,60('-')/' MEDIUM=',24A1,',STERNHEIMER ID=',24A1,/1X,60('-')//
,' ATOMIC SYMBOLS ARE: ',(1X,24(A2,1X) ) );
IF(IUNRST.EQ.1)[OUTPUT;(/T10,'***CALCULATES UNRESTRICTED COLLISION',
' STOPPING POWER***  IUNRST=1'//);]
ELSEIF(IUNRST.EQ.2)[OUTPUT;(/T10,'****DATA SET FOR A CSDA CALCULATION',
'******  IUNRST=2'//);]
ELSEIF(IUNRST.EQ.3)[OUTPUT;(/T10,'****DATA SET FOR A CSDA CALCULATION',
' BUT WITH BREM EVENTS******  IUNRST = 3'//);]
ELSEIF(IUNRST.EQ.4)[OUTPUT;(/T10,'****DATA SET FOR A CALCULATION',
'WITH DELTAS DISCRETE,BREM CSDA******  IUNRST = 4'//);]
ELSEIF(IUNRST.EQ.5)[OUTPUT;
(/T10,'****CALCULATES UNRESTRICTED RADIATIVE',
' STOPPING POWER***** IUNRST = 5');]
ELSEIF(IUNRST.EQ.6)[OUTPUT;
(/T10,'****CALCULATES RESTRICTED RADIATIVE',
' STOPPING POWER***** IUNRST = 6');]
ELSEIF(IUNRST.EQ.7)[OUTPUT;
(/T10,'****CALCULATES RESTRICTED COLLISION',
' STOPPING POWER***** IUNRST = 7');]
DO I=1,NE [
Z(I)=ZTBL(ASYM(I));
IF (Z(I).EQ.0.0)[OUTPUT;
  (' BAD ATOMIC SYMBOL....JOB ABORTED.'); $CALL_EXIT(16); ]
"ALLOW USER TO OVER-RIDE ATOMIC WEIGHTS, IN CASE USING NONSTANDARD"
"  ISOTOPES."
IF WA(I).EQ.0. [I01=Z(I);WA(I)=WATBL(I01);]"USE OUR TABLE (DEFAULT)"
IF (IMIXT.NE.0)[PZ(I)=RHOZ(I)/WA(I);]ELSE[RHOZ(I)=PZ(I)*WA(I);]
]
"     IF RHO IS NOT GIVEN FOR AN ELEMENT, SUPPLY IT FROM OUR TABLE.    "
IF (NE.EQ.1.AND.RHO.EQ.0.)[I01=Z(1);RHO=RHOTBL(I01);]
"     NOW WE HAVE DEFINED THE MIXTURE, SO COMPUTE Z-DEPENDENT PARAMETER"
CALL MIX;
"     INITIALIZE FOR STOPPING POWER USING STERNHEIMER-SELTZER-"
"     BERGER (SSB) PARAMETER OR STERNHEIMER-PEIERLS GENERAL SCHEME"
"     FOR THE DENSITY EFFECT."

"CHANGED"
"CALL SPINIT(MEDIUM);"
"TO"
"CALL SPINIT;"
"FOR SUN AFB 89/12/27"
CALL SPINIT;

"     COMPUTE DIFFERENTIAL SAMPLING(BREMPR) CONSTANTS.                 "
CALL DIFFER;
"     SET FLAG TO SAY THAT THE MEDIUM HAS BEEN SET.                    "
MEDSET=.TRUE.;
OUTPUT ;  (//,' END OF ELEM, MIXT, OR COMP OPTION',///);
"     RETURN TO OPTION LOOP                                            "
GOTO :OPTION:;

"*****"
"*****HERE FOR OPTION TO SET ENERGY LIMITS FOR ELECTRONS AND PHOTONS"
"*****"
:ENER:IF (AE.LT.0)AE=-AE*RM;
IF (UE.LT.0)UE=-UE*RM;
IF (AP.LT.0)AP=-AP*RM;
IF (UP.LT.0)UP=-UP*RM;
TE=AE-RM;
TET2=TE*2.0;
TEM=TE/RM;
THBREM=RM+AP;"THRESHOLD FOR DISCRETE BREMSSTRAHLUNG"
THMOLL=AE+TE;
OUTPUT AE,UE,AP,UP,TE,TET2,TEM,THBREM,THMOLL;
('0AE,UE,AP,UP,TE,TET2,TEM,THBREM,THMOLL'/1X,1P,5E15.7/1X,1P,4E15.7);
ENGSET=.TRUE.;
GOTO :OPTION:;

"*****"
"*****MIMS -- COMPUTE MATERIAL INDEPENDENT MULTIPLE SCATTERING DATA."
"*****"
:MIMS: CALL MOLIER;
GOTO :OPTION:;

"*****"
"*****HERE FOR OPTION TO DO PIECEWISE LINEAR FITS AND OTHER CALCULATION"
"*****WHICH DEPEND BOTH ON MATERIAL AND ENERGY LIMITS"
"*****"
:PWLF:IF (MEDSET.AND.ENGSET)GO TO :FITEP:;
OUTPUT MEDSET,ENGSET;
(' MEDSET,ENGSET=',2L2,',PWLF REQ. IGNORED.');
$CALL_EXIT(16);

"*****"
"*****FIRST FIT ELECTRON(AND POSITRON)"
"*****"
:FITEP:   EBINDA=EBIND(AP);
WRITE(6,PWLFNM);
OUTPUT EBINDA;
(' AVERAGE K-IONIZATION ENERGY=',F10.6,'(MEV)');

OUTPUT;('0DO PWLF TO ELECTRON DATA SETS'/);
CALL PWLF1(NEL,NALE,AE,UE,THMOLL,EPE,ZTHRE,ZEPE,NIPE,ALKE,ALKEI,
 AXE,BXE,$MXEKE,8,AFE,BFE,EFUNS);
"     NEXT FIT GAMMA                                                   "
OUTPUT;('0DO PWLF TO PHOTON DATA SETS'/);
CALL PWLF1(NGL,NALG,AP,UP,RMT2,EPG,ZTHRG,ZEPG,NIPG,ALOG,EXP,
 AXG,BXG,$MXGE,4,AFG,BFG,GFUNS);

IF (IRAYL.EQ.1) [
"PWLF FOR DISTRIBUTION FUNCTION FOR RAYLEIGH"
"NOTE THAT TOTAL X-SECTION IS FIT WITH REST OF PHOTON CROSS SECTIONS"
OUTPUT ; (//,' ***** IRAYL=1: RAYLEIGH DATA INCLUDED *****',//);
OUTPUT;(' DO PWLF TO RAYLEIGH DISTRIBUTION'/);
DO I=1,100 [
AFAC2(I)=0.0; "ZERO FOR SUMMATION"
DO IN=1,NE [
IZZ=Z(IN); "INTEGER Z VALUE"
AFAC2(I)=AFAC2(I)+PZ(IN)*AFAC(I,IZZ)**2;]
] "END OF LOOP ON I"
"THE ABOVE CALCULATES THE COHERENT SCATTERING FORM FACTOR FOR THE"
"MOLECULE ASSUMING EACH ATOM ACTS INDEPENDENTLY.  THIS ASSUMPTION"
"IS ALSO MADE WHEN CALCULATING THE TOTAL COHERENT CROSS SECTION."
"THE ASSUMPTION IS KNOWN TO BE VERY WRONG IN SOME SITUATIONS - MOST"
"NOTABLY WATER - E.G., SEE L.R. MORIN, J. PHYS. CHEM REF. DATA VOL 11"
"(1982) P1091 AND JOHNS AND YAFFE, MEDICAL PHYSICS, VOL. 10 (1983) P40."
DO I=1,100 [XVAL(I)=XVAL(I)**2.;]
AFFI(1)=0.0;
DO I=2,87 [
AX=XVAL(I-1);
BX=XVAL(I);
AFFI(I)=QD(AFFACT,AX,BX,'AFFACT');"INTEGRATE AFAC2 FROM AX TO BX"
]
DO I=2,87 [
AFFI(I)=AFFI(I)+AFFI(I-1);]
DO I=1,87 [
AFFI(I)=AFFI(I)/AFFI(87);]
CALL PWLF1(NGR,NALR,0.0,1.0,0.0,EPR,ZTHRR,ZEPR,NIPR,ALIN,ALINI,
AXR,BXR,$MXRL,1,AFR,BFR,RFUNS);
] "END OF RAYLEIGH SCATTERING PWLF"
"     THAT'S ALL FOLKS---PWLF DOES ALL THE WORK."
GOTO :OPTION:;

"*****"
"*****HERE FOR OPTION TO PRODUCE A DECK---PASS THE BUCK TO A SUBROUTINE"
"*****"
:DECK:CALL LAY;
GOTO :OPTION:;

"*****"
"*****TEST OPTION"
"*****"
:TEST:CONTINUE;
CALL PLOT($FN(ESIG),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(PSIG),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(EDEDX),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(PDEDX),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(EBR1),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(PBR1),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(PBR2),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(TMXS),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(TMXDE2),XP,1,AE,UE,NPTS,$FN(ALKE));
CALL PLOT($FN(GMFP  ),XP,1,AP,UP,NPTS,$FN(ALOG));
CALL PLOT($FN(GBR1  ),XP,1,AP,UP,NPTS,$FN(ALOG));
CALL PLOT($FN(GBR2  ),XP,1,AP,UP,NPTS,$FN(ALOG));
CALL PLOT($FN(CRATIO),XP,1,AP,UP,NPTS,$FN(ALOG));
OUTPUT;('1'); "NEW PAGE"
GOTO :OPTION:;

"*****"
"*****DBUG OPTION"
"*****"
:DBUG:CONTINUE;
GOTO :OPTION:;

"*****"
"***** CALL OPTION"
"*****"
:CALL:
INPUT NAME;(6A1); IFUN=IFUNT(NAME); IF (IFUN.LE.0)GOTO :OPTION:;
VALUE=FI(IFUN,XP(1),XP(2),XP(3),XP(4));  NA=NFARG(IFUN);
OUTPUT  VALUE,(FNAME(I,IFUN),I=1,6),(XP(I),I=1,NA);
('0FUNCTION CALL: ',1P,G15.6,' = ',6A1,' OF ',4G15.6 );
GOTO :OPTION:;

"*****"
"*****PLTN OPTION"
"*****"
:PLTN:
INPUT NAME,IDFNAM;(12A1); IFUN=IFUNT(NAME); IF (IFUN.LE.0)GOTO :OPTION:;
ID=IFUNT(IDFNAM); IF (ID.LT.0)GOTO :OPTION:; IF (ID.NE.0)IDF=ID;

"*****"
"*****OPTION PLTN RUNS INTO PLTI"
"*****"
:PLTI:
CALL PLOT(IFUN,XP,IV,VLO,VHI,NPTS,IDF);
GOTO :OPTION:;

"*****"
"*****HPLT OPTION *** COMPARE ACTUALLY SAMPLED SPECTRA WITH THEORY"
"*****READ IN SAMPLED DATA"
"*****"
:HPLT:READ(5,:FMT:)NAMESB,NTIMES,NBINS,IQI,RNLO,RNHI,IRNFLG,
(NH(IBIN),IBIN=1,NBINS);
:FMT:FORMAT(' TEST DATA FOR ROUTINE=',12A1,',#SAMPLES=',I10,',NBINS=',I5
/' IQI=',I2,',RNLO,RNHI=',2F12.8,',IRNFLG=',I2/(9I8));
WRITE(6,:FMT:)NAMESB,NTIMES,NBINS,IQI,RNLO,RNHI,IRNFLG,
(NH(IBIN),IBIN=1,NBINS);
OUTPUT EI,ISUB;
(' EI=',F14.3,',ISUB=',I3);

GO TO (:PAIR:,:COMPTON:,:BREMS:,:MOLLER:,:BHABHA:,:ANNIH:),ISUB;

"*****"
"*****PAIR"
"*****"
:PAIR:  CALL HPLT1(EI,RM,EI-RM,NAMESB,NTIMES,NBINS,NH,
$FN(ALIN),$FN(PAIRDR),$FN(PAIRRR),$FN(PAIRTR) );
GOTO :OPTION:;

"*****"
"*****COMPTON"
"*****"
:COMPTON:  CALL HPLT1(EI,EI/(1.0+2.0*EI/RM),EI,NAMESB,NTIMES,NBINS,NH,
$FN(ALOG),$FN(COMPDM),$FN(COMPRM),$FN(COMPTM) );
GOTO :OPTION:;

"*****"
"*****BREMS"
"*****"
:BREMS:  CALL HPLT1(EI,AP,EI-RM,NAMESB,NTIMES,NBINS,NH,
$FN(ALOG),$FN(BREMDR),$FN(BREMRR),$FN(BREMTR) );
GOTO :OPTION:;

"*****"
"*****MOLLER"
"*****"
:MOLLER:  CALL HPLT1(EI,AE,RM+(EI-RM)*0.5,NAMESB,NTIMES,NBINS,NH,
$FN(ADFMOL),$FN(AMOLDM),$FN(AMOLRM),$FN(AMOLTM) );
GOTO :OPTION:;

"*****"
"*****BHABHA"
"*****"
:BHABHA:  CALL HPLT1(EI,AE,EI,NAMESB,NTIMES,NBINS,NH,
$FN(ADFMOL),$FN(BHABDM),$FN(BHABRM),$FN(BHABTM) );
GOTO :OPTION:;

"*****"
"*****ANNIH"
"*****"
:ANNIH:  PINC=SQRT(EI**2-RM**2);
AVE=EI+RM;
CALL HPLT1(EI,AVE*RM/(AVE+PINC),AVE*0.5,NAMESB,NTIMES,NBINS,NH,
$FN(ALOG),$FN(ANIHDM),$FN(ANIHRM),$FN(ANIHTM) );

GOTO :OPTION:;

"------------------------------------------------------------------"
"----------------------- END OF OPTION LOOP -----------------------"
"------------------------------------------------------------------"


:NONAMELIST:  "REACH THIS POINT WHEN NAMELIST DATA MISSING"

OUTPUT; (' STOPPED IN MAIN PROGRAM BECAUSE NAMELIST/INP/',/,
  ' DATA CARD(S) WERE MISSING.');
$CALL_EXIT(18);

"*****"
"***** STOP OPTION"
"*****"
:STOP:
OUTPUT;(///' END OF FILE READ - EXIT FROM PEGS4'/'1');
$CALL_EXIT(0);

END;  "END OF MAIN PROGRAM OF PEGS4"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
BLOCK DATA;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;

"THIS ROUTINE CONTAINS PHYSICAL AND CONTROL DATA FOR PEGS          "
;COMIN/BREMPR,DBRPR,DERCON,ELEMTB,FUNCS,LSPION,MIMSD,MIXDAT,MOLVAR,
       PHPAIR,PMCONS,PWLFIN,RADLEN,RAYLEI,SPCOMM,RSLTS,THRESH,EPSTAR/;
"                                  MOD NOV 22 1988            ======"

"****STERNHEIMER-SELTZER-BERGER (SSB) DATA                         "

"   STDATA IS THE ACTUAL STERNHEIMER DATA                 "
"   AFACT,SK,X0,X1,IEV,CBAR                              "
"   THE SEQUENCE FIELD OF EACH CARD TELL WHICH MATERIAL ITS FOR."
DIMENSION STDAT1(6,20),STDAT2(6,20),STDAT3(6,20),STDAT4(6,13);
EQUIVALENCE (STDATA(1,1),STDAT1(1,1));
EQUIVALENCE (STDATA(1,21),STDAT2(1,1));
EQUIVALENCE (STDATA(1,41),STDAT3(1,1));
EQUIVALENCE (STDATA(1,61),STDAT4(1,1));
"above declarations moved from below Aug 4/96 so Linux fort77 "
"compiler handles it (declarations before data stmts)"

"     MEDTLB CONTAIN THE IDENTIFIERS FOR THE MEDIUM"
$TYPE MEDTB1(24,20),MEDTB2(24,20),MEDTB3(24,20),MEDTB4(24,13);
EQUIVALENCE (MEDTBL(1,1),MEDTB1(1,1));
EQUIVALENCE (MEDTBL(1,21),MEDTB2(1,1));
EQUIVALENCE (MEDTBL(1,41),MEDTB3(1,1));
EQUIVALENCE (MEDTBL(1,61),MEDTB4(1,1));

"    TAKEN FROM STERNHEIMER, SELTZER, AND BERGER  BNL 31435        "
"DATA FOR COMMON BLOCK LSPION                                      "
DATA AFACT/0.0/,SK/0.0/,X0/0.0/,X1/0.0/,CBAR/0.0/,IEV/0.0/,ISSB/0/;
"DATA FOR COMMON BLOCK SPCOMM                                      "
DATA LMED/24/,NMED/$MXSTC/;

DATA MEDTB1/
$S'H2-GAS',18*' ',$S'H2-LIQUID',15*' ',$S'HE-GAS',18*' ',$S'LI',22*' ',
$S'BE',22*' ',$S'C-2.265 G/CM**3',9*' ',$S'C-1.70 G/CM**3',10*' ',
$S'N2-GAS',18*' ',$S'O2-GAS',18*' ',$S'NE-GAS',18*' ',$S'NA',22*' ',
$S'MG',22*' ',$S'AL',22*' ',$S'SI',22*' ',$S'AR-GAS',18*' ',
$S'K',23*' ',$S'CA',22*' ',$S'TI',22*' ',$S'V',23*' ',$S'MN',22*' '
/;

DATA MEDTB2/
$S'FE',22*' ',$S'CO',22*' ',$S'NI',22*' ',$S'CU',22*' ',$S'ZN',22*' ',
$S'GE',22*' ',$S'SE',22*' ',$S'KR-GAS',18*' ',$S'RB',22*' ',
$S'MO',22*' ',$S'AG',22*' ',$S'CD',22*' ',$S'IN',22*' ',$S'SN',22*' ',
$S'XE-GAS',18*' ',$S'CS',22*' ',$S'GD',22*' ',$S'TA',22*' ',
$S'W',23*' ',$S'PT',22*' '
/;

DATA MEDTB3/
$S'AU',22*' ',$S'HG',22*' ',$S'PB',22*' ',$S'RN-GAS',18*' ',
$S'U',23*' ',
$S'AIR-GAS',17*' ',$S'CO2-GAS',17*' ',$S'POLYETHYLENE',12*' ',
$S'POLYPROPYLENE',11*' ',$S'XYLENE',18*' ',$S'TOLUENE',17*' ',
$S'NYLON',19*' ',$S'VINYLTOLUENE',12*' ',$S'A150-PLASTIC',12*' ',
$S'STILBENE',16*' ',$S'POLYSTYRENE',13*' ',$S'ANTHRACENE',14*' ',
$S'LEXAN',19*' ',$S'LUCITE',18*' ',$S'H2O',21*' '
/;

DATA MEDTB4/
$S'MYLAR',19*' ',
$S'KAPTON',18*' ',$S'LIF',21*' ',$S'POLYVINYL-CL',12*' ',
$S'PYREX-GLASS',13*' ',$S'SIO2',20*' ',$S'CAF2',20*' ',
$S'PHOTOEMULSION',11*' ',$S'AGCL',20*' ',$S'NAI',21*' ',
$S'LII',21*' ',$S'AGBR',20*' ',$S'CSI',21*' '
/;
%E  "PEGS4 MORTRAN (Page Eject Control)"
"   STDATA IS THE ACTUAL STERNHEIMER DATA                 "
"   AFACT,SK,X0,X1,IEV,CBAR                              "
"   THE SEQUENCE FIELD OF EACH CARD TELL WHICH MATERIAL ITS FOR."
"DIMENSION STDAT1(6,20),STDAT2(6,20),STDAT3(6,20),STDAT4(6,13);"
"EQUIVALENCE (STDATA(1,1),STDAT1(1,1));"
"EQUIVALENCE (STDATA(1,21),STDAT2(1,1));"
"EQUIVALENCE (STDATA(1,41),STDAT3(1,1));"
"EQUIVALENCE (STDATA(1,61),STDAT4(1,1));"
"moved above so don't mix declaration & data stmts for Linux fort77"

DATA STDAT1/
0.03535,6.790,1.864,3.5,19.2,9.584,
0.09179,5.831,0.476,2.0,21.8,3.263,
0.0114,7.625,2.202,4.0,41.8,11.139,
0.3492,3.233,0.0966,2.0,40.0,3.122,
0.3518,3.034,-0.0089,2.0,63.7,2.785,
0.5848,2.360,-0.0089,2.0,78.0,2.868,
0.7154,2.191,-0.0089,2.0,78.0,3.155,
0.2120,3.041,1.738,4.0,82.0,10.540,
0.2666,2.825,1.754,4.0,95.0,10.700,
0.1202,3.357,2.073,4.5,137.0,11.904,
0.2204,3.103,0.4515,2.8,149.0,5.053,
0.1714,3.223,0.2386,2.8,156.0,4.530,
0.3346,2.795,0.0966,2.5,166.0,4.239,
0.3755,2.720,0.0966,2.5,173.0,4.435,
0.1902,2.982,1.764,4.5,188.0,11.948,
0.3041,2.674,0.2386,3.0,190.0,5.642,
0.2177,2.874,0.1751,3.0,191.0,5.040,
0.1782,2.946,0.0485,3.0,233.0,4.445,
0.1737,2.935,-0.0089,3.0,245.0,4.266,
0.1996,2.812,-0.0089,3.0,272.0,4.270
/;

DATA STDAT2/
0.2101,2.771,-0.0089,3.0,286.0,4.291,
0.2229,2.713,-0.0089,3.0,297.0,4.260,
0.2504,2.619,-0.0089,3.0,311.0,4.312,
0.2557,2.613,-0.0089,3.0,322.0,4.419,
0.3163,2.468,0.0485,3.0,330.0,4.691,
0.2809,2.647,0.2386,3.0,350.0,5.141,
0.2979,2.635,0.2386,3.0,348.0,5.321,
0.1519,3.030,1.716,4.8,352.0,12.512,
0.1450,3.078,0.4515,3.5,363.0,6.478,
0.2228,2.824,0.1751,3.0,424.0,4.879,
0.3091,2.563,-0.0089,3.0,470.0,5.063,
0.1853,2.819,0.0485,3.3,469.0,5.273,
0.2004,2.790,0.1751,3.3,487.0,5.517,
0.1898,2.839,0.2386,3.3,488.0,5.534,
0.1329,3.020,1.563,5.0,482.0,12.728,
0.2214,2.784,0.4515,3.5,488.0,6.914,
0.2068,2.686,0.0485,3.5,591.0,5.874,
0.1663,2.805,0.1751,3.5,718.0,5.526,
0.1499,2.870,0.1751,3.5,727.0,5.406,
0.1465,2.903,0.0966,3.5,790.0,5.473
/;
%E  "PEGS4 MORTRAN (Page Eject Control)"
DATA STDAT3/
0.1533,2.881,0.0966,3.5,790.0,5.575,
0.1824,2.798,0.2386,3.5,800.0,5.961,
0.1861,2.814,0.2386,3.5,823.0,6.202,
0.1130,3.023,1.537,5.3,794.0,13.284,
0.1362,3.034,0.2386,3.5,890.0,5.869,
0.2466,2.879,1.742,4.0,85.7,10.595,
0.1999,3.022,1.648,4.0,88.7,10.239,
0.4875,2.544,0.1379,2.0,57.4,3.002,
0.2493,2.975,0.1537,2.3,59.2,3.126,
0.2755,2.911,0.1695,2.3,61.8,3.270,
0.2830,2.890,0.1722,2.3,62.5,3.303,
0.5345,2.439,0.1336,2.0,63.9,3.063,
0.3495,2.749,0.1467,2.2,64.7,3.201,
0.5462,2.435,0.1329,2.0,65.1,3.110,
0.2989,2.851,0.1731,2.3,67.7,3.367,
0.3670,2.724,0.1647,2.2,68.7,3.300,
0.5858,2.364,0.1146,2.0,69.5,3.151,
0.3865,2.664,0.1608,2.2,73.1,3.321,
0.3996,2.606,0.1824,2.2,74.0,3.330,
0.2065,3.007,0.2400,2.5,75.0,3.502
/;

DATA STDAT4/
0.3124,2.782,0.1561,2.3,78.7,3.326,
0.4061,2.614,0.1492,2.2,79.3,3.342,
0.1308,3.476,0.0171,2.5,94.0,3.167,
0.1873,2.962,0.1558,2.8,108.2,4.053,
0.2988,2.805,0.1479,2.5,134.0,3.971,
0.1440,3.220,0.1385,2.8,139.2,4.003,
0.3750,2.592,0.0676,2.5,166.0,4.065,
0.3416,2.496,0.1009,3.0,331.0,5.332,
0.1243,3.002,-0.0138,3.5,398.4,5.344,
0.1560,2.926,0.1203,3.5,452.0,6.057,
0.1785,2.845,0.0892,3.5,485.1,6.267,
0.1351,2.976,0.0358,3.5,487.2,5.616,
0.1796,2.840,0.0395,3.5,553.1,6.281
/;

"*****PHOTO ELECTRIC AND PAIR PRODUCTION EMPIRICAL DATA                "
"     SOURCE OF DATA IS HUBBELL, AND ISRAEL AND STORM.                 "
"DATA FOR COMMON BLOCK PHPAIR"
"     EKEDGE IS THE K IONIZATION ENERGY IN KEV                         "
"     NEPP(Z) IS THE # OF ENERGIES AT WHICH DATA IS GIVEN              "
"     EPP(IE,Z) IS THE IE'TH ENERGY FOR ELEMENT Z                      "
"     PHD(IE,Z) IS THE PHOTO CROSS-SECTION AT K=EPP(IE,Z)              "
"     PRD(IE,Z) IS THE PAIR PROC CROSS-SECTION AT K=EPP(IE,Z)          "
"     THE CROSS-SECTIONS ARE IN UNITS OF BARNS/ATOM.                   "
"     PUT IN DATA STMTS FOR NEPP,EPP,PHD,PRD LATER.                    "
"*****DATA CONTROLLING PIECE-WISE LINEAR FITS                          "
"DATA FOR COMMON BLOCK PWLFIN"
DATA EPE/.01/,ZTHRE,ZEPE/16*0.0/,NIPE/20/,NALE/$MXEKE/,EPG/.01/,
 ZTHRG/0.0,.1,0.0,0.0/,ZEPG/0.0,.01,0.0,0.0/,NIPG/20/,NALG/$MXGE/,
EPR/.01/,ZTHRR,ZEPR/2*0.0/,NIPR/20/,NALR/$MXRL/;
%E  "PEGS4 MORTRAN (Page Eject Control)"
"*****TABLES OF ATOMIC SYMBOLS, WEIGHTS, DENSITIES, AND"
"MEAN EXCITATION ENERGIES FOR Z=1 TO NET(=100)."
"DATA FOR COMMON BLOCK ELEMTB"
DATA NET/100/;
DATA ASYMT/'H','HE','LI','BE','B','C','N','O','F','NE',
 'NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI',
 'V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR',
 'KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD',
 'IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND',
 'PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA',
 'W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN',
 'FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES',
 'FM'/;

DATA WATBL/1.00797,4.0026,6.939,9.0122,10.811,12.01115,14.0067,
 15.9994,18.9984,20.183,22.9898,24.312,26.9815,28.088,30.9738,
 32.064,35.453,39.948,39.102,40.08,44.956,47.90,50.942,51.998,
 54.9380,55.847,58.9332,58.71,63.54,65.37,69.72,72.59,74.9216,
 78.96,79.808,83.80,85.47,87.62,88.905,91.22,92.906,95.94,99.0,
 101.07,102.905,106.4,107.87,112.4,114.82,118.69,121.75,127.60,
 126.9044,131.30,132.905,137.34,138.91,
 140.12,140.907,144.24,147.,150.35,151.98,157.25,158.924,162.50,
 164.930,167.26,168.934,173.04,174.97,178.49,180.948,183.85,
 186.2,190.2,192.2,195.08,196.987,200.59,204.37,207.19,208.980,
 210.,210.,222.,223.,226.,227.,232.036,231.,238.03,237.,242.,
 243.,247.,247.,248.,254.,253./;

 DATA RHOTBL/0.0808,0.19,0.534,1.85,2.5,2.26,1.14,1.568,1.5,1.0,
 0.9712,1.74,2.702,2.4,1.82,2.07,2.2,1.65,0.86,1.55,3.02,4.54,
 5.87,7.14,7.3,7.86,8.71,8.90,8.9333,7.140,5.91,5.36,5.73,4.80,
 4.2,3.4,1.53,2.6,4.47,6.4,8.57,9.01,11.50,12.20,12.50,12.,10.5,
 8.65,7.30,7.31,6.684,6.24,4.93,2.7,1.873,3.5,6.15,6.90,6.769,
 7.007, 1.  ,7.54,5.17,7.87,8.25,8.56,8.80,9.06,9.32,6.96,9.85,
 11.40,16.60,19.30,20.53,22.48,22.42,21.45,19.30,14.19,11.85,
 11.34,9.78,9.30, 1.  ,4., 1.  ,5.,  1. ,11.0,15.37,18.90,
 20.5,19.737,11.7,7.,1.   , 1.  , 1.  ,  1. /;

 DATA ITBL/19.2,41.8,40.,63.7,76.0,78.0,82.0,95.0,115.,137.,
 149.,156.,166.,173.,173.,180.,174.,188.,190.,191.,216.,233.,245.,
 257.,272.,286.,297.,311.,322.,330.,334.,350.,347.,348.,357.,352.,
 363.,366.,379.,393.,417.,424.,428.,441.,449.,470.,470.,469.,488.,
 488.,487.,485.,491.,482.,488.,491.,501.,523.,535.,546.,560.,574.,
 580.,591.,614.,628.,650.,658.,674.,684.,694.,705.,718.,727.,736.,
 746.,757.,790.,790.,800.,810.,823.,823.,830.,825.,794.,827.,826.,
 841.,847.,878.,890.,902.,921.,934.,939.,952.,966.,980.,994./;
 DATA ISTATB/1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0/;
%E  "PEGS4 MORTRAN (Page Eject Control)"
"**** DATA FOR ALRAD AND ALRADP FOR ELEMENT Z.LE.4       ****"
"     TAKEN FROM TABLE B.2 IN Y.TSAI REV.MOD.PHYS. 46,815(1974)  "

DATA ALRAD/5.31,4.79,4.74,4.71/,ALRADP/6.144,5.621,5.805,5.924/,
A1440/1194.0/,A183/184.15/;

"***** TABLES FOR FUNCTIONS IN PEGS, NAMES AND NUMBER OF ARGUMENTS     "
"DATA FOR COMMON BLOCK FUNCS"
DATA NFUNS/$NFUNS/;
DATA NFARG/$FLIST$NARGS/;
$FLIST$DATA(FNAME);

"DATA FOR COMMON BLOCK MIXDAT"
DATA GASP/0.0/;  "GASP=GAS PRESSURE=0.0 MEANS 'NON-GAS' STATE"

"DATA FOR COMMON BLOCK RAYLEI"
DATA IRAYL/0/; "IRAYL=0 MEANS NOT INCLUDE RAYLEIGH SCATTERING"
"                     1 MEANS INCLUDE RAYLEIGH SCATTERING"

"DATA FOR COMMON BLOCK THRESH"
DATA IUNRST/0/; "IUNRST=0 MEANS RESTRICTED STOPPING POWER"
"         IUNRST=1 MEANS UNRESTRICTED COLLISION STOPPING POWER"
"         IUNRST=2 MEANS CSDA DATA - TOTAL UNRESTRICTED STOPPING POWER"
"                  AND NO DISCRETE INTERACTIONS"
"         IUNRST=3 MEANS ALLOW BREM EVENTS BUT NO MOLLER INTERACTIONS"
"         IUNRST=4 MEANS ALLOW MOLLER EVENTS BUT NO BREM - NOTE THIS"
"                  GIVES COMPLETE GARBAGE IN A RUN SINCE ALL BREM IS "
"                  DUMPED ON SPOT"
"         IUNRST=5 MEANS UNRESTRICTED RADIATIVE STOPPING POWER"

"DATA FOR COMMON BLOCK MIMSD"
DATA BMIN/4.5/,MSTEPS/$MSSTEPS/,JRMAX/$MXJREFF/,
FSTEP/1.,2.,3.,4.,6.,8.,10.,15.,20.,30.,40.,60.,80.,100.,150.,200./;

"DATA FOR EPSTAR"
DATA EPSTFL/0/,IEPST/1/,IAPRIM/1/,IAPRFL/0/;

END; "END OF BLOCK DATA"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE DIFFER;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;
;

" IK: Variable declarations for implicit none"
$REAL AL183,F10,F20,A1DEN,A2DEN,B1DEN,B2DEN,C1DEN,C2DEN;

COMIN/MOLVAR,BREMPR,DBRPR,DERCON,RADLEN/;
"**********************************************************************"
"***THE DIFFERENTIAL CROSS-SECTIONS OF BREMSSTRAHLUNG AND PAIR       "
"   PRODUCTION ARE Z-DEPENDENT.  BUTCHER AND MESSEL USE A SAMPLING   "
"   TECHNIQUE FOR BREMSSTRAHLUNG WHICH ALSO DEPENDS ON THE LARGEST   "
"   AND SMALLEST ALLOWED ENERGY VALUES.                              "
"   THIS IS NOW TAKEN INTO ACCOUNT BY THE FUNCTION ILOG2(E/AP) WHICH "
"   GIVES THE NUMBER OF SUBDISTRIBUTIONS NEED TO PRODUCE PHOTONS DOWN"
"   TO THE LIMIT AP.                                                 "
"   THE DIFFERENTAL CROSS SECTIONS USED FOR BREMS AND PAIR ARE--     "
"   (THEY ARE CROSS SECTION PER RADIATION LENGTH)                    "

"***BELOW 50MEV (BETHE-HEITLER)--                                      "
"         BREMS--                                                      "
"     PHI1=(LOG(2)*(4/3+1/(9*LOG(A183)*(1+ZP)))* (1/LOG(2)*(1-EPS)/EPS)"
"    1 * A(DELTAPRIME) + (1/2) * (2*EPS) * B(DELTAPRIME)               "
"         PAIR --                                                      "
"     PHI2=(2/3 - 1/(36*LOG(A183)*(1+ZP)))*(1) * C(DELTAPRIME)         "
"    1  + (1/12*(4/3+1/(9*LOG(A183)*(1+ZP))))* (12*(EPS-1/2)**2)       "
"    2 * A(DELTAPRIME)                                                 "
"       WHERE A,B,C ARE SCREENING REJECTION FUNCTIONS GIVEN BY         "
"       A(D)=(3*F1(D)-F2(D)+8*ZG)/(3*F1(0)-F2(0)+8*ZG)                 "
"       B(D)=(F1(D)+4*ZG)/(F1(0)+4*ZG)                                 "
"       C(D)=(3*F1(D)+F2(D)+16*ZG)/(3*F1(0)+F2(0)+16*ZG)               "
"       AND WHERE                                                      "
"       DELTAPRIME= 136.*EXP(ZG)*RM*DEL= DELCM *DEL                    "
"       AND                                                            "
"       DEL =  EPS/(E*(1-EPS))      BREMSSTRAHLUNG                     "
"           =  1/(E*EPS*(1-EPS))    PAIR PRODUCTION                    "
"       F1(D) AND F2(D) ARE SCREENING FUNCTIONS GIVEN APPROXIMATELY BY "
"             IF D.LE.1 ,THEN                                          "
"       F1(D) = 20.867 - 3.242*D + 0.625*D**2                          "
"       F2(D) = 20.209 - 1.930*D - 0.086*D**2                          "
"         BUT IF D.GT.1 ,THEN                                          "
"       F1(D)=F2(D)= 21.12 - 4.184*ALOG(D+0.952)                       "
"         IN ADDITION WE HAVE THAT                                     "
"       F1(0)= 4.*ALOG(A183)                                           "
"       F2(0)= F1(0) - 2./3.                                           "
"***ABOVE 50 MEV (COULOMB CORRECTED BETHE HEITLER)                     "
"         BREMS--                                                      "
"     PHI1=(LOG(2)*(4/3+1/(9*LOG(A183)*(1+ZU)))* (1/LOG(2)*(1-EPS)/EPS)"
"    1 * A(DELTAPRIME) + (1/2) * (2*EPS) * B(DELTAPRIME)               "
"         PAIR --                                                      "
"     PHI2=(2/3-1/(36*LOG(A183)*(1+ZU)))* 1 * C(DELTAPRIME)            "
"    1  + (1/12*(4/3+1/(9*LOG(A183)*(1+ZU))))* (12*(EPS-1/2)**2)       "
"    2  * A(DELTAPRIME)                                                "
"       WHERE A,B,AND C ARE NOW GIVEN BY                               "
"       A(D) = (3*F1(D)-F2(D)+8*ZV)/(3*F1(0)-F2(0)+8*ZV)               "
"       B(D) = (F1(D)+4*ZV)/(F1(0)+4*ZV)                               "
"       C(D) = (3*F1(D)+F2(D)+16*ZV)/(3*F1(0)+F2(0)+16*ZV)             "
"       AND DELTAPRIME,DEL,F1, AND F2 ARE THE SAME AS BELOW 50 MEV.    "
"   BREMSSTRAHLUNG ALPHA(I), I=1,...,N.  ALPHA(N+1)=0.5                "
AL2 = ALOG(2.);
AL183= ALOG(A183);
ALPHI(1)= AL2*(4./3. + 1./(9.*AL183*(1.+ZP)));
ALPHI(2)= AL2*(4./3. + 1./(9.*AL183*(1.+ZU)));
"*****PAIR PRODUCTION DIFFERENTIAL CROSS-SECTION NUMBERS               "
ALFP1(1)= 2./3. - 1./(36.*AL183*(1.+ZP));
ALFP1(2)= 2./3. - 1./(36.*AL183*(1.+ZU));
ALFP2(1)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZP)));
ALFP2(2)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZU)));
"*****BRANCHING RATIO FOR PAIR PRODUCTION SAMPLING                     "
BPAR(1)= ALFP1(1)/(ALFP1(1)+ALFP2(1));
BPAR(2)= ALFP1(2)/(ALFP1(2)+ALFP2(2));

"*****WE MUST ALWAYS HAVE A,B,C(DELTA) POSITIVE. SHOWER ASSURES THIS BY"
"     REQUIRING DEL.LT.DELPOS(),AND HENCE THAT DELTA.LT.DELCM *DELPOS()"
"     THE CROSS-OVER POINT IS IN THE DELTA.GT.1 REGION,AND THE CROSSING"
"     CONDITION REDUCES TO --                                          "
"       F1(D) + 4*ZG = 0     IF  E.LT.50 MEV                           "
"       F1(D) + 4*ZV = 0     IF  E.GT.50 MEV                           "
"     OR --                                                            "
"       21.12 - 4.184*ALOG(DELCM *DELPOS(1)+0.952) +4.*ZG =0     E.LT.5"
"       21.12 - 4.184*ALOG(DELCM *DELPOS(2)+0.952) +4.*ZV =0     E.GT.5"
"       THUS DELPOS IN THE TWO ENERGY REGIONS IS GIVEN BY              "
DELCM= 136.0*EXP(ZG)*RM;
DELPOS(1)= (EXP((21.12+4.*ZG)/4.184)-0.952)/DELCM;
DELPOS(2)= (EXP((21.12+4.*ZV)/4.184)-0.952)/DELCM;
"     CALCULATION OF THE BETHE-HEITLER(B-H) A,B,C(DELTA).AND THE       "
"     COULUMB CORRECTED(CC) A,B,C(DELTA).  THE SHOWER PROGRAM COMPUTES "
"     THESE SIX SCREENING REJECTION FUNCTION WITH THE EXPRESSIONS--    "
"       DL1(LVL)+DELTA*(DL2(LVL)+DELTA*DL3(LVL))   IF DELTA.LT.1 ,AND B"
"       DL4(LVL)+DL5(LV)*ALOG(DELTA+DL6(LVL))      IF DELTA.GE.1       "
"       WHERE LVL IS USED TO SELECT THE FUNCTION--                     "
"       LVL=1   B-H A(DELTA)                                           "
"          =2   B-H B(DELTA)                                           "
"          =3   B-H C(DELTA)                                           "
"          =4   CC  A(DELTA)                                           "
"          =5   CC  B(DELTA)                                           "
"          =6   CC  C(DELTA)                                           "
"     FIRST COMPUTE THE DENOMINATORS                                   "
F10=4.*AL183;
F20=F10 - 2./3.;
A1DEN =3.0*F10- F20 + 8.0*ZG;
A2DEN =3.0*F10- F20 + 8.0*ZV;
B1DEN = F10 + 4.0*ZG;
B2DEN = F10 + 4.0*ZV;
C1DEN = 3.0*F10+ F20 + 16.0*ZG;
C2DEN = 3.0*F10+ F20 + 16.0*ZV;
"     LVL=1, B-H A(DELTA)                                              "
DL1(1)= (3.0*20.867-20.209+8.0*ZG)/A1DEN;
DL2(1)= (3.0*(-3.242)-(-1.930))/A1DEN;
DL3(1)= (3.0*(0.625)-(0.086))/A1DEN;
DL4(1)= (2.0*21.12+8.0*ZG)/A1DEN;
DL5(1)=  2.0*(-4.184)/A1DEN;
DL6(1)=  0.952;
"     LVL=4, CC  A(DELTA)                                              "
DL1(4)= (3.0*20.867-20.209+8.0*ZV)/A2DEN;
DL2(4)= (3.0*(-3.242)-(-1.930))/A2DEN;
DL3(4)= (3.0*(0.625)-(0.086))/A2DEN;
DL4(4)= (2.0*21.12+8.0*ZV)/A2DEN;
DL5(4)=  2.0*(-4.184)/A2DEN;
DL6(4)=  0.952;
"     LVL=2, B-H B(DELTA)                                              "
DL1(2)= (20.867+4.0*ZG)/B1DEN;
DL2(2)= -3.242/B1DEN;
DL3(2)=  0.625/B1DEN;
DL4(2)= (21.12+4.0*ZG)/B1DEN;
DL5(2)= -4.184/B1DEN;
DL6(2)= 0.952;
"     LVL=5, CC B(DELTA)                                               "
DL1(5)= (20.867+4.0*ZV)/B2DEN;
DL2(5)= -3.242/B2DEN;
DL3(5)= 0.625/B2DEN;
DL4(5)= (21.12+4.0*ZV)/B2DEN;
DL5(5)= -4.184/B2DEN;
DL6(5)= 0.952;
"     LVL=3, B-H C(DELTA)                                              "
DL1(3)= (3.0*20.867+20.209+16.0*ZG)/C1DEN;
DL2(3)= (3.0*(-3.242)+(-1.930))/C1DEN;
DL3(3)= (3.0*0.625+(-0.086))/C1DEN;
DL4(3)= (4.0*21.12+16.0*ZG)/C1DEN;
DL5(3)=  4.0*(-4.184)/C1DEN;
DL6(3)=  0.952;
"     LVL=6, CC  C(DELTA)                                              "
DL1(6)= (3.0*20.867+20.209+16.0*ZV)/C2DEN;
DL2(6)= (3.0*(-3.242)+(-1.930))/C2DEN;
DL3(6)= (3.0*0.625+(-0.086))/C2DEN;
DL4(6)= (4.0*21.12+16.0*ZV)/C2DEN;
DL5(6)=  4.0*(-4.184)/C2DEN;
DL6(6)=  0.952;
"*****PUNCHED AND PRINTED OUTPUT                                       "
OUTPUT ; (/,' IN SUBROUTINE DIFFER:'//
' DIFFERENTIAL CROSS-SECTION DATA,COMMON BREMPR'/
' DL1(6),DL2(6),DL3(6),DL4(6),DL5(6),DL6(6),ALPHI(2),BPAR(2),',
 'DELCM,DELPOS(2)');
OUTPUT DL1,DL2,DL3,DL4,DL5,DL6,ALPHI,BPAR,DELCM,DELPOS;
(1X,6E14.5);
RETURN;
END; "END OF SUBROUTINE DIFFER"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE EFUNS(E,V);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;
;

$REAL E,V(8);

" IK: Variable declarations for implicit none"
$REAL BREM,AMOLL,BHAB,ANNIH,ESIG,PSIG;

" IK: Function declarations for implicit none"
$REAL BREMTM,AMOLTM,BHABTM,ANIHTM,SPTOTE,SPTOTP,TMXS;

"*****SUBROUTINE TO COMPUTE ELECTRON FUNCTIONS TO BE FIT           "
"     IN A WAY THAT AVOIDS REPETITION.                             "
COMIN/THRESH/;
IF(IUNRST.EQ.0 .OR. IUNRST.EQ.1 .OR. IUNRST.EQ.5)[
"  REGULAR DATA SET OR"
"   UNRESTRICTED COLLISIONAL(1) OR RADIATIVE(5) STOPPING POWERS"
BREM=BREMTM(E);
AMOLL=AMOLTM(E);
BHAB=BHABTM(E);
ANNIH=ANIHTM(E);
ESIG=BREM+AMOLL; "TOTAL ELECTRON CROSS-SECTION"
V(1)=ESIG;
PSIG=BREM+BHAB+ANNIH;"TOTAL POSITRON CROSS SECTION"
V(2)=PSIG;
V(3)=SPTOTE(E,AE,AP); "TOTAL ELECTRON STOPPING POWER"
V(4)=SPTOTP(E,AE,AP);"TOTAL POSITRON STOPPING POWER"
"EBR1=BREM/(BREM+AMOLL)"
IF (ESIG.GT.0.0)[V(5)=BREM/ESIG;]
ELSE["BELOW THRESHOLD FOR BOTH BREMS AND MOLLER. USE THE BRANCHING"
"RATIO THAT EXISTED WHEN CROSS SECTION APPROACHED ZERO"
IF (THBREM.LE.THMOLL)[V(5)=1.0;]ELSE[V(5)=0.0;]
]
V(6)=BREM/PSIG;"PBR1=BREM/(BREM+BHABA+ANNIH)"
V(7)=(BREM+BHAB)/PSIG;"PBR2=(BREM+BHABA)/(PSIG)"
"MAXIMUM ALLOWED TRANSPORT STEP, FROM MULTIPLE SCATTERING"
V(8)=TMXS(E);
]
"  THE FOLLOWING ARE UNDOCUMENTED ADDITIONS"
ELSEIF(IUNRST.EQ.2)[ "FULL CSDA DATA SET WITH NO DISCRETE INTERACTIONS"
/V(1),V(2),V(5),V(6),V(7)/=0.0;
"ZERO TOTAL CROSS SECTION FOR EL & POS, AND ZERO BRANCHING RATIOS"
V(3) = SPTOTE(E,E,E);"  TOTAL UNRESTRICTED STOPPING POWER"
V(4) = SPTOTP(E,E,E);
V(8) = TMXS(E);]


ELSEIF(IUNRST.EQ.3)["CONSIDER BREM AND ANNIHILATION IN FLIGHT AS"
"     DISCRETE EVENTS BUT TREAT DELTAS IN CSDA"
BREM=BREMTM(E);  ANNIH=ANIHTM(E);
V(1)=BREM; "TOTAL X-SECTION IS JUST BREM"
V(2)=BREM + ANNIH;"POSITRONS ALSO HAVE ANNIHILATION IN FLIGHT"
V(3)=SPTOTE(E,E,AP);"UNRESTRICTED COLLISIONAL+RESTRICTED RADIATIVE"
V(4)=SPTOTP(E,E,AP);"    ''                             ''    "
V(5)=1.0;"ALL ELECTRON EVENTS ARE BREM EVENTS"
V(6)=BREM/V(2);"FRACTION FOR POSITRONS WHICH IS BREM"
V(7)=V(6);"FRACTION WHICH IS BREM + COLLISION(=0)"
V(8)=TMXS(E);]

ELSEIF(IUNRST.EQ.4)["CREATE SECONDARIES BUT HAVE NO DISCRETE BREM OR"
"ANNIHILATION IN FLIGHT"

V(1)=AMOLTM(E);"ONLY MOLLERS FOR ELECTRONS"
V(2)=BHABTM(E);"ONLY BHABHA FOR POSITRONS"
V(3)=SPTOTE(E,AE,E);"RESTRICTED COLLISIONAL + UNRESTRICTED RADIATIVE"
V(4)=SPTOTP(E,AE,E);"         ''                         ''       "
V(5)=0.0;"I.E. NEVER BREMS"
V(6)=0.0;"I.E. NEVER BREMS"
V(7)=1.0;"ALL BHABHA - NO ANNIHILATION"
V(8)=TMXS(E);]

ELSE ["IUNRST=6 OR 7 NOT ALLOWED HERE"
OUTPUT IUNRST; (//'*********IUNRST=',I4,' NOT ALLOWED BY EFUNS*****'/
' IUNRST=6 OR 7 ONLY ALLOWED WITH CALL OR PLTN OPTIONS'//);
$CALL_EXIT(20);]
RETURN;
END; "END OF SUBROUTINE EFUNS"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE GFUNS(E,V);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"*****SUBROUTINE TO COMPUTE PHOTON FUNCTIONS TO BE FIT             "
"     IN A WAY THAT AVOIDS REPETITION.                             "
implicit none;
$REAL E,V(4);
" IK: Variable declarations for implicit none"
$REAL PAIR,COMP,PHOT,COHR,TSANSC,GMFP;
" IK: Function declarations for implicit none"
$REAL PAIRTU,COMPTM,PHOTTE,COHETM;
;
PAIR=PAIRTU(E);
COMP=COMPTM(E);
PHOT=PHOTTE(E);
COHR=COHETM(E);
TSANSC=PAIR+COMP+PHOT;
GMFP=1.0/TSANSC;

"V(1)=GMFP (GAMMA MEAN FREE PATH)                                  "
V(1)=GMFP;
"V(2)=GBR1 (GAMMA BRANCHING RATIO NUMBER 1)                        "
V(2)=PAIR*GMFP;
"V(3)=GBR2 (GAMMA BRANCHING RATIO NUMBER 2)                        "
V(3)=(PAIR+COMP)*GMFP;
"V(4)=CRATIO (COHERENT RATIO)                                      "
V(4)=TSANSC/(TSANSC+COHR);
RETURN;
END; "END OF SUBROUTINE GFUNS"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE HPLT1(EI,EL,EH,ICAP,NTIMES,NBINS,NH,IDF,IDSIG,
                 IRSIG,ITSIG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
" IDF,IDF+1,IDF+2,IDSIG,IRSIG AND ITSIG ARE FMPX POINTERS TO THE   "
" APPROX CDF,CDF INVERSE, PDF, D(SIGMA)/D(ES), INTEGRAL            "
" D(SIGMA)/D(ES) AND TOTAL SIGMA FOR THE INTERACTION BEING TESTED. "
;
implicit none;
$REAL EI,EL,EH;
$INTEGER NTIMES,NBINS,NH(200),IDF,IDSIG,IRSIG,ITSIG;
$TYPE ICAP(12);


" IK: Variable declarations for implicit none"
$INTEGER IBIN,I,J,IC;
$REAL    Y,AMAX,RTOT,TTOT,DFH,DELDF,DFL,DNORM,ELI,EHI,EINT,V;

" IK: Function declarations for implicit none"
$REAL FI;

COMIN/FUNCS/;
" ROUTINE TO PRINT PLOT COMPARISONS OF EGS SAMPLING ROUTINE H      "
" HISTOGRAMS WHITH THEORETICAL HISTOGRAMS AND FUNCTION VALUES FROM "
" PEGS.  MAYBE EXTEND TO GRAPHIC DEVICES LATER.                    "
$TYPE L(100),CM,CR,CD,CBL;
$INTEGER IPNTS;
DATA L/100*' '/,CM/'M'/,CR/'R'/,CD/'D'/,CBL/' '/,IPNTS/10/
;
" CONSTRUCT PROPERLY NORMALIZED DATA VALUES.  NOTE THAT WHAT IS    "
" REALLY BEING PLOTTED IS D(SIGMA)/D(DF(ES)) ,E.G. FOR BREMS IT    "
" WOULD BE K*D(SIGMA)/D(K), WHERE K IS THE PHOTON ENERGY.  FOR THE "
" HISTOGRAMS IT IS AVERAGE(D(SIGMA)/D(DF(E(S)))) THAT IS PLOTTED.  "
" What is IBIN and what is Y ???"
" Where do they come from ??? "
IBIN(Y)=MAX0(1,MIN0(100,IFIX(Y/AMAX*100.)+1));
RTOT=FI(IRSIG,EI,EL,EH,0.);
TTOT=FI(ITSIG,EI,0.,0.,0.);
DFH=FI(IDF,EH,0.,0.,0.);
DFL=FI(IDF,EL,0.,0.,0.);
DELDF=(DFH-DFL)/NBINS;
DNORM=RTOT/(DELDF*NTIMES);
" FIND MAXIMUM                                                     "
AMAX=0.0;
ELI=EL;
DO I=1,NBINS[
EHI=FI(IDF+1,DFL+DELDF*I,0.,0.,0.);
AMAX=AMAX1(AMAX,NH(I)*DNORM,FI(IRSIG,EI,ELI,EHI,0.)/DELDF);
" FIND MAXIMUM OVER INTERNAL POINTS                                "
DO J=1,IPNTS[
EINT=FI(IDF+1,DFL+DELDF*(I-1+FLOAT(J-1)/(IPNTS-1)),0.,0.,0.);
AMAX=AMAX1(AMAX,FI(IDSIG,EI,EINT,0.,0.)/FI(IDF+2,EINT,0.,0.,0.));]
ELI=EHI;]
" WRITE OUT FUNCTIONS USED                                         "
OUTPUT ICAP,(FNAME(I,IDSIG),I=1,6),(FNAME(I,IRSIG),I=1,6),
(FNAME(I,ITSIG),I=1,6),((FNAME(I,IDF+J-1),I=1,6),J=1,3),RTOT,TTOT
;
('1HPLT FUNCTIONS:MONTE,DSIG,RSIG,TSIG,CDF,CDFINVERSE,PDF=',
12A1,6(',',6A1)/' RTOT,TTOT=',1P,2E15.5);
" WRITE OUT RAW DATA FOR USER TO SEE STATISTICS                    "
OUTPUT ICAP,EI,EL,EH,NBINS,NTIMES,(NH(I),I=1,NBINS);
(' HPLT:RAW EGS DATA FOR ROUTINE ',12A1,',EI,ELO,EHI=',
 3F12.3,',NBINS,NTIMES=',2I10,',DATA='/(1X,10I10));
OUTPUT;(' KEY TO PLOT,M=MONTECARLO DATA,R=THEORETICAL INTEGRALS',
 ' OVER BINS,D=DIFFERENTIAL CROSS-SECTION'/
 '    ENERGY          VALUE');
" NOW PLOT THEM                                                    "
ELI=EL;
DO I=1,NBINS[
EHI=FI(IDF+1,DFL+DELDF*I,0.,0.,0.);
V=NH(I)*DNORM;
IC=IBIN(V);
L(IC)=CM;
OUTPUT ELI,V,L;
(1X,1P,2E15.5,' I',100A1);
L(IC)=CBL;
V=FI(IRSIG,EI,ELI,EHI,0.)/DELDF;
IC=IBIN(V);
L(IC)=CR;
OUTPUT ELI,V,L;(1X,1P,2E15.5,' I',100A1);
L(IC)=CBL;
DO J=1,IPNTS[
EINT=FI(IDF+1,DFL+DELDF*(I-1+FLOAT(J-1)/(IPNTS-1)),0.,0.,0.);
V=FI(IDSIG,EI,EINT,0.,0.)/FI(IDF+2,EINT,0.,0.,0.);
IC=IBIN(V);
L(IC)=CD;
OUTPUT EINT,V,L;(1X,1P,2E15.5,' I',100A1);
L(IC)=CBL;]
ELI=EHI;]
RETURN;
END; "END OF SUBROUTINE HPLT1"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE LAY;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"PRODUCES DECK OF MATERIAL DEPENDENT DATA.                         "
implicit none;

" IK: Variable declarations for implicit none"
$INTEGER IP,IUECHO,IE,NSGE,NSEKE,NLEKE,NCMFP,NRANGE,NGE,NEKE,I,IFUN;
$INTEGER lnblnk1;

COMIN/BREMPR,MIXDAT,RAYLEI,RSLTS,THRESH,MOLVAR,EPSTAR,FileNames/;
"          NRC MOD DEC 2,1988                  ======"

character fn*512,line*80;
logical   is_there;
;
:INT:FORMAT(1X,14I5);
:FLT:FORMAT(1X,1P,5E14.5);
IP=7;IUECHO=6;
"   PUT OUT HEADING, AND COMPOSITION CARDS"
$ECHOWRITE(IP,:FMT1:) MEDIUM,IDSTRN;
:FMT1: FORMAT(' MEDIUM=',24A1,',STERNCID=',24A1);
IF(GASP.NE.0.0) [$ECHOWRITE(IP,:FMT2:) MTYP,RHO,NE,GASP,
IUNRST,EPSTFL,IAPRIM; "  NRC MODS DEC 2 1988"
:FMT2: FORMAT(1X,4A1,',RHO=',1P,E11.4,',NE=',I2,',GASP=',
  1P,E11.4,', IUNRST=',I1,', EPSTFL=',I1,', IAPRIM=',I1);] "GASES"
"   NRC MOD  ========================================="
ELSE [$ECHOWRITE(IP,:FMT3:) MTYP,RHO,NE,IUNRST,EPSTFL,IAPRIM;
"   NRC MODS                            ===================="
:FMT3: FORMAT(1X,4A1,',RHO=',1P,E11.4,',NE=',I2,', IUNRST=',I1,
', EPSTFL=',I1,', IAPRIM=',I1);] "NRC MODS DEC 1988"
DO IE=1,NE [
$ECHOWRITE(IP,:FMT5:) ASYM(IE),Z(IE),WA(IE),PZ(IE),RHOZ(IE);
:FMT5: FORMAT(' ASYM=',A2,',Z=',F3.0,',A=',F9.3,
              ',PZ=',1P,E12.5,',RHOZ=',E12.5); ]
"NOW COMES THE DATA PROPER"
$ECHOWRITE(IP,:FLT:) RLC,AE,AP,UE,UP;
"FAKE SOME PARAMETERS FOR NOW"
/NSGE,NSEKE,NLEKE,NCMFP,NRANGE/=0;
NGE=NGL; NEKE=NEL; "CHANGE NAMES OF SOME VARIABLES"
$ECHOWRITE(IP,:INT:)NSGE,NGE,NSEKE,NEKE,NLEKE,NCMFP,NRANGE,IRAYL,IUNRST;
$ECHOWRITE(IP,:FLT:)(DL1(I),DL2(I),DL3(I),DL4(I),DL5(I),DL6(I),I=1,6);
$ECHOWRITE(IP,:FLT:) DELCM,(ALPHI(I),BPAR(I),DELPOS(I),I=1,2);
$ECHOWRITE(IP,:FLT:) XR0,TEFF0,BLCC,XCC;
$ECHOWRITE(IP,:FLT:) BXE,AXE;
$ECHOWRITE(IP,:FLT:) ((BFE(I,IFUN),AFE(I,IFUN),IFUN=1,8),I=1,NEKE);
$ECHOWRITE(IP,:FLT:) EBINDA,BXG,AXG;
$ECHOWRITE(IP,:FLT:) ((BFG(I,IFUN),AFG(I,IFUN),IFUN=1,3),I=1,NGE);
IF (IRAYL.NE.0) [
    $ECHOWRITE(IP,:INT:) NGR;
    $ECHOWRITE(IP,:FLT:) BXR,AXR;
    $ECHOWRITE(IP,:FLT:) (BFR(I),AFR(I),I=1,NGR);
    $ECHOWRITE(IP,:FLT:) (BFG(I,4),AFG(I,4),I=1,NGE);
]

"Now record this medium in the pegs4 log file so that later"
"we can check and see how the media data was done."
fn = $EGS_HOME//'pegs4'//$file_sep//'data'//$file_sep//'pegs4.log';
inquire(file=fn,exist=is_there);
IF( is_there ) [ "File present, open and go to end"
    open(33,file=fn,status='old',access='append',err=:log_open_error:);
    "LOOP [ read(33,*,err=:end-of-data-log:,end=:end-of-data-log:); ]"
    ":end-of-data-log:;"
] ELSE [
    open(33,file=fn,status='new',err=:log_open_error:);
]
DO i=1,len(line) [ line(i:i) = '-'; ]
write(33,'(a)') line;
write(33,'(a,24a1)') 'medium = ',medium;
write(33,'(a,$)') 'data generated on: ';
call egs_fdate(33); write(33,*);
write(33,'(a,4a1,a,1pe11.4,a,i2,a,i1,a,i1,a,i1)') 'type=',mtyp,
  ' rho=',rho,' ne=',ne,' iunrst=',iunrst,' epstfl=',
  epstfl,' iaprim=',iaprim;
IF( irayl ~= 0 ) [ write(33,'(a)') 'Rayleigh data included'; ]
ELSE [ write(33,'(a)') 'Rayleigh data not included'; ]
IF( using_sym_links ) [
    write(33,'(a)')
'pegs4 run using symbolik links => no info about file names available';
    return;
]
IF( epstfl = 1 ) [
    write(33,'(a,a)') 'density correction file: ',
      density_file(:lnblnk1(density_file));
]
write(33,'(a,a)') 'cross section data from: ',
    xsection_file(:lnblnk1(xsection_file));
write(33,'(a,a)') 'form factor data from: ',
    formf_file(:lnblnk1(formf_file));
write(33,'(a,1pe14.5,a,1pe14.5,a,1pe14.5,a,1pe14.5)')
  'ae=',ae,' ap=',ap,' ue=',ue,' up=',up;
write(33,'(a,a)') 'data written to: ',
  output_file(:lnblnk1(output_file));
close(33);

"THAT'S ALL FOR NOW"
RETURN;

:log_open_error:
write(6,*) 'Failed to open pegs4 material log file';
return;
END; "END OF SUBROUTINE LAY"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE MIX;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;

implicit none;

" IK: Variable declarations for implicit none"
$INTEGER I,IZZ;
$REAL    AL183,ZAB,V2000;

" IK: Function declarations for implicit none"
$REAL FCOULC,XSIF;

COMIN/MIMSD,MIXDAT,MOLVAR,PMCONS,DERCON,RADLEN/;
$REAL XSI(20),ZZX(20),FZC(20),FCOUL(20),ZZ(20);
" MOLVAR - - MOLECULAR VARIABLES NEEDED BY DIFFER, AND MOLIER      "

" THE FOLLOWING ASSUMES THAT THE MATERIAL BEING DEALT WITH         "
" IS EITHER A COMPOUND, OR A HOMOGENEOUS MIXTURE.                  "
"          MOLECULAR VARIABLES                                     "
" NE       NUMBER OF DIFFERENT TYPES OF ATOMS IN THE MATERIAL.     "
" PZ(I)    PROPORTION OF ELEMENT OF TYPE I.  IF A COUMPOUND,       "
" THEN PZ(I) WILL BE THE NUMBER OF ATOMS OF TYPE I IN THE MOLECULE."
" IF A MIXTURE,SUCH AS CONCRETE, PZ(I) COULD BE THE PER CENT OF    "
" THE ATOMS WHICH ARE OF TYPE I.                                   "
" Z(I)     PERIODIC NUMBER OF ATOMS OF TYPE I                      "
" WA(I)    ATOMIC WEIGHT FOR ATOMS OF TYPE I.                      "
" WM = SUM(PZ(I)*WA(I)) = MOLECULAR  WEIGHT IF A COUMPOUND         "
" OR A 'MIXTURE WEIGHT' IF A MIXTURE.                              "
" RHO      DENSITY OF THE MATERIAL. (IN GRAMS/CM**3)               "
" RHOZ(I)  PARTIAL DENSITY DUE TO ATOMS OF TYPE I. (GM/CM**3)      "
"          ELECTRON DENSITY VARIABLE                               "
" ZC = SUM(PZ(I)*Z(I)) = NUMBER OF ELECTRONS/MOLECULE              "
"          BREMSSTRAHLUNG AND PAIR PRODUCTION VARIABLES ARE WEIGHTE"
" BY PZ(I)*Z(I)**2 FOR THE NUCLEUS, AND BY PZ(I)*Z(I)*XSI(I) FOR   "
" ATOMIC ELECTRONS.                                                "
" TPZ = SUM(PZ(I))                                                 "
" XSI(I) = LOG(A1440/Z(I)**(2./3.))/(LOG(A183/Z(I)**(1./3.))  -    "
"               FCOUL(Z(I)) )                                      "
" ZZX(I) =  PZ(I)*Z(I)*(Z(I)+XSI(I)) = BREMS AND PAAR WEIGHTS      "
" EZ = ZC/TPZ  EFFECTIVE Z                                         "
" ZT = SUM(ZZX(I))                                                 "
" ZA = LOG(A183)*ZT   BUTCHER AND MESSELS L.C.'A' (1960)P.18       "
" ZB = SUM(ZZX(I)*LOG(Z(I)**(-1./3.)  B&M'S L.C.'B' IBID.          "
" ZF = SUM(ZZX(I)*FCOUL(Z(I))),WHERE FCOUL IS THE COULOMB          "
" CORRECTION FUNCTION.                                             "
" RATIOS--                                                         "
" ZG = ZB/ZT ,EXP(ZG)=WEIGHTED GEOMETRIC MEAN OF Z**(-1/3)         "
" ZP = ZB/ZA , B&M IBID.P18 L.C.'P'                                "
" ZV= (ZB-ZF)/ZT                                                   "
" ZU = (ZB-ZF)/ZA                                                  "
"          MULTIPLE SCATTERING VARIABLES                           "
" ACCORDING TO MESSEL AND CRAWFORD(1970), MOST OF THE MULTIPLE     "
" SCATTERING DUE TO THE FIELD OF THE ATOMIC ELECTRONS IS ALREADY   "
" ACCOUNTED FOR BY THE DISCRETE MOLLER SCATTERING. HENCE,THE       "
" FOLLOWING VARIABLES ARE ONLY WEIGHTED BY PZ(I)*Z(I)**2           "
" HOWEVER I HAVE NOT JUSTIFIED THE ABOVE ASSERTION THEORETICALLY   "
" THEORETICALLY, AND COMPARISON OF EXPERIMENTS WITH EGS HAVE       "
" SHOWN EGS PHOTON SPECTRUM DEFICIENT IN THE BACKWARD DIRECTION.   "
" THEREFORE, I WILL EXPERIMENT WITH RESTORING THE ELECTRON SCATTER-"
" ING TERM.  ITS CONTRIBUTION WILL BE REPRESENTED BY THE MACRO VAR-"
" IABLE, $FUDGEMS, WHICH WILL HAVE THE VALUE 0.0 FOR NO ELECTRON   "
" SCATTERING AND 1.0 FOR FULL ELECTRON SCATTERING.  AND WE NOW HAVE"
" WEIGHTING BY PZ(I)*Z(I)*(Z(I)+$FUDGEMS).                         "
" ZZ(I) = PZ(I)*Z(I)*(Z(I)+$FUDGEMS) "
" ZS = SUM(ZZ(I))                                                  "
" ZE = SUM(ZZ(I)*LOG(Z(I)**(-2./3.)))                              "
" ZX = SUM(ZZ(I)*LOG(1.+3.34*(FSC*Z(I))**2))                       "
"               ELECTON DENSITY(ELECTRONS/CM**3)                   "
" EDEN=AN*RHO/WM*ZC                                                "
"          RADIATION LENGTH                                        "
" USEFUL FOR GAUGING THE STEP SIZE, EVEN IF IT IS NOT USED AS THE  "
" UNIT OF DISTANCE.                                                "
"  1./RLC =(AN*RHO/WM)*4.0*FSC*R0**2*                              "
"    SUM( Z(I)*(Z(I)+XSI(I))*(LOG(A183*Z(I)**(-1./3.)-FCOUL(Z(I))) "
"        =(AN*RHO/WM)*4.*FSC*R0**2*(ZAB-ZF)                        "
" INPUT MOLECULAR VARIABLES AND COMPUTE Z-RELATED PARAMETERS       "

OUTPUT ; (/' IN SUBROUTINE MIX: '/);
IF (GASP.EQ.0.0) [OUTPUT NE,RHO;
(' NUMBER OF ELEMENTS = ',I3,',  DENSITY=',1P,G15.6,' (G/CM**3)');]
ELSE [OUTPUT NE,RHO,GASP;
(' NUMBER OF ELEMENTS = ',I3,',  DENSITY=',1P,G15.6,' (G/CM**3) AT NTP',
 '  GAS PRESSURE=',1P,G15.6,' ATM.');]
OUTPUT (I,Z(I),WA(I),PZ(I),RHOZ(I),I=1,NE);
('0  I       Z(I)           WA(I)          PZ(I)         RHOZ(I) '/
' INDEX   PERIODIC        ATOMIC       PROPORTION     PROPORTION '/
'          NUMBER         WEIGHT        BY NUMBER      BY WEIGHT '//
(I5,1P,4G15.6));
"SCALE RHO FOR GASES BY THE GAS PRESSURE"
IF (GASP.NE.0.0) [RHO=GASP*RHO;]
"     FIND VARIOUS SUMS AND SET OTHER VARIABLES                        "
AL183 = ALOG(A183);
/TPZ,WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZAB/=0.0;
DO I=1,NE[
TPZ = TPZ + PZ(I);
WM = WM + PZ(I)*WA(I);
ZC = ZC + PZ(I)*Z(I);
FZC(I) =(FSC*Z(I))**2;
FCOUL(I) = FCOULC(Z(I));
XSI(I) = XSIF (Z(I));
ZZX(I) = PZ(I)*Z(I)*(Z(I)+XSI(I));
IF (Z(I).LE.4.0) [IZZ=Z(I);
ZAB=ZAB+ZZX(I)*ALRAD(IZZ);] "IN THE CASE OF Z.LE.4 "
ELSE [ZAB=ZAB+ZZX(I)*(AL183+ALOG(Z(I)**(-1./3.)));] "Z.GT.4"
ZT = ZT + ZZX(I);
ZB = ZB + ZZX(I)*ALOG(Z(I)**(-1./3.));
ZF = ZF + ZZX(I)*FCOUL(I);
ZZ(I) = PZ(I)*Z(I)*(Z(I)+$FUDGEMS);
ZS = ZS + ZZ(I);
ZE = ZE + ZZ(I)*((-2./3.)*ALOG(Z(I)));
ZX = ZX + ZZ(I)*ALOG(1.+3.34*FZC(I));] "END OF I LOOP"
EZ = ZC/TPZ;
ZA = AL183*ZT;
ZG = ZB/ZT;
ZP = ZB/ZA;
ZV = (ZB-ZF)/ZT;
ZU = (ZB-ZF)/ZA;
EDEN=AN*RHO/WM*ZC;
RLC = 1./( (ZAB-ZF)*(AN*RHO/WM)*4.0*FSC*R0**2 );
OUTPUT WM,ZC,ZT,ZA,ZB,ZAB,ZF,ZG,ZP,ZV,ZU,ZS,ZE,ZX,RLC,
 (I,XSI(I),ZZX(I),FZC(I),FCOUL(I),ZZ(I),I=1,NE);
('0Z VARIABLES--WM,ZC,ZT,ZA,ZB,ZAB'/1P,6E14.6/
 '0ZF,ZG,ZP,ZV,ZU,ZS'/1P,6E14.6/'0ZE,ZX,RLC'/1P,3E14.6/
'0(I,XSI,ZZX,FZC,FCOUL,ZZ,I=1,NE)'/
 (I5,1P,5E14.6));
"$DUMP EDEN;"

"NOW COMPUTE MATERIAL-DEPENDENT CONSTANTS FOR MULTIPLE SCATTERING"
"LET B BE MOLIERE'S UPPER CASE B, AND LET BLC BE MOLIERE'S LOWER CASE B"
"THEN USING SCOTT'S NOTATION, A MEASURE OF THE NUMBER OF SCATTERS IS"
"OMEGA0=EXP(BLC).  NOW B AND BLC ARE RELATED BY"
"BLC=B-ALOG(B);, OR EXP(BLC)=EXP(B)/B; "
"NOW LET T BE THE TRANSPORT DISTANCE IN RL. THEN,"
"OMEGA0=EXP(BLC)"
"      =( A6680*RHO*ZS*EXP(ZE/ZS)*RLC/(WM*EXP(ZX/ZS)) )*T/BETA**2"
"WHERE BETA IS V/C FOR THE PARTICLE"
"NOW SUPPOSE THAT XC IS CHI-SUB-C, THE CHARACTERISTIC ANGLE OF"
"MOLIERE'S THEORY.  THEN IT IS GIVEN BY"
"XC= (A22P9/RADDEG)*SQRT( ZS*RHO*RLC/WM ) * SQRT(T) /(E*BETA**2) "
" WHERE E IS THE ENERGY OF THE PARTICLE IN MEV."
"NOW IN MOLIERE'S THEORY, LET XRM BE XC*SQRT(B).  THEN"
" (MOLIERE'S REDUCE ANGLE)=(REAL ANGLE)/XRM."
"FOR THE VARIABLE SAMPLING DONE IN EGS, A DIFFERENT REDUCED"
"ANGLE IS USED:"
" (REDUCED ANGLE FOR VARIABLE SAMPLING)=(REAL ANGLE)/XRV "
" WHERE NOW XRV=XC*SQRT(BLC)."
"THIS IS DONE BECAUSE BLC IS MORE SIMPLY RELATED TO THE TRANSPORT"
"DISTANCE THAN IS B."

"WITH THIS BACKGROUND WE NOW PROCEED TO COMPUTE"
"XR0, TEFF0, BLCC, AND XCC, WHICH ARE PARAMETERS NEEDED IN EGS"
"THESE PARAMETERS ARE USED AS FOLLOWS:(IN OUR NOTATION)"
"XRM=XR0*SQRT(T*B/(T0*BMIN))/(E*BETA) "
"  WHERE B IS EVALUATED FOR DISTANCE T, AND T0 IS THE"
"  DISTANCE THAT WOULD GIVE B=BMIN. T0 IS A FUNCTION OF BETA, AND"
"  IS GIVEN BY THE EXPRESSION  "
"T0=TEFF0*BETA**2;  THIS IS ALSO THE DEFINING RELATION FOR TEFF0"
"BMIN IS THE MINIMUM VALUE OF B FOR WHICH MOLIERE CONSIDERED HIS THEORY"
"VALID.  WE CURRENTLY GIVE BMIN A VALUE OF 4.5."
"OMEGA0=BLCC*T/BETA**2  IS THE USEAGE OF BLCC"
"XRV= XCC*SQRT( T*BLC )/(E*BETA**2) IS THE USAGE OF XCC"

"WE NOW PROCEED TO SOLVE FOR THE ABOVE QUANTITIES."
"COMPARING THE TWO EXPRESSIONS FOR OMEGA0, WE CONCLUDE THAT:"

BLCC= A6680*RHO*ZS*EXP(ZE/ZS)*RLC / (WM*EXP(ZX/ZS)) ;
"NOW USING THE EXPRESSION FOR OMEGA0 AT B=BMIN,WE HAVE"
" OMEGA0=EXP(BLCMIN)"
"       =EXP(BMIN)/BMIN"
"       =BLCC*T0/BETA**2"
"       =BLCC*TEFF0    ,     THEREFORE"

TEFF0 = ( EXP(BMIN)/BMIN )/BLCC;

"COMPARING THE TWO EXPRESSION FOR XRV WE CONCLUDE THAT"
"XC= XCC * SQRT(T) /(E*BETA**2)"
"COMPARING THIS WITH OUR PREVIOUS EXPRESSION FOR XC, WE OBTAIN"

XCC= (A22P9/RADDEG) * SQRT( ZS*RHO*RLC/WM );

"NOW COMPARING THE TWO EXPRESSIONS FOR XRM WE OBTAIN"
"XRM=XC*SQRT(B)       USING DEFINITION OF XRM"
"   =(XCC*SQRT(T)/(E*BETA**2)) *SQRT(B)  AFTER SUBSTITUTING FOR XC"
"   =XR0*SQRT((T*B)/(T0*BMIN))/(E*BETA)  USING EXPRESSION DEFINING XR0"
"   =XR0*SQRT((T*B)/(TEFF0*BETA**2*BMIN))/(E*BETA)  EXPANDING T0"
" THUS AFTER SOME CANCELLATION AND SOLVING FOR XR0 WE OBTAIN"

XR0 = XCC*SQRT(TEFF0*BMIN);

"THIS COMPLETE THE MS CALCULATIONS"
OUTPUT BLCC,XCC,TEFF0,XR0;('0BLCC,XCC,TEFF0,XR0=',1P,4E14.5);

RETURN;
END; "END OF SUBROUTINE MIX"


%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE MOLIER;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;

"COMPUTE MATERIAL INDEPENDENT MOLIERE DATA                         "

COMIN/MIMSD/;

" IK: Variable declarations for implicit none"
$INTEGER I,IS,J,L,JLR,ITOT,IDIF,N,I01,I02,ISWP,IFLG,IDA,INC,II,ISU,ISL,
         IUECHO,IPUN,MST;
$REAL    BLCMIN,BLC,B,BOLD,B1,PTOT,PPP,PP;
$REAL P(29,$MSSTEPS),Q(29,$MSSTEPS),BLCA($MSSTEPS),BA($MSSTEPS);
$INTEGER IP1(29,$MSSTEPS),IP2(29),IXTR(29,$MSSTEPS),IALL(29);
"     DATA FROM BETHE'S TABLE                                          "
$REAL TH(29),DTH(29),F0(29),F1(29),F2(29);
DATA TH/.05,.2,.4,.6,.8,1.,1.2,1.4,1.6,1.8,2.,2.2,2.4,2.6,2.8,
 3.,3.2,3.4,3.6,3.8,4.07,4.5,5.,5.5,6.13,7.,8.,9.,9.75/;
DATA DTH/.1,19*0.2,0.35,3*0.5,0.75,3*1.0,0.5/;
DATA F0/2.,1.9216,1.7214,1.4094,1.0546,.7338,.4738,.2817
 ,.1546,.0783,.0366,.01581,.0063,.00232,7.9E-4,2.5E-4,7.3E-5,
 1.9E-5,4.7E-6,1.1E-6,2.3E-7,3.E-9,2.E-11,2.E-13,5.E-16,1.E-21,
 3.E-28,1.E-35,$F0(29)/;
DATA F1/.8456,.7038,.3437,-0.0777,-0.3981,-0.5285,-0.4770,
 -.3183,-.1396,-.0006,+0.0782,.1054,.1008,.08262,.06247,.0455,
 .03288,.02402,.01791,.01366,.010638,.00614,.003831,.002527,
 .001739,.000908,.0005211,.0003208,.0002084/;
DATA F2/2.4929,2.0694,1.0488,-.0044,-.6068,-.6359,-.3086,.0525
 ,.2423,.2386,.1316,.0196,-.0467,-.0649,-.0546,-.03568,-.01923,
 -.00847,-.00264,5.E-5,.0010741,.0012294,.0008326,.0005368,
 .0003495,.0001584,7.83E-5,4.17E-5,2.37E-5/;
save TH,DTH,F0,F1,F2;

"***THE PURPOSE OF THIS ROUTINE IS TO CALCULATE THE DISTRIBUTION OF  "
"   THE MOLIERE REDUCED ANGLES FOR USE IN MULTIPLE SCATTERING        "
"   THIS IS DONE FOR A SET OF $MSSTEPS STEPSIZES.  EACH STEPSIZE IS A"
"   FIXED MULTIPLE OF T0,THE STEP SIZE WHICH GIVES MOLIERE'S UPPER CASE"
"   B VARIABLE, B, ITS MINIMUM VALID VALUE BMIN.  BLC IS MOLIERE'S"
"   LOWER CASE B, WHICH THEN ALSO HAS A MINIMUM VALUE BLCMIN, WHICH IS"
"   RELATED TO BMIN BY THE TRANSCENDENTAL EQUATION LINKING B AND BLC,"
"   I.E., BLC=B-ALOG(B);  AND BLCMIN=BMIN-ALOG(BMIN);"
"   NOW BLC IS RELATED TO THE TRANSPORT DISTANCE THROUGH THE EQUATION"
"   EXP(BLC) = BLCC * T/BETA**2;  (SEE NOTES IN SUBROUTINE MIX)"
"   THUS IF WE DEFINE AN EFFECTIVE DISTANCE "
"   TEFF=T/BETA**2;  AND ALSO  TEFF0=T0/BETA**2;"
"   THEN THE ENERGY DEPENDENCE IF REMOVED FROM THE EQUATION,AND WE HAVE"
"   EXP(BLC)=BLCC*TEFF;    FOR THE MINIMAL CONDITION THIS BECOMES"
"   EXP(BLCMIN)=BLCC*TEFF0;"
"   NOW SUPPOSE WE HAVE A TRANSPORT DISTANCE T WHOSE RATIO TO T0 IS"
"   R = T/T0 = TEFF/TEFF0;     WE THEN HAVE"
"   EXP(BLC)=BLCC*TEFF=BLCC*TEFF0*(TEFF/TEFF0)"
"          =(BLCC*TEFF0)*R"
"          = EXP(BLCMIN)*R;     HENCE WE OBTAIN"
"   BLC = BLCMIN + ALOG(R); "
"   AND THE CORESPONDING VALUE OF B CAN BE DETERMINED BY SOLVING THE"
"   TRANSCENDENTAL EQUATION."
"   IN WHAT FOLLOWS, FSTEP(IS) CONTAINS THE RATIO OF THE SIZE OF THE"
"   IS THE STEPSIZE TO T0.  ITS VALUES ARE ALL INTEGERS.  WHEN USED BY"
"   EGS THE RATIO R OF THE DESIRED STEP SIZE TO T0 IS COMPUTED,AND THEN"
"   IT IS DESIRED TO FIND THE LARGEST FIXED STEP SIZE THAT IS LESS THAN"
"   R*T0.  TO FACILITATE THIS, WE DEFINE AN ARRAY MSMAP, OF SIZE"
"   $MXJREFF,SUCH THAT MSMAP(JR) IS THE INDEX OF THE LARGEST FIXED STEP"
"   LESS THAN OR EQUAL TO JR.  THUS IN EGS THE SELECTION OF A STEP IS:"
"   R=T/T0; JR=R; IS=MSMAP(JR) ; T=FSTEP(IS)*T0; "
"   IN ADDITION IT IS REQUIRED TO KNOW THE RATIO OF MOLIERE REDUCING"
"   ANGLE XRM=XC*SQRT(B) TO ITS MINIMUM VALUE XRMMIN=XCMIN*SQRT(BMIN);"
"   SINCE AT FIXED ENERGY XC IS PROPORTIONAL TO T, THIS RATIO IS"
"   FSQR(IS)= R*SQRT(B/BMIN);  THEN"
"   XRM=FSQR*XRMMIN=FSQR*XCMIN*SQRT(BMIN)"
"    =FSQR* (XCC*SQRT(T0)/(E*BETA**2)) * SQRT(BMIN) "
"    =FSQR* (XCC*SQRT(TEFF0*BETA**2)/(E*BETA**2)) *SQRT(BMIN) "
"    = (XCC*SQRT(TEFF0*BMIN)) * FSQR / (E*BETA) "
"    = XR0 * FSQR / (E*BETA)"
"   THIS LAST LINE IS THE FORM USED BY EGS.  XR0 CONTAINS THE MATERIAL"
"   DEPENDENCE, FSQR THE STEP DEPENDENCE, AND 1/(E*BETA)"
"   THE ENERGY DEPENDENCE."
"   IN THE CASE WHEN R.LT.1., THE PROPOSED TRANSPORT DISTANCE IS"
"   THAN THE SMALLEST VALID MOLIERE TRANSPORT DISTANCE, AND STRICTLY"
"   SPEAKING MOLIERE'S THEORY IS NO LONGER APPLICABLE.  SINCE IN MOST"
"   THE SCATTERING OVER THIS SHORT DISTANCE WILL NOT BE TOO SIGIFICANT,"
"   WE CURRENTLY USE THE REDUCED ANGLE DISTRIBUTION FOR T0 IN THIS"
"   CASE, AND LET FSQR=SQRT(R), I.E. IGNORE CHANGE IN B FROM BMIN."

OUTPUT (TH(I),DTH(I),F0(I),F1(I),F2(I),I=1,29);
('1BETHE TABLE USED FOR INPUT'/(1X,0P,2F10.2,1P,3E18.5));

"***NOW FILL UP MSMAP."
FOR IS=1 TO MSTEPS-1 [
FOR J=FSTEP(IS) TO FSTEP(IS+1)-1 [MSMAP(J)=IS;]]
MSMAP(JRMAX)=MSTEPS;

BLCMIN = BMIN - ALOG(BMIN);

:STEP: DO IS=1,MSTEPS [ "LOOP OVER STEP SIZES"
BLC=BLCMIN+ALOG(FSTEP(IS));
"***NOW SOLVE FOR B"
B=BLC+ALOG(BLC); "THIS IS FIRST GUESS"
LOOP["UNTIL NEWTON'S METHOD CONVERGES"
BOLD=B;
B=BOLD - (BOLD-ALOG(BOLD)-BLC)/(1.0-1.0/BOLD);]
UNTIL ABS((B-BOLD)/BOLD) .LT. 1.E-5 ;
BLCA(IS)=BLC; BA(IS)=B; "SAVE BLC AND B FOR PRINTOUT"
FSQR(IS)=SQRT(FSTEP(IS)*B/BMIN); "GET XRM RATIO"
"***CALCULATE PROBABILITIES OF INPUT REDUCED ANGLES                  "
B1=1.0/B;
PTOT=0.0;
DO I=1,29 [
P(I,IS)=TH(I)*DTH(I)*(F0(I)+B1*(F1(I)+B1*F2(I)));
"***THESE ANGLES CORRESPOND TO THE PROBABILITY ENTRIES               "
PTOT=PTOT+P(I,IS);]
DO I=1,29 [P(I,IS)=P(I,IS)/PTOT;] "NORMALIZE"
"***MAKE ALL PROBABILITIES EITHER 0.0 OR GREATER THAN 0.001 IN THE   "
"   MANNER NAGEL SUGGESTS.  NOTE THE PROBABILITY IS LUMPED INTO      "
"   THE ENTRY FOR THE LARGEST REDUCED ANGLE WHEN INTERVALS ARE MERGED"
DO I=1,29 [Q(I,IS)=P(I,IS);] "DON'T CHANGE EXACT PROBABILITIES"
I=29;
LOOP[ L=1;
WHILE (Q(I,IS).LT.0.001).AND.(I.GT.L) [
Q(I,IS)=Q(I,IS)+Q(I-L,IS); Q(I-L,IS)=0.0; L=L+1; ]
I=I-L;]
UNTIL I.LE.0 ;
"***NOW TRY TO MAKE UP 1000 INTEGRAL PROBABILITIES FOR VERT TABLES"
PPP=0.5; PP=0.5; "INITIALIZE ROUNDING PARAMETERS"
DO JLR=1,10 [ "TRY FUDGING ROUNDING DOWN TO 2**-10"
ITOT=0; "INITIALIZE TOTAL"
DO I=1,29 [ "ROUND PROBABILITIES FOR THIS ANGLE"
IP1(I,IS)=Q(I,IS)*1000.0+PP; ITOT=ITOT+IP1(I,IS); ]
IDIF=ITOT-1000;
IF (IDIF.EQ.0)NEXT :STEP:;
PPP=PPP*0.5;
IF (IDIF.LT.0)[PP=PP+PPP;]ELSE[PP=PP-PPP;]
] "END OF ROUNDING-FUDGING LOOP"
"***GET 1000 ENTRIES WHEN ROUNDING ADJUSTMENT FAILS.  WE ADD OR      "
"   SUBTRACT ONE FROM AS MANY OF THE LARGEST PROBABILITIES AS NEEDED "
"   BUBBLE SORT THE PROBABILITIES TO RANK THEM BY SIZE               "
DO I=1,29 [IP2(I)=1;]
N=29;
LOOP[ N=N-1; IFLG=0; "PREPARE FOR ONE PASS THOUGH BUBBLE SORT"
DO J=1,N [
I01=IP2(J);I02=IP2(J+1);IF (IP1(I01,IS).LT.IP1(I02,IS))["MUST SWAP"
ISWP=IP2(J);IP2(J)=IP2(J+1); IP2(J+1)=ISWP; IFLG=1;"SWAP&SET FLAG"]
] "END OF PASS"
]UNTIL IFLG.EQ.0 ;"LOOP UNTIL PASS HAS NO SWAPS"
OUTPUT ITOT;
(' ROUNDING FAILED, ITOT HAS',I6,' ENTRIES');
IF (IDIF.LT.0)[IDA=-IDIF;INC=1;]ELSE[IDA=IDIF;INC=-1;]
DO I=1,IDA [ I01=IP2(I); IP1(I01,IS)=IP1(I01,IS)+INC; ]
] "END OF :STEP: SIZE DO LOOP"

"***NOW FIND MINIMUM FREQUENCY FOR EACH ANGLE OVER ALL STEPS"
MXV1=0;"MXV1 WILL BE SUM OF MINIMUMS"
DO I=1,29 [ IALL(I)=IP1(I,1);
DO IS=2,MSTEPS [IALL(I)=MIN0(IALL(I),IP1(I,IS));]
MXV1=MXV1+IALL(I);"ADD IN MINIMUM FREQUENCY FOR THIS ANGLE"
] "END LOOP OVER ANGLES"
MXV2=1000-MXV1;"THE VERT2 ARRAY HAS THE LEFT-OVERS"
"***&&&&&&&&&&LATER ONLY PUT IALL,IXTR TO EGS"
"   AND LET EGS FILL IN VERT1 AND VERT2. THIS REQUIRES LESS STORAGE"
"***NOW FILL UP THE VERT ARRAYS."
II=0;
DO I=1,29 [ FOR J=1 TO IALL(I) [II=II+1;VERT1(II)=TH(I);] ]
"***NOW DO VERT2"
DO IS=1,MSTEPS [
II=0;
DO I=1,29 [
IXTR(I,IS)=IP1(I,IS)-IALL(I);"GET NUMBER OF EXTRAS"
FOR J=1 TO IXTR(I,IS) [ II=II+1;VERT2(II,IS)=TH(I);]
] "END ANGLE DO LOOP"
] "END STEP DO LOOP"
"***WE HAVE NOW COMPUTED EVERYTHING THE USER NEEDS, SO NOW LIST IT OUT"
OUTPUT BMIN,MSTEPS,JRMAX,MXV1,MXV2;(' BMIN,MSTEPS,JRMAX,MXV1,MXV2=',
F11.5,4I8);
ISU=0; "STARTING UPPER STEP LIMIT"
LOOP[ "TAKE AS MANY STEPS AS WILL FIT ON A PAGE"
ISL=ISU+1; ISU=MIN0(ISL+9,MSTEPS); "GET LOWER &UPPER STEPS LIMITS"
OUTPUT ISL,ISU;('1 DATA FOR STEPS ',I3,' TO ',I3);
OUTPUT (IS,IS=ISL,ISU);(11X,'ISTEP',I6,9I11);
OUTPUT (FSTEP(IS),IS=ISL,ISU);(11X,'FSTEP',10F11.0);
OUTPUT (FSQR(IS),IS=ISL,ISU);(11X,'FSQR ',10F11.5);
OUTPUT (BLCA(IS),IS=ISL,ISU);(11X,'BLC  ',10F11.5);
OUTPUT (BA  (IS),IS=ISL,ISU);(11X,'B    ',10F11.5);
OUTPUT ;('0I  TH IALL');
DO I=1,29 [
IF ((I.EQ.11).OR.(I.EQ.23))[OUTPUT ;('1I  TH IALL');]
OUTPUT I,TH(I),IALL(I),(P(I,IS),IS=ISL,ISU);
(1X,I2,F5.2,I4,' PR ',10F11.8);
OUTPUT(Q(I,IS),IS=ISL,ISU);(11X,'  Q  ',10F11.8);
OUTPUT (IP1(I,IS),IS=ISL,ISU);(11X,' IP1 ',I7,9I11);
OUTPUT (IXTR(I,IS),IS=ISL,ISU);(11X,'EXTRA',I7,9I11);  ]
]UNTIL ISU.GE.MSTEPS;
"***NOW PUNCH OUT DATA NEEDED BY EGS"
:INTG:FORMAT(1X,14I5);
:FLTNG:FORMAT(1X,14F5.2);
IUECHO=6; IPUN=7;
"***FIRST MUST PUT OUT THE HEADER FOR WHICH SETUP SEARCHES."
$ECHOWRITE(IPUN,:FMTA:) ;
:FMTA: FORMAT(' MATERIAL INDEPENDENT MULTIPLE SCATTERING DATA');
$ECHOWRITE(IPUN,:INTG:) JRMAX,MSTEPS,MXV1,MXV2;
$ECHOWRITE(IPUN,:FMTB:) (FSTEP(I),FSQR(I),I=1,MSTEPS);
:FMTB: FORMAT((1X,4(F5.0,F11.6)));
$ECHOWRITE(IPUN,:INTG:) (MSMAP(I),I=1,JRMAX);
$ECHOWRITE(IPUN,:FLTNG:) (VERT1(I),I=1,MXV1);
DO MST=1,MSTEPS [ $UOUTPUT(IUECHO)MST;(' MST=',I5);
$ECHOWRITE(IPUN,:FLTNG:) (VERT2(I,MST),I=1,MXV2);]"END MST DO"
"***THIS COMPLETES THE OUTPUT OF MATERIAL INDEPENDENT MULTIPLE"
"   SCATTERING DATA"
RETURN;
END; "END OF SUBROUTINE MOLIER"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE PLOT(IFUN,XP,IV,EL,EH,NPT,IDF);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;

$INTEGER ifun,IV,NPT,IDF;
$REAL    EL,EH;

"This version of PLOT played with at NRC  NOV 1988                 "
"                                                                  "
" This version does not work in the general case, but for stopping "
" powers it converts the output to MeV / g /cm**3                  "
" and outputs the results for a given energy grid to unit ??       "
"                                                                  "
" The original version is also in the code. The version called     "
" PLOT will be the active one, that called PLOT1 is available to   "
" be renamed.                                                      "
"                                                                  "
"                                                                  "
"***ROUTINE TO PLOT FUNCTION NUMBER IFUN. IF NA IS NUMBER OF ARGUMENTS"
"   THAT IFUN TAKES, THEN (XP(I),I=1,NA) ARE VALUES FOR THE ARGUMENTS"
"   EXCEPT THAT THE IV'TH ARGUMENT IS VARIED FROM EL TO EH "
"   DISTRIBUTED UNIFORMLY WITH RESPECT TO DISTRIBUTION FUNCT. NO. IDF."
"   IDF+1 IS THE NUMBER OF THE INVERSE DISTRIBUTION FUNCTION."
"   NOPTNS IS INCLUDED FOR FUTURE EXPANSION."
;
COMIN/FUNCS,MOLVAR,DERCON,EPSTAR/; "NRC MOD NOV 1988"
;COMIN/FileNames/;

" IK: Variable declarations for implicit none"
$INTEGER IXTABF,NMAX,NUPL,ITAB,IXT1,IXT2,NU,IDFI,NA,IP,JA,IA,IBIN,J,I;
$REAL    DFL,DFH,BDF,YMAX,X,DY;
" IK: Function declarations for implicit none"
$REAL    FI;

$TYPE PBUF(101),ID(5),ORDNL(3,4),ICOM,IRPAR,ICOL,IX,IBL;
$REAL XTAB(200),XTABA(18),YSAV(200),XP(4),XQ(5); "NRC MOD NOV 1988"
logical first_time;
DATA XTABA /1. ,1.25 ,1.5 ,1.75 ,2. ,2.5 ,3. ,3.5
        ,4. ,4.5,4.9488  ,5.  ,5.5  ,6. ,7.  ,8. ,9. ,10./;
DATA IXTABF/0/; "First call sets X table and flag"
DATA ICOM/','/,IRPAR/')'/,ICOL/':'/,ORDNL/$S'1ST2ND3RD4TH'/;
DATA PBUF/'I',100*' '/,NMAX/200/,NUPL/6/,IX/'X'/,IBL/' '/;
DATA first_time/.true./;
save XTABA,IXTABF,ICOM,IRPAR,ICOL,ORDNL,PBUF,NMAX,NUPL,IX,IBL,
     first_time;

IF( first_time ) [
    first_time = .false.;
    output_file(lenfn-7:lenfn) = 'plot    ';
    open(21,file=output_file,status='unknown');"
]

IF (IXTABF.EQ.0) [ "set up kinetic energy grid"
    ITAB= 0;
    DO IXT1=0,6["LOOP OVER DECADES"
        DO IXT2 = 1,17[
        IF(IXT2.NE.11)["WE ONLY WANT 49.488 MEV"
           ITAB=ITAB+ 1;XTAB(ITAB)=XTABA(IXT2)*10.**(IXT1-3);]
        ELSEIF(IXT2.EQ.11 .AND. IXT1.EQ.4)["WE ONLY WANT 49.488 MEV"
           ITAB=ITAB+ 1;XTAB(ITAB)=XTABA(IXT2)*10.**(IXT1-3);]
        ]
    ]
    "GET THE LAST ELEMENT"ITAB=ITAB+1;XTAB(ITAB)=XTABA(18)*10.**(6-3);
    IXTABF=1;NU=ITAB ] "energy grid done"
IDFI=IDF+1;  NA=NFARG(IFUN); "NUMBER OF ARGS"
DFL=FI(IDF,EL,0.,0.,0.);DFH=FI(IDF,EH,0.,0.,0.);
BDF=(DFH-DFL)/FLOAT(NU-1); YMAX=0.0;
DO IP=1,NU [
X=XTAB(IP)+RM;XP(IV)=X; "SELECT AND SET UP VARIABLE ARG."
YSAV(IP)=FI(IFUN,XP(1),XP(2),XP(3),XP(4))/(RLC*RHO);
"NRC MOD NOV 1988 TO OUTPUT MEV PER G/CM**2 FOR STOPPING POWERS"
"THIS WILL SCREW UP OTHER CROSS SECTIONS!!!! "
YMAX=AMAX1(YSAV(IP),YMAX); ]
DY=YMAX/100.;
"***NOW CONSTRUCT THE CAPTION"
JA=0; DO IA=1,NA [ JA=JA+1;
IF (IA.NE.IV)[XQ(JA)=XP(IA); ID(JA)=ICOM; ]
ELSE[ XQ(JA)=EL;ID(JA)=ICOL; JA=JA+1; XQ(JA)=EH;ID(JA)=ICOM; ]  ]
ID(JA)=IRPAR; "CLOSE WITH RIGHT PAREN"
$UOUTPUT(NUPL)(FNAME(I,IFUN),I=1,6),(XQ(I),ID(I),I=1,JA);
('1PLOT OF FUNCTION ',6A1,'(',5(1P,G15.6,1X,A1) );
$UOUTPUT(NUPL)(ORDNL(I,IV),I=1,3),NU,EL,EH,
(FNAME(I,IDF),I=1,6),(FNAME(I,IDFI),I=1,6),DY;
(' THE ',3A1,' ARGUMENT IS CHOSEN AT ',I4, ' POINTS FROM ',1P,G15.6,
' TO ', 1P,G15.6/' USING DISTRIBUTION FUNCTION ',6A1,' AND INVERSE ',
'DISTRIBUTION FUNCTION ',6A1,'.  EACH X=',1P,G15.6/
'0    X(OR E)    Y1');
$UOUTPUT(NUPL) RLC,RHO;
(/' ***CHANGED VERSION OF PEGS WHICH HAS DIVIDED THE VALUES BY',
' RLC*RHO TO GET TO MeV/g/cm**2'/'  RLC=',E12.4,'  RHO=',E12.4);

"***NOW PLOT DATA"
"list with KINETIC energy"
DO IP=1,NU [
X=XTAB(IP);
IF (DY.NE.0.0)[IBIN=YSAV(IP)/DY+1.0;]ELSE[IBIN=1;]
IF (IBIN.GE.2)PBUF(IBIN)=IX;
$UOUTPUT(NUPL) IP,X,YSAV(IP),(PBUF(J),J=1,IBIN);
(1X,I3,1P,2G13.6,1X,101A1);
IF (IBIN.GE.2)PBUF(IBIN)=IBL;]
WRITE(21,*) NU; WRITE(21,:PLTFMT:) (XTAB(IP),IP=1,NU);
WRITE(21,*) NU; WRITE(21,:PLTFMT:) (YSAV(IP),IP=1,NU);
:PLTFMT: FORMAT(5(1P,E15.7));
RETURN;
END;  "END OF SUBROUTINE PLOT1"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE PLOT1(IFUN,XP,IV,EL,EH,NPT,IDF);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***ROUTINE TO PLOT FUNCTION NUMBER IFUN. IF NA IS NUMBER OF ARGUMENTS"
"   THAT IFUN TAKES, THEN (XP(I),I=1,NA) ARE VALUES FOR THE ARGUMENTS"
"   EXCEPT THAT THE IV'TH ARGUMENT IS VARIED FROM EL TO EH "
"   DISTRIBUTED UNIFORMLY WITH RESPECT TO DISTRIBUTION FUNCT. NO. IDF."
"   IDF+1 IS THE NUMBER OF THE INVERSE DISTRIBUTION FUNCTION."
"   NOPTNS IS INCLUDED FOR FUTURE EXPANSION."
;
implicit none;

$INTEGER IFUN,IV,NPT,IDF;
$REAL    EL,EH;
COMIN/FUNCS/;
$TYPE PBUF(101),ID(5),ORDNL(3,4),ICOM,IRPAR,ICOL,IX,IBL;
$REAL YSAV(200),XP(4),XQ(5);
$INTEGER NMAX,NUPL,NU,IDFI,NA,IP,I,JA,IA,IBIN,J;
$REAL    DFL,FI,DFH,BDF,YMAX,DF,X,DY;
DATA ICOM/','/,IRPAR/')'/,ICOL/':'/,ORDNL/$S'1ST2ND3RD4TH'/;
DATA PBUF/'I',100*' '/,NMAX/200/,NUPL/6/,IX/'X'/,IBL/' '/;
NU=MIN0(NPT,NMAX);
IDFI=IDF+1;  NA=NFARG(IFUN); "NUMBER OF ARGS"
DFL=FI(IDF,EL,0.,0.,0.);DFH=FI(IDF,EH,0.,0.,0.);
BDF=(DFH-DFL)/FLOAT(NU-1); YMAX=0.0;
DO IP=1,NU [I=IP-1;DF=DFL+BDF*FLOAT(I);
X=FI(IDFI,DF,0.,0.,0.);  XP(IV)=X; "SELECT AND SET UP VARIABLE ARG."
YSAV(IP)=FI(IFUN,XP(1),XP(2),XP(3),XP(4));
YMAX=AMAX1(YSAV(IP),YMAX); ]
DY=YMAX/100.;
"***NOW CONSTRUCT THE CAPTION"
JA=0; DO IA=1,NA [ JA=JA+1;
IF (IA.NE.IV)[XQ(JA)=XP(IA); ID(JA)=ICOM; ]
ELSE[ XQ(JA)=EL;ID(JA)=ICOL; JA=JA+1; XQ(JA)=EH;ID(JA)=ICOM; ]  ]
ID(JA)=IRPAR; "CLOSE WITH RIGHT PAREN"
$UOUTPUT(NUPL)(FNAME(I,IFUN),I=1,6),(XQ(I),ID(I),I=1,JA);
('1PLOT OF FUNCTION ',6A1,'(',5(1P,G15.6,1X,A1) );
$UOUTPUT(NUPL)(ORDNL(I,IV),I=1,3),NU,EL,EH,
(FNAME(I,IDF),I=1,6),(FNAME(I,IDFI),I=1,6),DY;
(' THE ',3A1,' ARGUMENT IS CHOSEN AT ',I4, ' POINTS FROM ',1P,G15.6,
' TO ', 1P,G15.6/' USING DISTRIBUTION FUNCTION ',6A1,' AND INVERSE ',
'DISTRIBUTION FUNCTION ',6A1,'.  EACH X=',1P,G15.6/
'0    X(OR E)    Y1');
"***NOW PLOT DATA"
DO IP=1,NU [
I=IP-1;X=FI(IDFI,DFL+BDF*FLOAT(I),0.,0.,0.);
IF (DY.NE.0.0)[IBIN=YSAV(IP)/DY+1.0;]ELSE[IBIN=1;]
IF (IBIN.GE.2)PBUF(IBIN)=IX;
$UOUTPUT(NUPL) IP,X,YSAV(IP),(PBUF(J),J=1,IBIN);
(1X,I3,1P,2G13.6,1X,101A1);
IF (IBIN.GE.2)PBUF(IBIN)=IBL;  ]
RETURN;
END;  "END OF SUBROUTINE PLOT"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE PMDCON;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***SUBROUTINE TO ARRIVE AT PHYSICAL, MATHEMATICAL, AND DERIVED"
"   CONSTANTS IN A VERY MNEMONIC WAY.                                  "
;
implicit none;
$REAL FSCI;
COMIN/PMCONS,DERCON/;
"***PHYSICAL AND MATHEMATICAL CONSTANTS                                "
"     PI       CIRCUMFERANCE/DIAMETER.                                 "
"     C        SPEED OF LIGHT(CM/SEC)                                  "
"     RME      ELECTRON REST MASS(GRAMS)                               "
"     HBAR     PLANCK'S CONSTANT/(2*PI)  (ERG SEC)                     "
"     ECGS     ELECTRON CHARGE (ESU)                                   "
"     EMKS     ELECTRON CHARGE (COULOMB)                               "
"     AN       AVOGADRO'S NUMBER                                       "
PI=3.1415926536;
C=2.997925E+10;
RME=9.1091E-28;
HBAR=1.05450E-27;
ECGS=4.80298E-10;
EMKS=1.60210E-19;
AN=6.02252E+23;
"***DERIVED CONSTANTS                                                  "
"     RADDEG   ONE RADIAN IN DEGREES                                   "
"     FSC      FINE STRUCTURE CONSTANT                                 "
"     ERGMEV   ONE MILLION ELECTRON VOLTS EXPRESSED IN ERGS            "
"     R0       CLASSICAL ELECTRON RADIUS                               "
"     RM       ELECTRON REST ENERGY IN MEV                             "
RADDEG=180./PI;
FSC = ECGS**2/(HBAR*C);
FSCI=1./FSC;
"     1.E+7 IS THE NUMBER OF ERGS PER JOULE                            "
ERGMEV = (1.E+6)*(EMKS*1.E+7);
R0 = (ECGS**2)/(RME*C**2);
RM = RME*C**2/ERGMEV;
RMT2 = RM*2.0;
RMSQ = RM*RM;
"OUTPUT;(' DERIVED CONSTANTS--RADDEG,FSC,FSCI,ERGMEV,R0,RM,RMT2,RMSQ"
" ');"
"OUTPUT RADDEG,FSC,FSCI,ERGMEV,R0,RM,RMT2,RMSQ;(1P,8E14.6);"
"     CALCULATION OF SOME CONSTANTS - -                                "
"     NAGEL HAD THE ANGLE 22.9 DEGREES IN HIS EXPRESSION FOR THE       "
"     CHARACTERISTIC ANGLE,CHIC.  BELOW IS THE ORIGINATING EXPRESSION. "
A22P9 = RADDEG*SQRT(4.*PI*AN)*ECGS**2/ERGMEV;
"     IN ADDITION NAGEL USES THE NUMBER 6680 IN HIS EXPRESSION FOR     "
"     EXP(B) AS OBTAINED BY BETHE(1953),PG 1259,EQN.229  ITS ORIGINATIN"
"     EXPRESSION IS--                                                  "
A6680 = 4.0*PI*AN*(HBAR/(RME*C))**2*(0.885**2/(1.167*1.13));
"OUTPUT A22P9,A6680;(' A22P9=',F15.6,',A6680 = ',F15.4);"
RETURN;
END; "END OF SUBROUTINE PMDCON"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE PWLF1(NI,NIMX,XL,XU,XR,EP,ZTHR,ZEP,NIP,XFUN,XFI,
                 AX,BX,NALM,NFUN,AF,BF,VFUNS);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***PWLF1 IS A ROUTINE WHICH WILL FIT UP TO 10(CURRENTLY) FUNCTIONS  "
"   SIMULTANEOUSLY ON AN INTERVAL (XL,XU) OF THE INDEPENDENT VARIABLE"
"   X OF THE FUNCTIONS. THE FIT IS A PIECEWISE LINEAR FUNCTION OF    "
"   XFUN(X).  XFI IS THE INVERSE FUNCTION OF XFUN.  THE SUBINTERVALS "
"   ARE CHOSEN OF UNIFORM WIDTH IN XFUN(X) AND SUFFICIENT OF THEM    "
"   ARE CHOSEN SO THAT THE FIT GIVES A RELATIVE ERROR[EP FOR ALL     "
"   THE FUNCTIONS OVER ALL THE SUBINTERVALS.                         "
"   QFIT IS AN AUXILIARY FUNCTION.       "
"   EXPLANATION OF THE ARGUMENTS:                                    "
"   NI   ON RETURN IS NUMBER OF SUBINTERVALS USED FOR THE FIT.       "
"   XL   LOWER LIMIT OF INTERVAL ON WHICH TO FIT THE FUNCTIONS.      "
"   XU   UPPER LIMIT                                                 "
"   XR   VALUE OF X WHICH WILL BE FORCED TO BE A SUBINTERVAL BOUNDARY"
"        THE SIGNIFICANCE OF THIS IS THAT THE STRAIGHT LINES ON THE  "
"        SUBINTERVALS ARE CHOSEN TO FIT EXACTLY AT THE SUBINTERVAL   "
"        BOUNDARIES, THUS IF ONE WANTS AN EXACT FIT OF THE FUNCTIONS "
"        AT A PARTICULAR POINT, XR SHOULD BE SET TO THAT VALUE.      "
"        OTHERWISE XR SHOULD BE SET TO XH.  ANOTHER REQUIREMENT      "
"        IS THAT XU SHOULD BE LARGER THAN XL.                        "
"   EP   THE MAXIMUM RELATIVE ERROR ALLOWED THE FIT.                 "
"   NIP  THE MINUIMUM NUMBER OF POINTS INTERIOR TO (XL,XU) AT WHICH  "
"        THE FIT IS TO BE TESTED FOR RELATIVE ERROR VS. EP.          "
"   XFUN A FUNCTION OF X OVER WHICH IT IS HOPED THE FUNCTIONS TO BE  "
"        FIT ARE MORE LINEAR THAN OVER X.  XFUN IS EXPECTED TO BE    "
"        MONOTONICALLY INCREASING IN X.                              "
"   XFI  THE INVERSE OF XFUN. THAT IS XFI(XFUN(X))=X.                "
"   AX,BX ARE COEFFICIENTS USED AS SHOWN BELOW TO DETERMINE WHICH    "
"        SUBINTERVAL A VALUE OF X IS IN.                             "
"   AF,BF ARE ARRAYS OF COEFFICIENTS USED TO GET VALUES OF THE FUNCS."
"   THE PROCEDURE FOR FINDING THE FIT VALUE OF FUNCTION IFUN IS:     "
"   INTERV=AX*XFUN(X)+BX                                             "
"   VALUE=AF(INTERV,IFUN)*XFUN(X)+BF(INTERV,IFUN)                    "
"   NALM  IS THE MAXIMUM NUMBER OF SUBINTERVALS FOR WHICH ARRAY SPACE"
"         HAS BEEN ALLOCATED.                                        "
"   NFUN  IS THE NUMBER OF FUNCTIONS TO BE FITTED(SIMULTANEOUSLY,I.E."
"         ALL FUNCTIONS HAVE THE SAME XFUN AND SUBINTERVALS, AND ALL "
"         ARE REQUIRED TO BE FIT WITH MAX REL ERR[EP)                "
"   VFUNS IS A SUBROUTINE TO FILL AN ARRAY WITH THE VALUES OF THE    "
"   FUNCTIONS TO BE FITTED.                                          "
;
implicit none;

$INTEGER NI,NIMX,NIP,NALM,NFUN;
$REAL    XL,XU,XR,EP,AX,BX;
EXTERNAL XFUN,XFI,VFUNS;
$REAL AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN);
"   QFIT IS A LOGICAL FUNCTION WHICH IS TRUE IF THE STATED NUMBER    "
"   OF INTERVALS GIVES A SUFFICIENTLY CLOSE FIT.                     "
LOGICAL QFIT;

" IK: Variable declarations for implicit none"
$INTEGER NL,NU,IPRN,NJ,NK;
$REAL    REM;
"   FIND # OF INTERVALS REQUIRED.                                    "
NL=0;
NU=1;
IPRN=0;
LOOP [NJ=MIN0(NU,NIMX);
IF (QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
 AX,BX,NALM,NFUN,AF,BF,VFUNS,0)) EXIT;
IF (NU.GE.NIMX) [
OUTPUT NIMX,EP;
(' NUMBER OF ALLOCATED INTERVALS(=',I5,') WAS INSUFFICIENT'
       ,/ ,' TO GET MAXIMUM RELATIVE ERROR LESS THAN ',1P,G14.6);
NI=NJ;RETURN;]
NL=NU;
NU=NU*2;]
"   WE NOW HAVE AN UPPER AND LOWER LIMIT ON NI, REFINE IT.           "
NU=NJ ; "SAVE SUCCESSFUL INDEX"
WHILE(NU.GT.NL+1)["LOOP UNTIL CONVERGENCE"
NJ=(NL+NU)/2;
NK=NJ; "THIS IS NECESSARY BECAUSE QFIT MAY LOWER NJ,BUT NEED ORIGINAL"
" FOR SETTING NL OR MAY GET INTO INFINITE LOOP."
IF (QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
AX,BX,NALM,NFUN,AF,BF,VFUNS,0))[NU=NJ;]ELSE[NL=NK;]
]
"     NU IS NOW THE SMALLEST NI WHICH FITS OK.                       "
NI=NU;
IF (NI.EQ.NJ)RETURN;"LAST TEST WAS SUCCESS"
"     CALL IT ONCE MORE TO GET THE FITS.                             "
IF (.NOT.QFIT(NI,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
AX,BX,NALM,NFUN,AF,BF,VFUNS,0)) OUTPUT NI;
(' CATASTROPHE---DOES NOT FIT WHEN IT SHOULD,NI=',I5);
RETURN;
END;  "END OF SUBROUTINE PWLF1"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE RFUNS(E,V);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"*****SUBROUTINE TO COMPUTE RAYLEIGH FUNCTIONS TO BE FIT           "
"     IN A WAY THAT AVOIDS REPETITION.                             "
;
implicit none;
$REAL E,V(1),AINTP;
COMIN/RAYLEI/;
V(1)=AINTP(E,AFFI(1),87,XVAL(1),1,.TRUE.,.TRUE.);
RETURN;
END; "END OF SUBROUTINE RFUNS"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE SPINIT;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;

COMIN/PMCONS,SPCOMM,DERCON,MOLVAR,MIXDAT,ELEMTB,LSPION,EPSTAR,THRESH/;
"                                   MOD NOV 23,1988    =============="

$REAL IMEV;
" IK: Variable declarations for implicit none"
$INTEGER IM,J,IZ,IE,I,ICHECK,IESPEL,IPEGEL;
$REAL    VPLASM,ALIADG,EDENL,ALGASP,EPSTRH,V2930,V2950,V2970,V2990,
         V3050,V3070,V3090,TLRNCE,EPSTWT,V3010,V3030;

TOLN10=2.0*ALOG(10.0);IM=-100;

IF(EPSTFL < 0 | EPSTFL > 1) [EPSTFL = 0;"ERROR ON INPUT, IGNORE"]
"ABOVE IS NRCC MOD DEC 1988"

IF(EPSTFL=0)["DEFAULT TO STANDARD PEGS4 METHODS"

IF(ISSB.NE.0) ["USER HAS SUPPLIED THE NECESSARY SSB-DATA"

"ENSURE USER HAS INPUT ALL REQUIRED PARAMETERS AND CBAR IS >0.0"
IF( AFACT.EQ.0.0  .OR. CBAR.LE.0.0  .OR. SK.EQ.0.0  .OR. X0.EQ.0.0
.OR. X1.EQ.0.0 .OR. IEV.EQ.0.0 )[
"USER MUST INPUT ALL 6 PARAMETERS OR ELSE THERE IS A MISTAKE -SO QUIT"
OUTPUT;(//'0*****USER ERROR -NOT ALL DENSITY EFFECT PARAMTERS INPUT',
'   CODE STOPPED IN SPINIT****'//);  $CALL_EXIT(21);]
IMEV=IEV*1.E-6;  "EV TO MEV"
VPLASM=SQRT(EDEN/PI*R0*C**2);
IM=-1; "USED AS A FLAG BELOW"
]

ELSE ["MATERIAL MUST BE FOUND IN THE SSB TABLE OR THE S-P"
"      GENERAL FORMULA WILL BE USED.  HOWEVER, FIRST CHECK"
"      TO BE SURE THAT USER HAS NOT INCORRECTLY ATTEMPTED"
"      TO OVERRIDE THE SSB-DATA."
IF(ISSB.EQ.0.AND.(AFACT.NE.0.0.OR.CBAR.NE.0.0.OR.SK.NE.0.0.
  OR.X0.NE.0.0.OR.X1.NE.0.0.OR.IEV.NE.0.0)) [OUTPUT ;
(//,' STOPPED IN SPINIT: INCORRECT USER-OVERRIDE OF SSB-DATA');
$CALL_EXIT(21);
]

"CHECK TO SEE IF MATERIAL IS A 'STERNHEIMER-SELTZER-BERGER' (SSB)"
"MATERIAL, FOR WHICH THE DENSITY EFFECT PARAMETERS ARE ALREADY"
"SPECIFIED.  IF IT IS NOT, THEN CALCULATE THEM USING THE GENERAL"
"FORMULA BY STERNHEIMER-PEIERLS (S-P)."

"STERNHEIMER-SELTZER-BERGER (SSB) LOOKUP TABLE SECTION:"
:TRY: DO IM=1,NMED [DO J=1,LMED
[IF (IDSTRN(J).NE.MEDTBL(J,IM)) NEXT :TRY:;]
"CALCULATION FOLLOWS IF A MATCH IS FOUND"
AFACT=STDATA(1,IM); SK=STDATA(2,IM); X0=STDATA(3,IM);
X1=STDATA(4,IM); IEV=STDATA(5,IM); CBAR=STDATA(6,IM);
IMEV=IEV*1.0E-6; "EV TO MEV"
VPLASM=SQRT(EDEN/PI*R0*C**2);
GO TO :SSB-PARAMETERS-DEFINED:;]

"STERNHEIMER-PEIERLS (S-P) GENERAL FORMULA SECTION:"
IM=0;
"DETERMINE THE MEAN EXCITATION ENERGY, IMEV (IN MEV)"
IF (NE.EQ.1) ["ELEMENT"
IZ=Z(1);
IF (IZ.EQ.1.OR.IZ.EQ.7.OR.IZ.EQ.8) ["I.E., DIATOMIC MOLECULE"
OUTPUT ; (' STOPPED IN SUBROUTINE SPINIT BECAUSE THIS',/,
 ' ELEMENT (H, N, OR O) CAN ONLY EXIST AS A DIATOMIC MOLECULE.',/,
 ' REMEDY:  USE COMP OPTION FOR H2, N2, OR O2 WITH NE=2,PZ=1,1'/,
 '          AND, IN THE CASE OF A GAS, DEFINE STERNHEIMER ID',/,
 '          (I.E., IDSTRN) LIKE H2-GAS');
$CALL_EXIT(21);]
IEV=ITBL(IZ);     "EV"
]

ELSE ["COMPOUND/MIXTURE---USE BRAGG ADDITIVITY RULE"
ALIADG=0.0;
DO IE=1,NE [
IZ=Z(IE);
IF (IZ.EQ.1) [IEV=19.2;]   "EV"
ELSEIF (IZ.EQ.6) [IF (GASP.EQ.0.0) [IEV=81.0;] ELSE [IEV=70.0;]]
ELSEIF (IZ.EQ.7) [IEV=82.0;]
ELSEIF (IZ.EQ.8) [IF (GASP.EQ.0.0) [IEV=106.0;] ELSE [IEV=97.0;]]
ELSEIF (IZ.EQ.9) [IEV=112.0;]
ELSEIF (IZ.EQ.17) [IEV=180.0;]
ELSE [IEV=1.13*ITBL(IZ);]
"NRCC comment - above 7 lines reflect table 6 in ref 59 of SLAC-265"
"       Berger and Seltzer's fudge to get better agreement with expt"
ALIADG=ALIADG + PZ(IE)*Z(IE)*ALOG(IEV);
]
ALIADG=ALIADG/ZC;
IEV=EXP(ALIADG);    "EV"
]

IMEV=IEV*1.0E-6;  "EV TO MEV"
"COMPUTE VARIOUS STERNHEIMER CONSTANTS"
IF (GASP.EQ.0.0) [EDENL=EDEN;]
ELSE ["VPLASM MUST BE FOR NTP FOR A GAS, AND EDEN HAS"
"      BEEN DEFINED IN MIX FOR THE ACTUAL PRESSURE"
       EDENL=EDEN/GASP;]
VPLASM = SQRT(EDENL/PI*R0*C**2);
"ABOVE PATCHED JAN 9,1989 TO REFLECT ERROR POINTED OUT BY"
"PROF KAMAE, TOKYO UNIVERSITY, VIA HIDEO HIRAYAMA"

CBAR=1. + 2.*ALOG(IMEV/(HBAR*2*PI*VPLASM/ERGMEV));

IF (NE.EQ.1.AND.IFIX(Z(1)).EQ.2.AND.GASP.NE.0.0)["SPECIAL HE(GAS) CASE"
X0=2.191; X1=3.0; SK=3.297;
]

ELSEIF (NE.EQ.2.AND.IFIX(Z(1)).EQ.1.AND.IFIX(Z(2)).EQ.1) [
IF (GASP.EQ.0.0) ["SPECIAL H2(LIQUID) CASE"
X0=0.425; X1=2.0; SK=5.949;
]
ELSE ["SPECIAL H2(GAS) CASE"
X0=1.837; X1=3.0; SK=4.754;
]
]

ELSE ["REGULAR CASES"
SK=3.0;
IF (GASP.EQ.0.0) ["SOLIDS AND LIQUIDS"
IF (IEV.LT.100.0) [
IF (CBAR.LT.3.681) [X0=0.2; X1=2.0;]
ELSE [X0=0.326*CBAR - 1.0; X1=2.0;]
]
ELSE ["IEV GE 100.0"
IF (CBAR.LT.5.215) [X0=0.2; X1=3.0;]
ELSE [X0=0.326*CBAR - 1.5; X1=3.0;]
]
IF (X0.GE.X1) [OUTPUT X0,X1,CBAR;
(' STOPPED IN SPINIT DUE TO X0.GE.X1 , X0,X1,CBAR=',3G15.5,/
,' IF THIS IS GAS, YOU MUST DEFINE GASP(ATM)'); $CALL_EXIT(21);]
]
ELSE ["GASES---AT NTP AT THIS STAGE"
IF (CBAR.LT.10.0) [X0=1.6; X1=4.0;]
ELSEIF (CBAR.LT.10.5) [X0=1.7; X1=4.0;]
ELSEIF (CBAR.LT.11.0) [X0=1.8; X1=4.0;]
ELSEIF (CBAR.LT.11.5) [X0=1.9; X1=4.0;]
ELSEIF (CBAR.LT.12.25) [X0=2.0; X1=4.0;]
ELSEIF (CBAR.LT.13.804) [X0=2.0; X1=5.0;]
ELSE [X0=0.326*CBAR - 2.5; X1=5.0;]
]
]  "END OF STERNHEIMER-PEIERLS (S-P) GENERAL FORMULA SECTION"
]  "FINISHED CALCULATING DENSITY EFFECT PARAMETERS"

:SSB-PARAMETERS-DEFINED:

"GAS PRESSURE CORRECTION COMES NEXT"
IF (GASP.NE.0.0) [
ALGASP=ALOG(GASP);
CBAR=CBAR - ALGASP;
X0=X0 - ALGASP/TOLN10;
X1=X1 - ALGASP/TOLN10;
]

IF (IM.EQ.0) [AFACT=(CBAR - TOLN10*X0)/(X1 - X0)**SK;]
]"END OF EPSTFL=0 BLOCK"

ELSE[ "EPSTFL=1 BLOCK  I.E. READ IN THE INPUT FROM THE DENSITY"
     "INPUT FILE"

READ(20,:A:)EPSTTL;:A:  FORMAT(A);
READ(20,*) NEPST,IEV,EPSTRH,NELEPS;
READ(20,*) (ZEPST(I),WEPST(I),I=1,NELEPS);
READ(20,*) (EPSTEN(I),EPSTD(I),I=1,NEPST);

IF(NEPST>150)[OUTPUT NEPST;
(//' *****NEPST=',I4,' IS GREATER THAN THE 150 ALLOWED');$CALL_EXIT(22);]
"CONVERT TO TOTAL ENERGIES"
DO I=1,NEPST[EPSTEN(I) = EPSTEN(I) + RM;]
IMEV = IEV*1.E-06;

"CHECK THAT WE HAVE COVERED ENERGY RANGES NEEDED"
IF( AE < EPSTEN(1))[OUTPUT EPSTEN(1),AE;
(//' ****LOWEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E10.3/
T20,'WHICH IS HIGHER THAN THE VALUE OF AE=',1P,E10.3,' MEV'/
' ***IT HAS BEEN SET TO AE***'//);EPSTEN(1) = AE;]
IF( UE > EPSTEN(NEPST))[ OUTPUT EPSTEN(NEPST),UE;
(//' ****HIGHEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E10.3/
T20,'WHICH IS LOWER THAN THE VALUE OF UE=',1P,E10.3,' MEV'/
' ***IT HAS BEEN SET TO UE***'//);EPSTEN(NEPST) = UE;]

"DO A CHECK ON THE COMPOSITION AND DENSITY TO INSURE THE RIGHT DELTA"
"HAS BEEN PICKED UP. ALLOW A TOLERANCE OF 1 PERCENT ERROR ON THE"
"COMPOSITION BY WEIGHT."

ICHECK=0; "FLAG GETS SET TO UNITY IF THE COMPOSITION DOES NOT MATCH"
    TLRNCE=0.01; "TOLERANCE ALLOWED ON FRACTION BY WEIGHT"

"FIRST CHECK THAT THE NUMBER OF ELEMENTS ARE THE SAME"
IF(NELEPS.NE.NE) ICHECK=1;

"NOW CHECK THAT THE DENSITIES ARE THE SAME WITHIN TOLERANCE"
IF( (ICHECK.EQ.0)  .AND.
  ( (EPSTRH.LT.((1.0-TLRNCE)*RHO)) .OR. (EPSTRH.GT.((1.0+TLRNCE)*RHO))
  ) ) ICHECK=1; "DENSITY IS OUT OF RANGE"
"WE MUST FIRST NORMALIZE THE PEGS FRACTIONS BY WEIGHT TO ENSURE THEY"
"ARE NORMALIZED TO UNITY"
EPSTWT = 0.0;DO I=1,NE[ EPSTWT = EPSTWT + RHOZ(I);]
IF(EPSTWT=0.0)[
OUTPUT;(//' *****IN SPINIT***SOMETHING WRONG, MOLECULAR WEIGHT OF',
'MOLECULE IS ZERO (I.E. SUM OF RHOZ)***'//);]

IF(ICHECK.EQ.0)[
    IESPEL=0;    "INITIALIZE ESP ELEMENT COUNTER"
    ICHECK=1;    "ASSUME FAILURE"
    LOOP["LOOP OVER ESP COMPONENTS"
        IESPEL=IESPEL+1;
        IPEGEL=0;    "INITIALIZE PEGS ELEMENT COUNTER"
        LOOP["LOOP OVER PEGS COMPONENTS"
            IPEGEL=IPEGEL+1;
            IF(IFIX(Z(IPEGEL)).EQ.ZEPST(IESPEL))[ICHECK=0;EXIT;]
            ]WHILE(IPEGEL.LT.NE);
            IF( (ICHECK.EQ.0) "Z OF ELEMENT MATCHES"
            .AND.
            ( (WEPST(IESPEL).LT.((1.0-TLRNCE)*RHOZ(IPEGEL)/EPSTWT))
             .OR. (WEPST(IESPEL).GT.((1.0+TLRNCE)*RHOZ(IPEGEL)/EPSTWT))
            ) ) ICHECK=1; "MATCHED ELEMENT BUT WEIGHT FRACTION WRONG"
        ]WHILE(IESPEL.LT.NELEPS);
    ] "END OF TEST FOR ICHECK = 0"

IF(ICHECK.EQ.1)[ "PRINT MESSAGE AND STOP"
OUTPUT;
(////'0*** COMPOSITION IN INPUT DENSITY FILE DOES NOT MATCH ',
' THAT BEING USED BY PEGS'//' ***** QUITTING EARLY***'////);
$CALL_EXIT(23); " ERRORS DETECTED";
]


]"END OF EPSTFL=1 BLOCK"


SPC1=2.*PI*R0**2*RM*EDEN*RLC;
SPC2=ALOG((IMEV/RM)**2/2.0);

OUTPUT;(//' PARAMETERS COMPUTED IN SPINIT.'//1X,64('-'));
IF(IM.EQ.0) [OUTPUT ;
(' STERNHEIMER-PEIERLS GENERAL FORMULA USED FOR THE DENSITY EFFECT,');]
ELSEIF(IM.GT.0) [OUTPUT;
(' STERNHEIMER-SELTZER-BERGER TABLE USED FOR DENSITY EFFECT');]
ELSEIF(IM = -1) [OUTPUT;
(' STERNHEIMER-SELTZER-BERGER DENSITY EFFECT DATA SUPPLIED BY USER');]
ELSE[
OUTPUT EPSTTL;(' DENSITY EFFECT READ IN DIRECTLY:'/T10,A);]
OUTPUT;(1X,64('-')/);
OUTPUT IEV;(/' ADJUSTED MEAN IONIZATION = ',F8.2,' EV'/1X,38('-')//);
IF(EPSTFL = 0) [$DUMP IEV,VPLASM,CBAR,X0,X1,SK,AFACT;]
"$DUMP SPC1,SPC2;"

RETURN;
END;  "END OF SUBROUTINE SPINIT"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ADDMOL(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;
$REAL    X;

COMIN/DERCON/;
"     DERIVATE OF ADFMOL-PROPORTIONAL TO APPROXIMATE P.D.F.          "
ADDMOL=1.0/(X-RM)**2;
RETURN;
END; "END OF FUNCTION ADDMOL"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ADFMOL(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;
$REAL X;

COMIN/DERCON/;
"     APPROXIMATE C.D.F. FOR MOLLER AND BHABHA                       "
ADFMOL=-1.0/(X-RM);
RETURN;
END; "END OF FUNCTION ADFMOL"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ADIMOL(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;
$REAL X;

COMIN/DERCON/;
"     INVERSE OF ADFMOL                                              "
ADIMOL=-1.0/X+RM;
RETURN;
END; "END OF FUNCTION ADIMOL"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AFFACT(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL X,AINTP;
COMIN/RAYLEI/;
AFFACT=AINTP(X,XVAL(1),100,AFAC2(1),1,.TRUE.,.TRUE.);
RETURN;
END; "END OF FUNCTION AFFACT"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AINTP(X,XA,NX,YA,ISK,XLOG,YLOG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;

"     LINEAR OR LOG INTERPOLATION FUNCTION.                          "

"CHANGED"
"REAL XA(1),YA(ISK,1);"
"TO"
"REAL XA(NX),YA(ISK,NX);"
"FOR SUN AFB 89/12/27"

$INTEGER NX,ISK;
$REAL    X;
$REAL    XA(NX),YA(ISK,NX);
LOGICAL XLOG,YLOG,XLOGL;

$INTEGER I,J;
$REAL    XI,XJ,XV,YI,YJ;
XLOGL=XLOG;  "SET LOCAL VARIABLE"
"     FIND INTERVAL FOR X INTERPOLATION.                             "
DO J=2,NX[
IF (X.LT.XA(J))GO TO :NSTEP:;]
J=NX;
:NSTEP:    I=J-1;
IF (XA(I).LE.0.0) [XLOGL=.FALSE.;]
IF (.NOT.XLOGL)[ XI=XA(I); XJ=XA(J); XV=X;]
ELSE [XI=ALOG(XA(I)); XJ=ALOG(XA(J)); XV=ALOG(X);]
IF (YLOG.AND.(YA(1,I).EQ.0.0.OR.YA(1,J).EQ.0.0))
   [AINTP=0.0;]
ELSE[
    IF(YLOG)[YI=ALOG(YA(1,I));YJ=ALOG(YA(1,J));
    IF(XJ.EQ.XI) [AINTP=YI;]
    ELSE [AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI);]
    AINTP=EXP(AINTP);]
    ELSE[YI=YA(1,I); YJ=YA(1,J);
         IF(XJ.EQ.XI) [AINTP=YI;]
         ELSE [AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI);]]
]
RETURN;
END; "END OF FUNCTION AINTP"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ALIN(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"     FUNCTION TO CALL IF LINEAR DISTRIBUTION FUNCTION IS DESIRED      "
implicit none;
$REAL x;
ALIN=X;
RETURN;
END; "END OF FUNCTION ALIN"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ALINI(X);  "INVERSE OF ALIN"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;
$REAL x;
ALINI=X;
RETURN;
END;  "END OF FUNCTION ALINI"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ALKE(E);"LOG OF KINETIC ENERGY"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E;
COMIN/DERCON/;
ALKE=ALOG(E-RM);
RETURN;
END;  "END OF FUNCTION ALKE"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ALKEI(X);"INVERSE OF LOG OF KINETIC ENERGY"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL x;
COMIN/DERCON/;
ALKEI=EXP(X) + RM;
RETURN;
END;  "END OF FUNCTION ALKEI"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AMOLDM(EN0,EN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***DIFFERENTIAL MOLLER CROSS SECTION FOR INCIDENT ELECTRON OF TOTAL"
"   ENERGY EN0 TO PRODUCE SCATTERED ELECTRON OF TOTAL ENERGY EN."
;
implicit none;
$REAL EN0,EN;
$REAL TM,EM,BETASQ,AMOLFM;
COMIN/PMCONS,DERCON,MOLVAR,LAMOLM/;
T0=EN0-RM;
TM=T0/RM;
EM=TM+1.;
C1=(TM/EM)**2;
C2=(2.*TM+1.)/EM**2;
BETASQ=1.-1./EM**2;
CMOLL=RLC*EDEN*2.*PI*R0**2/(BETASQ*T0*TM);"CONSTANT FACTOR IN EQ.2.10.1"
AMOLDM=AMOLFM(EN);
RETURN;
END;  "END OF FUNCTION AMOLDM"
%E  "PEGS4 MORTRAN (Page Eject Control)"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AMOLFM(EN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL    EN;
$REAL    T,EPS,EPSP,EPSI,EPSPI;
COMIN/DERCON,LAMOLM/;
T=EN-RM;
EPS=T/T0;
EPSP=1.-EPS;
EPSI=1./EPS;
EPSPI=1./EPSP;
AMOLFM=CMOLL*(C1+EPSI*(EPSI-C2)+EPSPI*(EPSPI-C2) ); "EQ.2.10.1"
RETURN;
END; "END OF FUNCTION AMOLFM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AMOLRM(EN0,EN1,EN2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL    EN0,EN1,EN2;
$REAL    T0,T1,T2,TM,EM,C1,C2,BETASQ,CMOLL2,EPS1,EPSP1,EPS2,EPSP2;
"***MOLLER CROSS SECTION FOR INCIDENT ELECTRON OF TOTAL ENERGY EN0 TO"
"   PRODUCE SECONDARY ELECTRON IN THE TOTAL ENERGY RANGE EN1 TO EN2."
COMIN/PMCONS,DERCON,MOLVAR/;
T0=EN0-RM;
T1=EN1-RM;
T2=EN2-RM;
TM=T0/RM;
EM=TM+1.;
C1=(TM/EM)**2;
C2=(2.*TM+1.)/EM**2;
BETASQ=1.-1./EM**2;
CMOLL2=RLC*EDEN*2.*PI*R0**2/(BETASQ*TM); "CONSTANT FACTOR IN EQ.2.10.3"
EPS1=T1/T0;
EPSP1=1.-EPS1;
EPS2=T2/T0;
EPSP2=1.-EPS2;
AMOLRM=CMOLL2*(C1*(EPS2-EPS1)+1./EPS1-1./EPS2+1./EPSP2-1./EPSP1
  -C2*ALOG(EPS2*EPSP1/(EPS1*EPSP2))); "EQ.2.10.3"
RETURN;
END; "END OF FUNCTION AMOLRM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AMOLTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL    E0;
$REAL    T0,AMOLRM;
"***TOTAL CROSS SECTION FOR MOLLER SCATTERING WITH INCIDENT ELECTRON"
"   ENERGY(TOTAL) OF E0."
COMIN/THRESH,DERCON/;
IF (E0.LE.THMOLL) [AMOLTM=0.; ]
ELSE [T0=E0-RM;
AMOLTM=AMOLRM(E0,AE,T0*0.5+RM);] "EQ.2.10.6"
RETURN;
END; "END OF FUNCTION AMOLTM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ANIHDM(E0,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***DIFFERENTIAL TWO-PHOTON ANNIHILATION CROSS SECTION FOR POSITRON OF"
"   INCIDENT TOTAL ENERGY E0 TO PRODUCE SECONDARY PHOTON OF ENERGY K."
;
implicit none;
$REAL    E0,K;
$REAL    GAM,T0P,ANIHFM;
COMIN/PMCONS,DERCON,MOLVAR,LANIHM/;
GAM=E0/RM; "EQ.2.12.3"
A=GAM+1.;  "EQ.2.12.4"
T0P=GAM-1.;  "EQ.2.12.5"
C1=RLC*EDEN*PI*R0**2/(A*T0P*RM); "EQ.2.12.9"
C2=A+2.0*GAM/A;  "2.12.10"
ANIHDM=ANIHFM(K);
RETURN;
END;   "END OF FUNCTION ANIHDM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ANIHFM(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL    K;
COMIN/DERCON,LANIHM/;
$REAL KP,S1,X;
S1(X)=C1*(-1.+(C2-1.0/X)/X);  "STATEMENT FUNCTION---EQ.2.12.8"
KP=K/RM;  "EQ.2.12.7"
ANIHFM=S1(KP)+S1(A-KP);  "EQ.2.12.1"
RETURN;
END; "END OF FUNCTION ANIHFM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ANIHRM(E0,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TWO-PHOTON ANNIHILATION CROSS SECTION FOR INCIDENT POSITRON OF"
"   TOTAL ENERGY E0 TO PRODUCE SECONDARY PHOTON IN THE ENERGY RANGE"
"   K1 TO K2."
;
implicit none;
$REAL  E0,K1,K2;
COMIN/PMCONS,DERCON,MOLVAR/;
$REAL KP1,KP2,S2,X,C1,C2,GAM,A,T0P;
S2(X)=RM*C1*(-X+C2*ALOG(X)+1.0/X); "STATEMENT FUNCTION---EQ.2.12.13"
GAM=E0/RM; "EQ.2.12.3"
KP1=K1/RM; "EQ.2.12.12"
KP2=K2/RM; "EQ.2.12.12"
A=GAM+1.;   "EQ.2.12.4"
T0P=GAM-1.;  "EQ.2.12.5"
C1=RLC*EDEN*PI*R0**2/(A*T0P*RM); "EQ.2.12.9"
C2=A+2.*GAM/A;  "EQ.2.12.10"
ANIHRM=S2(KP2)-S2(KP1)+S2(A-KP1)-S2(A-KP2); "EQ.2.12.11"
RETURN;
END;  "END OF FUNCTION ANIHRM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ANIHTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TOTAL CROSS SECTION FOR TWO-PHOTON POSITRON-ELECTRON ANNIHILATION"
"   WITH INCIDENT POSITRON ENERGY(TOTAL) OF E0."
;
implicit none;
$REAL    E0;
$REAL    GAM,P0P2,P0P,CANIH;
COMIN/PMCONS,DERCON,MOLVAR/;
GAM=E0/RM;   "EQ.2.12.3"
P0P2=GAM*GAM-1.0;
P0P=SQRT(P0P2);  "EQ.2.12.6"
CANIH=RLC*EDEN*PI*R0**2/(GAM+1.); "CONSTANT FACTOR IN EQ.2.12.14"
ANIHTM=CANIH*((GAM*GAM+4.*GAM+1.)/P0P2*ALOG(GAM+P0P)
   -(GAM+3.)/P0P);   "EQ.2.12.14"
RETURN;
END;  "END OF FUNCTION ANIHTM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
%L
%I4      "INDENT MORTRAN"
!INDENT F2;
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION APRIM(Z,E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"     EMPIRICAL CORRECTION FACTOR TO BREMS CROSS SECTION               "

" This version can be switched to use different values:                "
"   IAPRIM = 0  equivalent to old PEGS4 (default)                      "
"            1  reads in values from unit 22                           "
"            2  sets APRIM to 1.0                                      "
" Future changes can be accommodated by reading in                     "
" different data on unit 22 and if necessary changing the array sizes: "

;
implicit none;
$REAL Z,E;
$INTEGER  napre,naprz,ie,iz;
$REAL     EM,AINTP;
REPLACE {$NAPRE} WITH {115} " Maximum number of energies ( > 18 )      "
REPLACE {$NAPRZ} WITH {14}  " Maximum number of elements ( > 5 )       "

REPLACE {$NAPR1} WITH {{COMPUTE $NAPRE - 18}}
REPLACE {$NAPR2} WITH {{COMPUTE $NAPRZ - 5}}
REPLACE {$NAPR3} WITH {{COMPUTE $NAPRE * $NAPR2}}
;COMIN/DERCON,EPSTAR/; "NRC CHANGE NOV 88"
REAL APRIMD($NAPRE,$NAPRZ),EPRIM($NAPRE),ZPRIM($NAPRZ),APRIMZ($NAPRE);
DATA APRIMD/
1.32,1.26,1.18,1.13,1.09,1.07,1.05,1.04,1.03, 1.02,8*1.0,$NAPR1*0.0,
1.34,1.27,1.19,1.13,1.09,1.07,1.05,1.04,1.03,1.02, 8*1.0,$NAPR1*0.0,
1.39,1.30,1.21,1.14,1.10,1.07,1.05,1.04,1.03,1.02,0.994,
 2*0.991,0.990,2*0.989,2*0.988,$NAPR1*0.0,
1.46,1.34,1.23,1.15,1.11,1.08, 1.06,1.05,1.03,1.02,0.989,
 0.973,0.971,0.969,0.967,0.965,2*0.963,$NAPR1*0.0,
1.55,1.40,1.26,1.17,1.12,1.09,1.07,1.05,1.03,1.02,0.955,0.935,
 0.930,0.925,0.920,0.915,2*0.911,$NAPR1*0.0,
$NAPR3*0.0/,
EPRIM /
2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,21.,31.,41.,51.,61.,71.,81.,91.,
$NAPR1*0.0/,
ZPRIM /6.,13.,29.,50.,79.,$NAPR2*0.0/;
save APRIMD,EPRIM,ZPRIM,APRIMZ,napre,naprz;

IF (IAPRIM.EQ.0) [ " PEGS4 default APRIM"
    IF(IAPRFL = 0)[IAPRFL=1;OUTPUT;
    ('0IAPRIM=0, i.e. uses KOCH AND MOTZ empirical corrections to',
    ' brem cross section'/);]
    IF (E.GE.50) [ APRIM=1.; ]
    ELSE [ " INTERPOLATE APRIM OVER Z "
        EM=E/RM;
        DO IE=1,18[
           APRIMZ(IE)=
           AINTP(Z,ZPRIM,5,APRIMD(IE,1),$NAPRE,.FALSE.,.FALSE.);
           ] " Z INTERPOLATION IS NOW COMPLETE. NOW DO ENERGY "
        APRIM=AINTP(EM,EPRIM,18,APRIMZ,1,.FALSE.,.FALSE.);
    ]
]
ELSEIF (IAPRIM.EQ.1) [
    IF (IAPRFL.EQ.0) [ " read in data from APRIME.DATA"
        OUTPUT;('0IAPRIM=1, i.e. uses NRC(based on NIST/ICRU)',
       ' corrections to brem cross section'/);
        READ(22,*) NAPRZ, NAPRE;
        IF (NAPRZ.GT.$NAPRZ) [
            OUTPUT; (//,' TOO MANY ELEMENTS FOR APRIME INTERPOLATION:',
            /,'   CHANGE $NAPRZ AND RECOMPILE PEGS'); $CALL_EXIT(24);]
        IF (NAPRE.GT.$NAPRE) [
            OUTPUT; (//,' TOO MANY ENERGIES FOR APRIME INTERPOLATION:',
            /,'   CHANGE $NAPRE AND RECOMPILE PEGS'); $CALL_EXIT(24);]
        READ(22,*) (EPRIM(IE),IE=1,NAPRE);
        DO IE=1,NAPRE [ EPRIM(IE)=1.+EPRIM(IE)/RM; ]
        DO IZ=1,NAPRZ [READ(22,*)ZPRIM(IZ),(APRIMD(IE,IZ),IE=1,NAPRE);]
        IAPRFL=1;
        ]
    EM=E/RM;
    DO IE=1,NAPRE [ " INTERPOLATE APRIM OVER LOG(Z)                "
        APRIMZ(IE)=
        AINTP(Z,ZPRIM,NAPRZ,APRIMD(IE,1),$NAPRE,.TRUE.,.FALSE.);
        ]           " NOW DO ENERGY INTERPOLATION     "
    APRIM=AINTP(EM,EPRIM,NAPRE,APRIMZ,1,.FALSE.,.FALSE.);
    ]
ELSEIF (IAPRIM.EQ.2) [
        IF(IAPRFL = 0)[IAPRFL=1;
        OUTPUT;('0IAPRIM = 2, i.e. uses NO corrections to brem',
        ' cross section'/);]
        APRIM=1.0]
ELSE [ OUTPUT IAPRIM; (//,' ILLEGAL VALUE FOR IAPRIM: ',I4); $CALL_EXIT(24); ]
RETURN;
END; "END OF FUNCTION APRIM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION AREC(X);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"     FUNCTION TO CALL WHEN DERIVATIVE OF LOG IS DESIRED              "
implicit none;
$REAL x;
AREC=1.0/X;
RETURN;
END; "END OF FUNCTION AREC"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BHABDM(EN0,EN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***DIFFERENTIAL BHABHA CROSS SECTION FOR INCIDENT POSITRON OF TOTAL"
"   ENERGY EN0 TO PRODUCE SCATTERED ELECTRON OF TOTAL ENERGY EN."
;
implicit none;
$REAL EN0,EN;
$REAL TM,EM,Y,BHABFM;
COMIN/PMCONS,DERCON,MOLVAR,LBHABM/;
T0=EN0-RM;
TM=T0/RM;
EM=TM+1.;
Y=1./(TM+2.);
BETASI=1./(1.-1./EM**2);
CBHAB=RLC*EDEN*2.*PI*R0**2/(T0*TM); "CONSTANT FACTOR IN EQ.2.11.1"
B1=2.-Y**2;
B2=3.-Y*(6.-Y*(1.-Y*2.));
B3=2.-Y*(10.-Y*(16.-Y*8.));
B4=1.-Y*(6.-Y*(12.-Y*8.));
BHABDM=BHABFM(EN);
RETURN;
END;  "END OF FUNCTION BHABDM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BHABFM(EN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL EN;
$REAL T,EPS,EPSI;
COMIN/DERCON,LBHABM/;
T=EN-RM;
EPS=T/T0;
EPSI=1./EPS;
BHABFM=CBHAB*(EPSI*(EPSI*BETASI-B1)+B2+EPS*(EPS*B4-B3)); "EQ.2.11.1"
RETURN;
END;  "END OF FUNCTION BHABFM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BHABRM(EN0,EN1,EN2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BHABHA CROSS SECTION FOR INCIDENT POSITRON OF TOTAL ENERGY EN0 TO"
"   PRODUCE SECONDARY ELECTRON IN THE TOTAL ENERGY RANGE EN1 TO EN2."
;
implicit none;
$REAL EN0,EN1,EN2;
$REAL T0,T1,T2,TM,EM,Y,BETASI,CBHAB2,B1,B2,B3,B4,EPS1,EPS2;
COMIN/PMCONS,DERCON,MOLVAR/;
T0=EN0-RM;
T1=EN1-RM;
T2=EN2-RM;
TM=T0/RM;
EM=TM+1.;
Y=1./(TM+2.);
BETASI=1./(1.-1./EM**2);
CBHAB2=RLC*EDEN*2.*PI*R0**2/TM; "CONSTANT FACTOR IN EQ.2.11.2"
B1=2.-Y**2;
B2=3.-Y*(6.-Y*(1.-Y*2.));
B3=2.-Y*(10.-Y*(16.-Y*8.));
B4=1.-Y*(6.-Y*(12.-Y*8.));
EPS1=T1/T0;
EPS2=T2/T0;
BHABRM=CBHAB2*(BETASI*(1./EPS1-1./EPS2)-B1*ALOG(EPS2/EPS1)
  +B2*(EPS2-EPS1)+EPS2*EPS2*(EPS2*B4/3.-0.5*B3)
  - EPS1*EPS1*(EPS1*B4/3.-0.5*B3));  "EQ.2.11.2"
RETURN;
END; "END OF FUNCTION BHABRM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BHABTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TOTAL CROSS SECTION FOR BHABHA SCATTERING WITH INCIDENT POSITRON"
"   ENERGY(TOTAL) OF E0."
;
implicit none;
$REAL E0,BHABRM;
COMIN/THRESH,DERCON/;
IF (E0.LE.AE) [BHABTM=0.;]
ELSE [BHABTM=BHABRM(E0,AE,E0);]  "EQ.2.11.4"
RETURN;
END; "END OF FUNCTION BHABTM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMDR(EA,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL EA,K;
"***RUN TIME BREM D-SIGMA/D-K          "

"EVALUATES EQUATION 2.7.108 OF SLAC-265"
;
$INTEGER LS;
$REAL    BREMFR;

COMIN/LBREMR/;
E=EA;
IF (E.GE.50.) [LD=2; LS=3;]
ELSE [LD=1;LS=0;]
LA=LS+1;
LB=LS+2;
BREMDR=BREMFR(K);
RETURN;
END;   "END OF FUNCTION BREMDR"



"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMDZ(Z,E,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL    Z,E,K,BRMSDZ;
"***ALL ENTRIES TO THIS FUNCTION GIVE THE CONTRIBUTION THAT ELEMENT Z"
"   WOULD HAVE IF THERE WERE ONE PER MOLECULE.                      "
"   ENTRIES STARTING WITH D DO THEIR OWN INITIALIZATION.             "
"   ENTRIES STARTING WITH F RELY ON PREVIOUS D FOR INITIALIZATION.   "
"   BREMDZ.. D-SIGMA/D-K FOR BREMS IN Z                              "
"   BRMSDZ.. K*(D-SIGMA/D-K) FOR SOFT ENERGY LOSS FROM BREMS IN Z    "

"EVALUATES EQUATION 2.7.108 IN SLAC-265"

BREMDZ=BRMSDZ(Z,E,K)/K;
RETURN;
END;  "END OF FUNCTION BREMDZ"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMFR(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K;
$REAL EPS,DEL,DELTA,A,B;
COMIN/BREMPR,DBRPR,LBREMR/;
EPS=K/E;
DEL=EPS/(E*(1-EPS));
IF (DEL.GT.DELPOS(LD)) [BREMFR=0.0; RETURN;]
DELTA=DELCM*DEL;
IF (DELTA.LE.1.)[
A=DL1(LA)+DELTA*(DL2(LA)+DELTA*DL3(LA));
B =DL1(LB)+DELTA*(DL2(LB)+DELTA*DL3(LB));]
ELSE [A=DL4(LA)+DL5(LA)*ALOG(DELTA+DL6(LA));
B =DL4(LB)+DL5(LB)*ALOG(DELTA+DL6(LB));]
BREMFR=(ALPHI(LD)*(1.-EPS)/EPS/AL2*A+0.5*(2.*EPS)*B)/E;
RETURN;
END;  "END OF FUNCTION BREMFR"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMFZ(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL K,BRMSFZ;
BREMFZ=BRMSFZ(K)/K;
RETURN;
END;  "END OF FUNCTION BREMFZ"



"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMRR(E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E,K1,K2;
EXTERNAL BREMFR;
$REAL    DUMMY,QD,BREMDR;
"     INITIALIZE BREMFR                                                "

"    CHANGED"

"    CALL BREMDR(E,K1);"

"    TO"

"    DUMMY=BREMDR(E,K1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"

DUMMY=BREMDR(E,K1);

BREMRR=QD(BREMFR,K1,K2,'BREMFR');
RETURN;
END; "END OF FUNCTION BREMRR"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMRM(E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E,K1,K2;
$INTEGER I;
$REAL    BREMRZ;
COMIN/MIXDAT/;
BREMRM=0.;
DO I=1,NE [BREMRM=BREMRM+PZ(I)*BREMRZ(Z(I),E,K1,K2);]
RETURN;
END; "END OF FUNCTION BREMRM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMRZ(Z,E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL Z,E,K1,K2;
EXTERNAL BREMFZ;
$REAL  DUMMY,BREMDZ,QD;
"     INITIALIZE BREMFZ                                                "

"    CHANGED"

"    CALL BREMDZ(Z,E,K1);"

"    TO"

"    DUMMY=BREMDZ(Z,E,K1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"

DUMMY=BREMDZ(Z,E,K1);

BREMRZ=QD(BREMFZ,K1,K2,'BREMFZ');
RETURN;
END; "END OF FUNCTION BREMRZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E0,BREMRM;
COMIN/THRESH,DERCON/;
IF (E0.LE.AP+RM) [BREMTM=0.; ]
ELSE [BREMTM=BREMRM(E0,AP,E0-RM);]
RETURN;
END; "END OF FUNCTION BREMTM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BREMTR(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E0,BREMRR;
COMIN/THRESH,DERCON/;
IF (E0.LE.AP+RM) [BREMTR=0.; ]
ELSE [BREMTR=BREMRR(E0,AP,E0-RM);]
RETURN;
END; "END OF FUNCTION BREMTR"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BRMSDZ(Z,EA,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL Z,EA,K;
$REAL APRIM,XSIF,FCOULC,BRMSFZ;
COMIN/PMCONS,DERCON,MOLVAR,LBREMZ/;
E=EA;
DELC=136.*Z**(-1./3.)*RM/E;
CONST=APRIM(Z,E)*(AN*RHO/WM)*R0**2*FSC*Z*(Z+XSIF(Z))*RLC;
XLNZ=4./3.*ALOG(Z);
IF (E.GE.50)XLNZ=XLNZ+4.*FCOULC(Z);
".....DELTAM IS THE DELTA AT WHICH THE SQUARE BRACKETS GO TO ZERO      "
DELTAM=EXP((21.12-XLNZ)/4.184)-0.952;
BRMSDZ=BRMSFZ(K);
RETURN;
END;  "END OF FUNCTION BRMSDZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BRMSFZ(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K;
$REAL EMKLOC,DELTA,SB1,SB2,EE;
COMIN/LBREMZ/;
EMKLOC=E-K;
IF(EMKLOC.EQ.0.0) [EMKLOC=1.E-25;]
DELTA=DELC*K/EMKLOC;
IF (DELTA.GE.DELTAM) [BRMSFZ=0.0;]
ELSE [IF (DELTA.LE.1.)[
SB1=20.867+DELTA*(-3.242+DELTA*0.625)-XLNZ;
SB2=20.209+DELTA*(-1.930+DELTA*(-0.086))-XLNZ;]
ELSE [SB1=21.12-4.184*ALOG(DELTA+0.952)-XLNZ;
SB2=SB1;]
EE=EMKLOC/E;
BRMSFZ=CONST*((1.+EE*EE)*SB1-0.666667*EE*SB2);]
RETURN;
END; "END OF FUNCTION BRMSFZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BRMSRM(E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;
$REAL E,K1,K2,BRMSRZ;
$INTEGER I;
COMIN/MIXDAT/;
BRMSRM=0.;
DO I=1,NE[BRMSRM=BRMSRM+PZ(I)*BRMSRZ(Z(I),E,K1,K2);]
RETURN;
END; "END OF FUNCTION BRMSRM"
%E  "PEGS4 MORTRAN (Page Eject Control)"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BRMSRZ(Z,E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL Z,E,K1,K2;
EXTERNAL BRMSFZ;
$REAL DUMMY,BRMSDZ,QD;
"     INITIALIZE BRMSFZ                                                "

"    CHANGED"

"    CALL BRMSDZ(Z,E,K1);"

"    TO"

"    DUMMY=BRMSDZ(Z,E,K1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"

DUMMY=BRMSDZ(Z,E,K1);

BRMSRZ=QD(BRMSFZ,K1,K2,'BRMSFZ');
RETURN;
END; "END OF FUNCTION BRMSRZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION BRMSTM(E0,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E0,EG,BRMSRM,AU,zero;
parameter (zero=0);
COMIN/DERCON/;
IF (E0.LE.RM) [BRMSTM=0.; ]
ELSE [AU=AMIN1(EG,E0-RM);
BRMSTM=BRMSRM(E0,zero,AU);]
RETURN;
END; "END OF FUNCTION BRMSTM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COHETM(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K,COHETZ;
$INTEGER I;
COMIN/MIXDAT/;
COHETM=0.0;
DO I=1,NE [
COHETM=COHETM+PZ(I)*COHETZ(Z(I),K);]
RETURN;
END; "END OF FUNCTION COHETM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COHETZ(Z,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL Z,K;
$INTEGER IZ;
$REAL    PCON,AINTP;
COMIN/MOLVAR,PHPAIR,PMCONS,RAYLEI/;

"PCON CONVERTS STORM AND ISRAEL CROSS SECTION IN BARNS/ATOM"
"INTO 1/RLC FOR COHERENT SCATTERING "
PCON= 1.E-24*(AN*RHO/WM)*RLC;

IZ=Z;
COHETZ=PCON*AINTP(K,PHE(1,IZ),NPHE(IZ),COHE(1,IZ),1,.TRUE.,.TRUE.);
RETURN;
END; "END OF FUNCTION COHETZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COMPDM(K0A,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***DIFFERENTIAL CROSS SECTION FOR INCIDENT PHOTON OF ENERGY K0A TO"
"   COMPTON SCATTER TO SECONDARY ENERGY K."
;
implicit none;
$REAL K0A,K,K0P,COMPFM;
COMIN/PMCONS,DERCON,MOLVAR,LCOMPM/;
K0=K0A;
K0P=K0/RM;
CCOMP=RLC*EDEN*PI*R0**2/(K0*K0P);  "CONSTANT FACTOR IN EQ. 2.9.1"
C1=1./K0P**2;
C2=1.-(2.+2.*K0P)/K0P**2;
C3=(1.+2.*K0P)/K0P**2;
COMPDM=COMPFM(K);
RETURN;
END;  "END OF FUNCTION COMPDM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COMPFM(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K,EPS,EPSI;
COMIN/LCOMPM/;
EPS=K/K0;
EPSI=1./EPS;
COMPFM=CCOMP*( (C1*EPSI+C2)*EPSI+C3+EPS );  "EQ.2.9.1"
RETURN;
END; "END OF FUNCTION COMPFM"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COMPRM(K0,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***COMPTON CROSS SECTION FOR INCIDENT PHOTON OF ENERGY K0 TO SCATTER"
"   INTO THE ENERGY RANGE K1 TO K2."
;
implicit none;
COMIN/PMCONS,DERCON,MOLVAR/;
$REAL K0,K1,K2,CCOMP2;
REAL*8 C1,C2,C3,EPS1,EPS2,K0P;"FOR VERY LOW ENERGY PHOTONS"
K0P=K0/RM;
CCOMP2=RLC*EDEN*PI*R0**2/K0P; "CONSTANT FACTOR IN EQ.2.9.2"
C1=1./K0P**2;
C2=1.-(2.+2.*K0P)/K0P**2;
C3=(1.+2.*K0P)/K0P**2;
EPS1=K1/K0;
EPS2=K2/K0;
COMPRM=CCOMP2*(C1*(1./EPS1-1./EPS2)+C2*DLOG(EPS2/EPS1)+EPS2*
(C3+0.5*EPS2) - EPS1*(C3+0.5*EPS1) );  "EQ. 2.9.2"
RETURN;
END; "END OF FUNCTION COMPRM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION COMPTM(K0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TOTAL CROSS SECTION FOR COMPTON SCATTERING WITH INCIDENT PHOTON"
"   ENERGY K0."
;
implicit none;
$REAL K0,K1,COMPRM;
COMIN/DERCON/;
K1=K0*RM/(RM+2.*K0);
COMPTM=COMPRM(K0,K1,K0);  "EQ. 2.9.7"
RETURN;
END; "END OF FUNCTION COMPTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION CRATIO(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"***RAYLEIGH CORRECTION FACTOR (I.E., COHERENT RATIO)"
implicit none;
$REAL E,PAIRTU,COMPTM,PHOTTE,TOT,COHETM;
TOT=PAIRTU(E)+COMPTM(E)+PHOTTE(E);
CRATIO=TOT/(TOT+COHETM(E));
RETURN;
END; "END OF FUNCTION CRATIO"

%E  "PEGS4 MORTRAN (Page Eject Control)"
!LABELS 10000; "AVOIDS MORTRAN-FORTRAN LABEL CONFUSION POSSIBILITY "

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
DOUBLE PRECISION FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER);
implicit none;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"                                                                  "
"                                                                  "
"------------------------------------------------------------------"
"-DCADRE--------D-------LIBRARY 1----------------------------------"
"------------------------------------------------------------------"
"                                                                  "
"FUNCTION:          - INTEGRATE F(X) FROM A TO B, USING CAUTIOUS   "
"                     ADAPTIVE ROMBERG EXTRAPOLATION.              "
"                                                                  "
"USAGE:             - FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER)   "
"                                                                  "
"PARAMETERS: DCADRE - ESTIMATE OF THE INTEGRAL OF F(X) FROM A TO B."
"                                                                  "
"            F      - A SINGLE-ARGUMENT REAL FUNCTION SUBPROGRAM   "
"                     SUPPLIED BY THE USER.  F MUST BE DECLARED    "
"                     EXTERNAL IN THE CALLING PROGRAM.             "
"                                                                  "
"            A,B    - THE TWO ENDPOINTS OF THE INTERVAL OF         "
"                     INTEGRATION (INPUT).                         "
"                                                                  "
"            AERR   - DESIRED ABSOLUTE ERROR IN THE ANSWER (INPUT)."
"                                                                  "
"            RERR   - DESIRED RELATIVE ERROR IN THE ANSWER (INPUT)."
"                                                                  "
"            ERROR  - ESTIMATED BOUND ON THE ABSOLUTE ERROR OF     "
"                     THE OUTPUT NUMBER, DCADRE.                   "
"                                                                  "
"            IER    - ERROR PARAMETER                              "
"                                                                  "
"                     WARNING ERROR(WITH FIX) = 64 + N             "
"                                                                  "
"                       N = 1 IMPLIES THAT ONE OR MORE SINGULAR-   "
"                             ITIES WERE SUCCESSFULLY HANDLED.     "
"                                                                  "
"                       N = 2 IMPLIES THAT, IN SOME SUBINTERVAL(S),"
"                             THE ESTIMATE OF THE INTEGRAL WAS     "
"                             ACCEPTED MERELY BECAUSE THE ESTIMATED"
"                             ERROR WAS SMALL, EVEN THOUGH NO REG- "
"                             ULAR BEHAVIOR WAS RECOGNIZED.        "
"                                                                  "
"                     TERMINAL ERROR = 128 + N                     "
"                                                                  "
"                       N = 3 FAILURE DUE TO INSUFFICIENT INTERNAL "
"                             WORKING STORAGE.                     "
"                                                                  "
"                       N = 4 FAILURE.  THIS MAY BE DUE TO TOO MUCH"
"                             NOISE IN THE FUNCTION (RELATIVE TO   "
"                             THE GIVEN ERROR REQUIREMENTS) OR DUE "
"                             TO AN ILL-BEHAVED INTEGRAND.         "
"                                                                  "
"                       N = 5 INDICATES THAT RERR IS GREATER THAN  "
"                             0.1, OR RERR IS LESS THAN 0.0, OR    "
"                             RERR IS TOO SMALL FOR THE PRECISION  "
"                             OF THE MACHINE.                      "
"                                                                  "
"------------------------------------------------------------------"
"VERSION DATE:      - 8 OCTOBER 1974                               "
"                                                                  "
"MORTRAN VERSION    - 4 OCTOBER 1984/1545 (W. R. NELSON)           "
"------------------------------------------------------------------"
"                                                                  "
; "NOTE: SEMI-COLON TO CLEAR MORTRAN BUFFER                        "
"                                                                  "
"ADDED"
"EXTERNAL F;"
"FOR SUN AFB 89/12/27"

EXTERNAL F;

DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4),TS(2049);
DIMENSION IBEGS(30),BEGIN(30),FINIS(30),EST(30);
DIMENSION REGLSV(30);
LOGICAL H2CONV,AITKEN,RIGHT,REGLAR,REGLSV;
DOUBLE PRECISION T,R,AIT,DIF,RN,TS,BEGIN,FINIS,EST,AITLOW;
DOUBLE PRECISION H2TOL,AITTOL,LENGTH,JUMPTL,ZERO,P1,HALF,ONE;

"CHANGED"
"DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,F,ERROR,A,B;"
"TO"
"DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B;"
"FOR SUN AFB 89/12/27"

DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B;

DOUBLE PRECISION AERR,RERR,STEPMN,STEPNM,STAGE,CUREST,FNSIZE;
DOUBLE PRECISION PREVER,BEG,FBEG,END,FEND,STEP,ASTEP,TABS,HOVN;
DOUBLE PRECISION FN,SUM,SUMABS,ABSI,VINT,TABTLM,ERGL,ERGOAL;
DOUBLE PRECISION ERRA,ERRR,FEXTRP,ERRER,DIFF,SING,FEXTM1,ALG4O2;
DOUBLE PRECISION H2NXT,SINGNX,SLOPE,FBEG2,ALPHA;
DOUBLE PRECISION ERRET,H2TFEX,FI;

"ADDED"
"REAL RVAL,F;"
"FOR SUN AFB 89/12/27"

REAL RVAL,F;

$INTEGER IBEGS,IER,ISTAGE,IBEG,IEND,L,N,LM1,N2,ISTEP,II,III,I,ISTEP2,IT,NNLEFT;
$INTEGER MAXTS,MAXTBL,MXSTGE;
DATA AITLOW,H2TOL,AITTOL,JUMPTL,MAXTS,MAXTBL,MXSTGE/1.1D0,.15D0,
     .1D0,.01D0,2049,10,30/;
DATA RN(1),RN(2),RN(3),RN(4)/.7142005D0,.3466282D0,.843751D0,
     .1263305D0/;
DATA ZERO,P1,HALF,ONE,TWO,FOUR,FOURP5,TEN,HUN/0.0D0,0.1D0,0.5D0,
     1.0D0,2.0D0,4.0D0,4.5D0,10.0D0,100.0D0/;
save MAXTS,MAXTBL,MXSTGE;
ALG4O2=DLOG10(TWO);
/CADRE,ERROR,CUREST,VINT/=ZERO;
IER=0;
LENGTH=DABS(B-A);
IF(LENGTH.EQ.ZERO) GO TO 215;
IF(RERR.GT.P1.OR.RERR.LT.ZERO) GO TO 210;
IF(AERR.EQ.ZERO.AND.(RERR+HUN).LE.HUN) GO TO 210;
ERRR=RERR;
ERRA=DABS(AERR);
STEPMN=(LENGTH/FLOAT(2**MXSTGE));
STEPNM=DMAX1(LENGTH,DABS(A),DABS(B))*TEN;
STAGE=HALF;
ISTAGE=1;
FNSIZE=ZERO;
PREVER=ZERO;
REGLAR=.FALSE.;
"                              THE GIVEN INTERVAL OF INTEGRATION   "
"                                IS THE FIRST INTERVAL CONSIDERED. "
BEG=A;

"CHANGED"
"FBEG=F(BEG)*HALF;"
"TO"
"RVAL=BEG;FBEG=F(RVAL)*HALF;"
"FOR SUN AFB 89/12/27"

RVAL=BEG;FBEG=F(RVAL)*HALF;

TS(1)=FBEG;
IBEG=1;
END=B;

"CHANGED"
"FEND=F(END)*HALF;"
"TO"
"RVAL=END;FEND=F(RVAL)*HALF;"
"FOR SUN AFB 89/12/27"

RVAL=END;FEND=F(RVAL)*HALF;

TS(2)=FEND;
IEND=2;
5 RIGHT=.FALSE.;
"                              INVESTIGATION OF A PARTICULAR       "
"                                SUBINTERVAL BEGINS AT THIS POINT. "
10 STEP=END - BEG;
ASTEP=DABS(STEP);
IF(ASTEP.LT.STEPMN) GO TO 205;
IF(STEPNM+ASTEP.EQ.STEPNM) GO TO 205;
T(1,1)=FBEG + FEND;
TABS=DABS(FBEG) + DABS(FEND);
L=1;
N=1;
H2CONV=.FALSE.;
AITKEN=.FALSE.;
15 LM1=L;
L=L + 1;
"                              CALCULATE THE NEXT TRAPEZOID SUM,   "
"                                T(L,1), WHICH IS BASED ON *N2* + 1"
"                                EQUISPACED POINTS. HERE,          "
"                                N2 = N*2 = 2**(L-1).              "
N2=N + N;
FN=N2;
ISTEP=(IEND - IBEG)/N;
IF(ISTEP.GT.1) GO TO 25;
II=IEND;
IEND=IEND + N;
IF(IEND.GT.MAXTS) GO TO 200;
HOVN=STEP/FN;
III=IEND;
FI=ONE;
DO I=1,N2,2[
TS(III)=TS(II);

"CHANGED"
"TS(III-1)=F(END - FI * HOVN);"
"TO"
"RVAL=END-FI*HOVN;TS(III-1)=F(RVAL);"
"FOR SUN AFB 89/12/27"

RVAL=END-FI*HOVN;TS(III-1)=F(RVAL);

FI=FI+TWO;
III=III-2;
II=II-1;]
ISTEP=2;
25 ISTEP2=IBEG + ISTEP/2;
SUM=ZERO;
SUMABS=ZERO;
DO I=ISTEP2,IEND,ISTEP[
SUM=SUM + TS(I);
SUMABS=SUMABS + DABS(TS(I));]
T(L,1)=T(L-1,1)*HALF+SUM/FN;
TABS=TABS*HALF+SUMABS/FN;
ABSI=ASTEP*TABS;
N=N2;
"                              GET PRELIMINARY VALUE FOR *VINT*    "
"                                FROM LAST TRAPEZOID SUM AND UPDATE"
"                                THE ERROR REQUIREMENT *ERGOAL*    "
"                                FOR THIS SUBINTERVAL.             "
IT=1;
VINT=STEP*T(L,1);
TABTLM=TABS*TEN;
FNSIZE=DMAX1(FNSIZE,DABS(T(L,1)));
ERGL=ASTEP*FNSIZE*TEN;
ERGOAL=STAGE*DMAX1(ERRA,ERRR*DABS(CUREST+VINT));
"                              COMPLETE ROW L AND COLUMN L OF *T*  "
"                                ARRAY.                            "
FEXTRP=ONE;
DO I=1,LM1[
FEXTRP=FEXTRP*FOUR;
T(I,L)=T(L,I) - T(L-1,I);
T(L,I+1)=T(L,I) + T(I,L)/(FEXTRP-ONE);]
ERRER=ASTEP*DABS(T(1,L));
"                              PRELIMINARY DECISION PROCEDURE      "
"                                IF L = 2 AND T(2,1) = T(1,1),     "
"                                GO TO 135 TO FOLLOW UP THE        "
"                                IMPRESSION THAT INTERGRAND IS     "
"                                STRAIGHT LINE.                    "
IF(L.GT.2) GO TO 40;
IF(TABS+P1*DABS(T(1,2)).EQ.TABS) GO TO 135;
GO TO 15;
"                              CACULATE NEXT RATIOS FOR            "
"                                COLUMNS 1,...,L-2 OF T-TABLE      "
"                                RATIO IS SET TO ZERO IF DIFFERENCE"
"                                IN LAST TWO ENTRIES OF COLUMN IS  "
"                                ABOUT ZERO                        "
40 DO 45 I=2,LM1;
DIFF=ZERO;
IF(TABTLM+DABS(T(I-1,L)).NE.TABTLM) DIFF=T(I-1,LM1)/T(I-1,L);
T(I-1,LM1)=DIFF;
45 CONTINUE;
IF(DABS(FOUR-T(1,LM1)).LE.H2TOL) GO TO 60;
IF(T(1,LM1).EQ.ZERO) GO TO 55;
IF(DABS(TWO-DABS(T(1,LM1))).LT.JUMPTL) GO TO 130;
IF(L.EQ.3) GO TO 15;
H2CONV=.FALSE.;
IF(DABS((T(1,LM1)-T(1,L-2))/T(1,LM1)).LE.AITTOL) GO TO 75;
50 IF(REGLAR) GO TO 55;
IF(L.EQ.4) GO TO 15;
55 IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175;
GO TO 145;
"                              CAUTIOUS ROMBERG EXTRAPOLATION      "
60 IF(H2CONV) GO TO 65;
AITKEN=.FALSE.;
H2CONV=.TRUE.;
65 FEXTRP=FOUR;
70 IT=IT + 1;
VINT=STEP*T(L,IT);
ERRER=DABS(STEP/(FEXTRP-ONE)*T(IT-1,L));
IF(ERRER.LE.ERGOAL) GO TO 160;
IF(ERGL+ERRER.EQ.ERGL) GO TO 160;
IF(IT.EQ.LM1) GO TO 125;
IF(T(IT,LM1).EQ.ZERO) GO TO 70;
IF(T(IT,LM1).LE.FEXTRP) GO TO 125;
IF(DABS(T(IT,LM1)/FOUR-FEXTRP)/FEXTRP.LT.AITTOL)
FEXTRP=FEXTRP*FOUR;
GO TO 70;
"                              INTEGRAND MAY HAVE X**ALPHA TYPE    "
"                                SINGULARITY                       "
"                                RESULTING IN A RATIO OF *SING*  = "
"                                2**(ALPHA + 1)                    "
75 IF(T(1,LM1).LT.AITLOW) GO TO 175;
IF(AITKEN) GO TO 80;
H2CONV=.FALSE.;
AITKEN=.TRUE.;
80 FEXTRP=T(L-2,LM1);
IF(FEXTRP.GT.FOURP5) GO TO 65;
IF(FEXTRP.LT.AITLOW) GO TO 175;
IF(DABS(FEXTRP-T(L-3,LM1))/T(1,LM1).GT.H2TOL) GO TO 175;
SING=FEXTRP;
FEXTM1=ONE/(FEXTRP - ONE);
AIT(1)=ZERO;
DO 85 I=2,L;
AIT(I)=T(I,1) + (T(I,1)-T(I-1,1))*FEXTM1;
R(I)=T(1,I-1);
DIF(I)=AIT(I) - AIT(I-1);
85 CONTINUE;
IT=2;
90 VINT=STEP*AIT(L);
ERRER=ERRER*FEXTM1;
IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 95;
ALPHA=DLOG10(SING)/ALG4O2 - ONE;
IER=MAX0(IER,65);
GO TO 160;
95 IT=IT + 1;
IF(IT.EQ.LM1) GO TO 125;
IF(IT.GT.3) GO TO 100;
H2NXT=FOUR;
SINGNX=SING+SING;
100 IF(H2NXT.LT.SINGNX) GO TO 105;
FEXTRP=SINGNX;
SINGNX=SINGNX+SINGNX;
GO TO 110;
105 FEXTRP=H2NXT;
H2NXT=FOUR*H2NXT;
110 DO 115 I=IT,LM1;
R(I+1)=ZERO;
IF(TABTLM+DABS(DIF(I+1)).NE.TABTLM) R(I+1)=DIF(I)/DIF(I+1);
115 CONTINUE;
H2TFEX=-H2TOL*FEXTRP;
IF(R(L)-FEXTRP.LT.H2TFEX) GO TO 125;
IF(R(L-1)-FEXTRP.LT.H2TFEX) GO TO 125;
ERRER=ASTEP*DABS(DIF(L));
FEXTM1=ONE/(FEXTRP - ONE);
DO 120 I=IT,L;
AIT(I)=AIT(I) + DIF(I)*FEXTM1;
DIF(I)=AIT(I) - AIT(I-1);
120 CONTINUE;
GO TO 90;
"                              CURRENT TRAPEZOID SUM AND RESULTING "
"                                EXTRAPOLATED VALUES DID NOT GIVE  "
"                                A SMALL ENOUGH *ERRER*.           "
"                                NOTE -- HAVING PREVER .LT. ERRER  "
"                                IS AN ALMOST CERTAIN SIGN OF      "
"                                BEGINNING TROUBLE WITH IN THE FUNC"
"                                TION VALUES. HENCE, A WATCH FOR,  "
"                                AND CONTROL OF, NOISE SHOULD      "
"                                BEGIN HERE.                       "
125 FEXTRP=DMAX1(PREVER/ERRER,AITLOW);
PREVER=ERRER;
IF(L.LT.5) GO TO 15;
IF(L-IT.GT.2.AND.ISTAGE.LT.MXSTGE) GO TO 170;
ERRET=ERRER/(FEXTRP**(MAXTBL-L));
IF(ERRET.GT.ERGOAL.AND.(ERGL+ERRET).NE.ERGL) GO TO 170;
GO TO 15;
"                              INTEGRAND HAS JUMP (SEE NOTES)      "
130 IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 170;
"                                NOTE THAT  2*FN=2**L              "
DIFF=DABS(T(1,L))*(FN+FN);
GO TO 160;
"                              INTEGRAND IS STRAIGHT LINE          "
"                                TEST THIS ASSUMPTION BY COMPARING "
"                                THE VALUE OF THE INTEGRAND AT     "
"                                FOUR *RANDOMLY CHOSEN* POINTS WITH"
"                                THE VALUE OF THE STRAIGHT LINE    "
"                                INTERPOLATING THE INTEGRAND AT THE"
"                                TWO END POINTS OF THE SUB-INTERVAL"
"                                IF TEST IS PASSED, ACCEPT *VINT*  "
135 SLOPE=(FEND-FBEG)*TWO;
FBEG2=FBEG+FBEG;
DO 140 I=1,4;

"CHANGED"
"DIFF=DABS(F(BEG+RN(I)*STEP) - FBEG2-RN(I)*SLOPE);"
"TO"
"RVAL=BEG+RN(I)*STEP;DIFF=DABS(F(RVAL) - FBEG2-RN(I)*SLOPE);"
"FOR SUN AFB 89/12/27"

RVAL=BEG+RN(I)*STEP;DIFF=DABS(F(RVAL) - FBEG2-RN(I)*SLOPE);

IF(TABTLM+DIFF.NE.TABTLM) GO TO 155;
140 CONTINUE;
GO TO 160;
"                              NOISE MAY BE DOMINANT FEATURE       "
"                                ESTIMATE NOISE LEVEL BY COMPARING "
"                                THE VALUE OF THE INTEGRAND AT     "
"                                FOUR *RANDOMLY CHOSEN* POINTS WITH"
"                                THE VALUE OF THE STRAIGHT LINE    "
"                                INTERPOLATING THE INTEGRAND AT THE"
"                                TWO ENDPOINTS. IF SMALL ENOUGH,   "
"                                ACCEPT *VINT*                     "
145 SLOPE=(FEND-FBEG)*TWO;
FBEG2=FBEG+FBEG;
I=1;

"CHANGED"
"150 DIFF=DABS(F(BEG+RN(I)*STEP) - FBEG2-RN(I)*SLOPE);"
"TO"
"150 RVAL=BEG+RN(I)*STEP;DIFF=DABS(F(RVAL) - FBEG2-RN(I)*SLOPE);"
"FOR SUN AFB 89/12/27"

150 RVAL=BEG+RN(I)*STEP;DIFF=DABS(F(RVAL) - FBEG2-RN(I)*SLOPE);

155 ERRER=DMAX1(ERRER,ASTEP*DIFF);
IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175;
I=I+1;
IF(I.LE.4) GO TO 150;
IER=66;
"                              INTERGRATION OVER CURRENT SUB-      "
"                                INTERVAL SUCCESSFUL               "
"                                ADD *VINT* TO *DCADRE* AND *ERRER*"
"                                TO *ERROR*, THEN SET UP NEXT SUB- "
"                                INTERVAL, IF ANY.                 "
160 CADRE=CADRE + VINT;
ERROR=ERROR + ERRER;
IF(RIGHT) GO TO 165;
ISTAGE=ISTAGE - 1;
IF(ISTAGE.EQ.0) GO TO 220;
REGLAR=REGLSV(ISTAGE);
BEG=BEGIN(ISTAGE);
END=FINIS(ISTAGE);
CUREST=CUREST - EST(ISTAGE+1) + VINT;
IEND=IBEG - 1;
FEND=TS(IEND);
IBEG=IBEGS(ISTAGE);
GO TO 180;
165 CUREST=CUREST + VINT;
STAGE=STAGE+STAGE;
IEND=IBEG;
IBEG=IBEGS(ISTAGE);
END=BEG;
BEG=BEGIN(ISTAGE);
FEND=FBEG;
FBEG=TS(IBEG);
GO TO 5;
"                              INTEGRATION OVER CURRENT SUBINTERVAL"
"                                IS UNSUCCESSFUL. MARK SUBINTERVAL "
"                                FOR FURTHER SUBDIVISION. SET UP   "
"                                NEXT SUBINTERVAL.                 "
170 REGLAR=.TRUE.;
175 IF(ISTAGE.EQ.MXSTGE) GO TO 205;
IF(RIGHT) GO TO 185;
REGLSV(ISTAGE+1)=REGLAR;
BEGIN(ISTAGE)=BEG;
IBEGS(ISTAGE)=IBEG;
STAGE=STAGE*HALF;
180 RIGHT=.TRUE.;
BEG=(BEG+END)*HALF;
IBEG=(IBEG+IEND)/2;
TS(IBEG)=TS(IBEG)*HALF;
FBEG=TS(IBEG);
GO TO 10;
185 NNLEFT=IBEG - IBEGS(ISTAGE);
IF(IEND+NNLEFT.GE.MAXTS) GO TO 200;
III=IBEGS(ISTAGE);
II=IEND;
DO 190 I=III,IBEG;
II=II + 1;
TS(II)=TS(I);
190 CONTINUE;
DO 195 I=IBEG,II;
TS(III)=TS(I);
III=III + 1;
195 CONTINUE;
IEND=IEND + 1;
IBEG=IEND - NNLEFT;
FEND=FBEG;
FBEG=TS(IBEG);
FINIS(ISTAGE)=END;
END=BEG;
BEG=BEGIN(ISTAGE);
BEGIN(ISTAGE)=END;
REGLSV(ISTAGE)=REGLAR;
ISTAGE=ISTAGE + 1;
REGLAR=REGLSV(ISTAGE);
EST(ISTAGE)=VINT;
CUREST=CUREST + EST(ISTAGE);
GO TO 5;
"                              FAILURE TO HANDLE GIVEN INTEGRA-    "
"                                TION PROBLEM                      "
200 IER=131;
GO TO 215;
205 IER=132;
GO TO 215;
210 IER=133;
215 CADRE=CUREST + VINT;
220 DCADRE=CADRE;
9000 CONTINUE;
9005 RETURN;
END;  "END OF FUNCTION DCADRE"
%E  "PEGS4 MORTRAN (Page Eject Control)"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION EBIND(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***FUNCTION TO GET AN AVERAGE PHOTOELECTRIC BINDING ENERGY.         "
;
implicit none;
$REAL E;
$INTEGER I,J;
$REAL    PHOTTZ,STOT,PHOTTE;

COMIN/MIXDAT,PHPAIR/;
EBIND=0.0;
DO I=1,NE [J=Z(I);EBIND=EBIND+PZ(I)*PHOTTZ(Z(I),E)*EKEDGE(J)*0.001;]
STOT=PHOTTE(E);
IF (STOT.NE.0.0)EBIND=EBIND/STOT;
RETURN;
END; "END OF FUNCTION EBIND"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION EBR1(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BRANCHING RATIO BREMS/(BREMS+MOLLER)                             "
implicit none;
$REAL E,BREMTM,BREM,TEBR,AMOLTM;
BREM=BREMTM(E);
TEBR=BREM+AMOLTM(E);
IF (TEBR.GT.0.0) [EBR1=BREM/TEBR;]
ELSE [EBR1=0.0;]
RETURN;
END;   "END OF FUNCTION EBR1"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION EDEDX(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***ELECTRON ENERGY LOST IN EDIST(2)                                 "
;
implicit none;
$REAL E,SPTOTE;
COMIN/THRESH/;
EDEDX=SPTOTE(E,AE,AP);
RETURN;
END;  "END OF FUNCTION EDEDX"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ESIG(E);  "ELECTRON(-) CROSS SECTION(1/RL)"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E,BREMTM,AMOLTM;
ESIG=BREMTM(E)+AMOLTM(E);
RETURN;
END;  "END OF FUNCTION ESIG"
%E  "PEGS4 MORTRAN (Page Eject Control)"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION FCOULC(Z);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"EVALUATES EQUATION 2.7.17 OF SLAC-265"

;
implicit none;
$REAL Z,ASQ;
COMIN/DERCON/;
ASQ=(FSC*Z)**2;
FCOULC = ASQ*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+
 ASQ*(0.0083+ASQ*(-0.002))));
RETURN;
END;  "END OF FUNCTION FCOULC"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION FI(I,X1,X2,X3,X4);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"implicit none;"
"$INTEGER I;"
"$REAL    X1,X2,X3,X4;"
"***FUNCTION MULTIPLEXER                                             "
"THIS IS MADE MUCH NICER BY THE MACRO CALL $FUNCTION #;"
GO TO($FLIST$FNUMS),I;
$FLIST$FCALLS
END;  "END OF FUNCTION FI"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION GBR1(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BRANCHING RATIO PAIR/(PAIR+COMPTON+PHOTO)                        "
implicit none;
$REAL E,PAIR,PAIRTU,COMPTM,PHOTTE;
PAIR=PAIRTU(E);
GBR1=PAIR/(PAIR+COMPTM(E)+PHOTTE(E));
RETURN;
END; "END OF FUNCTION GBR1"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION GBR2(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BRANCHING RATIO (PAIR+COMPTON)/(PAIR+COMPTON+PHOTO)              "
implicit none;
$REAL E,PRCO,PAIRTU,COMPTM,PHOTTE;
PRCO=PAIRTU(E)+COMPTM(E);
GBR2=PRCO/(PRCO+PHOTTE(E));
RETURN;
END; "END OF FUNCTION GBR2"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION GMFP(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***GAMMA MEAN FREE PATH                                             "
implicit none;
$REAL E,PAIRTU,COMPTM,PHOTTE;
GMFP=1.0/(PAIRTU(E)+COMPTM(E)+PHOTTE(E));
RETURN;
END;  "END OF FUNCTION GMFP"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$INTEGER FUNCTION IFUNT(NAME);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$INTEGER I,J;
$TYPE NAME(6);
COMIN/FUNCS/;
:FUN: DO I=1,NFUNS [ DO J=1,6 [
IF (NAME(J).NE.FNAME(J,I))NEXT:FUN:;]
IFUNT=I; RETURN; "NAME MATCHES"       ]
IFUNT=-1; OUTPUT NAME;(' FUNC=',6A1,' NOT MATCHED');
RETURN;
END;  "END OF FUNCTION IFUNT"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
LOGICAL FUNCTION QFIT(NJ,XL,XH,XR,EP,ZTHR,ZEP,REM,NJP,XFUN,XFI,
 AX,BX,NALM,NFUN,AF,BF,VFUNS,IPRN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
"EXTERNAL XFUN,XFI,VFUNS;"
EXTERNAL VFUNS;
$REAL    XFUN,XFI;
$INTEGER NJ,NALM,NFUN,NJP,IPRN;
$REAL    XL,XH,XR,AX,BX,REM,EP;
$REAL FSXL(10),FSXH(10),FIP(10),FFIP(10),AFIP(10),RE(10),AER(10);
$REAL AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN);
"     CONSTRUCT THE INTERVAL COEFFICIENTS.                             "
"     XR SHOULD BE IN THE INTERVAL (XL,XH).  IF NOT IT WILL BE SE TO TH"
"     NEAREST LIMIT.  SUBINTERVALS WILL BE ARRANGED SO                 "
"     THAT XR IS ALWAYS ON A SUBINTERVAL BOUNDARY.   THE PURPOSE OF THI"
"     FEATURE IS TO MORE EASILY FIT FUNCTIONS WHICH HAVE AN INTERIOR   "
"     DISCONTINUITY IN SLOPE.  EXAMPLES ARE THE MOLLER AND PAIR        "
"     CROSS SECTIONS WHICH CONTRIBUTE DISCONTINUITIES IN SLOPE         "
"     TO THE ELECTRON AND PHOTON INTERACTION PROBABILITIES IN          "
"     THE INTERIOR OF THE ENERGY RANGES FOR THESE PARTICLES.           "
"     IN ABLE TO GIVE SOME VALUE FOR X'S WHICH MAY LIE SLIGHTLY OUTSIDE"
"     THE INTERVAL (XL,XH) AN EXTRA SUBINTERVAL ON EACH SIDE OF (XL,XH)"
"     IS PROVIDED, WHICH USED THE SAME STRAIGHT LINES AS THE ADJACENT  "
"     INCLUDED SUBINTERVAL.  NJ IS THE TOTAL NUMBER OF SUBINTERVALS    "
"     AND NI IS DEFINED TO BE THE NUMBER OF INTERNAL SUBINTERVALS=NJ-2."
"     NJP IS THE MINUMUM NUMBER OF POINTS INTERIOR TO THE INTERVAL     "
"     (XL,XH) AT WHICH THE FIT IS TO BE TESTED.  A NUMBER NIP WILL BE  "
"     CHOSEN AS THE NUMBER OF INTERIOR POINTS WITHIN EACH SUBINTERVAL  "
"     AT WHICH TO TEST SO THAT NIP*NI]=NJP.                        "
$REAL    XS,XFL,XFH,XFS,XM,DX,W,XLL,SXFL,XSXF,SXFH,DSXF,WIP,
         SXFIP,XIP;
$INTEGER NI,NIP,ISUB,IFUN,JSUB,IP;
$INTEGER nkp;
DATA NKP/3/;
save nkp;
IF (XH.LE.XL)[
OUTPUT XL,XH;(' QFIT ERROR:XL SHOULD BE < XH. XL,XH=',2G14.6);
QFIT=.FALSE.; RETURN;]
XS=AMAX1(XL,AMIN1(XH,XR));
"     GET NUMBER OF INTERNAL SUBINTERVALS ARE ALLOWED AND CHECK        "
NI=NJ-2;
"     AT LEAST 2 SUBINTERVALS ARE NEEDED IF XR(XS) IS NOT AN END POINT."
IF (((XS.EQ.XL.OR.XS.EQ.XH).AND.NI.GE.1).OR.NI.GE.2) [XFL=XFUN(XL);]
ELSE [QFIT=.FALSE.; RETURN;]
XFH=XFUN(XH);
XFS=XFUN(XS);
"     SET SUBINTERVAL WIDTH.                                           "
XM=AMAX1(XFH-XFS,XFS-XFL);
DX=XFH-XFL;
W=XM/AMAX1(1.,AINT(NI*XM/DX));
"     RESET NI TO HOW MANY WE'RE ACTUALLY GOING TO USE.                "
NI=NI-AINT(NI-DX/W);
"     COMPUTE HOW MANY INTERIOR POINTS TO SAMPLE IN EACH SUBINTERVAL.  "
NIP=MAX0(NKP,(NJP+NI-1)/NI);
"     MAKE NIP ODD                                                     "
NIP=(NIP/2)*2+1;
"     SET ACTUAL LOWER LIMIT OF INTERVAL.                              "
IF (XFH-XFS.LE.XFS-XFL) [XLL=XFL;]
ELSE [XLL=XFH-NI*W;]
"     COEFICIENTS FOR USER TO COMPUTE WHICH SUBINTERVAL TO USE.        "
"     ISUBINT=AX*XFUN(X)+BX                                            "
AX=1./W;
BX=2.-XLL*AX;
"     THE RIGHT BOUNDARY OF SUBINTERVAL I IS XFI(XLL+W*(I-1))          "
"     NOW COMPUTE THE FIT COEFFICIENTS FOR THE SUBINTERVALS            "
"     AND FIND MAXIMUM RELATIVE ERROR(REM).                            "
REM=0.0;
QFIT=.TRUE.;
"     LOOP OVER SUBINTERVALS                                           "
"     INITIALIZE LOWER BOUNDARY AND VALUE.                             "
SXFL=AMAX1(XLL,XFL);
ISUB=0;
XSXF=XFI(SXFL);
CALL VFUNS(XSXF,FSXL);
IF (IPRN.NE.0) WRITE(6,:FMT:) ISUB,SXFL,XSXF,(FSXL(IFUN),IFUN=1,NFUN);
:FMT: FORMAT(' QFIT:ISUB,SXF,XSXF,FSX()=',I4,1P,9G11.4/(1X,12G11.4));
DO ISUB=1,NI[
"     ALLOW FOR EXTRA SUBINTERVAL OUTSIDE THE MAIN INTERVAL            "
JSUB=ISUB+1;
SXFH=AMIN1(XLL+W*ISUB,XH);
XSXF=XFI(SXFH);
CALL VFUNS(XSXF,FSXH);
IF (IPRN.NE.0)WRITE(6,:FMT:)ISUB,SXFH,XSXF,(FSXH(IFUN),IFUN=1,NFUN);
DSXF=SXFH-SXFL;
DO IFUN=1,NFUN[
AF(JSUB,IFUN)=(FSXH(IFUN)-FSXL(IFUN))/DSXF;
BF(JSUB,IFUN)=(FSXL(IFUN)*SXFH-FSXH(IFUN)*SXFL)/DSXF;] "END OF IFUN"
"     LOOP OVER INTERIOR POINTS TO LOOK FOR MAX. REL.ERROR             "
"     COMPUTE INTERIOR POINT SPACING.                                  "
WIP=DSXF/(NIP+1);
DO IP=1,NIP[
"     VALUE OF XFUN AT THE INTERIOR POINT OF THIS SUBINTERVAL.         "
SXFIP=SXFL+IP*WIP;
XIP=XFI(SXFIP);
"     COMPUTE FUNCTION AT INTERIOR POINT                               "
CALL VFUNS(XIP,FIP);
"     COMPUTE FITTED VALUES.                                           "
DO IFUN=1,NFUN[
FFIP(IFUN)=AF(JSUB,IFUN)*SXFIP+BF(JSUB,IFUN);
AFIP(IFUN)=ABS(FIP(IFUN));
AER(IFUN)=ABS(FFIP(IFUN)-FIP(IFUN));
RE(IFUN)=0.0;
IF (FIP(IFUN).NE.0.0) [RE(IFUN)=AER(IFUN)/AFIP(IFUN);]
IF (AFIP(IFUN).GE.ZTHR(IFUN)) [REM=AMAX1(REM,RE(IFUN));]
ELSEIF (AER(IFUN).GT.ZEP(IFUN)) [QFIT=.FALSE.;]
] "END OF IFUN"
"*****WRITE OUT SO WE CAN SEE HOW WE ARE DOING.                        "
IF (IPRN.NE.0) [
OUTPUT ISUB,IP,SXFIP,XIP,REM,QFIT,(FIP(IFUN),FFIP(IFUN),
 RE(IFUN),AER(IFUN),IFUN=1,NFUN);
(1X,2I4,1P,2G12.5,6P,F12.0,L2,1P,2G11.4,6P,F11.0,1P,G11.4/
 (1X,3(1P,2G11.4,6P,F11.0,1P,G11.4)));]
] "END OF IP"
"     SAVE RIGHT BOUNDARY AND VALUE FOR NEXT SUBINTERVAL.              "
SXFL=SXFH;
DO IFUN=1,NFUN [FSXL(IFUN)=FSXH(IFUN);]
] "END OF ISUB"
"     SET UP SKIRTING SUBINTERVALS(VIA EXTRAPOLATION)                  "
DO IFUN=1,NFUN[
AF(1,IFUN)=AF(2,IFUN);
BF(1,IFUN)=BF(2,IFUN);
AF(NI+2,IFUN)=AF(NI+1,IFUN);
BF(NI+2,IFUN)=BF(NI+1,IFUN);] "END OF IFUN"
QFIT=QFIT.AND.REM.LE.EP;
NJ=NI+2; "TELL ACTUAL NO. OF SUBINTERVALS USED."
RETURN;
END; "END OF LOGICAL FUNCTION QFIT"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRDR(KA,E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***RUN TIME PAIR D-SIGMA/D-EMINUS                                   "

"EVALUATES EQUATION 2.7.109 OF SLAC-265"
;
implicit none;
$REAL KA,E,PAIRFR;
$INTEGER LS;
COMIN/LPAIRR/;
K=KA;
IF (K.LT.50.) [LE=1; LS=0;]
ELSE [LE=2;LS=3;]
LA=LS+1;
LC=LS+3;
PAIRDR=PAIRFR(E);
RETURN;
END;  "END OF FUNCTION PAIRDR"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRDZ(Z,KA,E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***ALL ENTRIES TO THIS FUNCTION GIVE THE CONTRIBUTION THAT ELEMENT Z"
"   WOULD HAVE IF THERE WERE ONE PER MOLECULE.                      "
"   ENTRIES STARTING WITH D DO THEIR OWN INITIALIZATION.             "
"   ENTRIES STARTING WITH F RELY ON PREVIOUS D FOR INITIALIZATION.   "

"EVALUATES EQUATION 2.7.8 OF SLAC-265"
;
implicit none;
$REAL Z,KA,E;
$REAL XSIF,FCOULC,PAIRFZ;
COMIN/PMCONS,DERCON,MOLVAR,LPAIRZ/;
K=KA;
DELC=136.*Z**(-1./3.)*RM/K;
CONST=(AN*RHO/WM)*R0**2*FSC*Z*(Z+XSIF(Z))*RLC/K**3;
XLNZ=4./3.*ALOG(Z);
IF (K.GE.50)XLNZ=XLNZ+4.*FCOULC(Z);
".....DELTAM IS THE DELTA AT WHICH THE SQUARE BRACKETS GO TO ZERO      "
DELTAM=EXP((21.12-XLNZ)/4.184)-0.952;
PAIRDZ=PAIRFZ(E);
RETURN;
END;  "END OF FUNCTION PAIRDZ"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRFR(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E;
$REAL EPS,DEL,DELTA,A,CC;
COMIN/BREMPR,DBRPR,LPAIRR/;
EPS=E/K;
DEL=1./(K*EPS*(1.-EPS));
IF (DEL.GT.DELPOS(LE)) [PAIRFR=0.0; ]
ELSE [DELTA=DELCM*DEL;
IF (DELTA.LE.1.)[
A=DL1(LA)+DELTA*(DL2(LA)+DELTA*DL3(LA));
CC=DL1(LC)+DELTA*(DL2(LC)+DELTA*DL3(LC));]
ELSE [A=DL4(LA)+DL5(LA)*ALOG(DELTA+DL6(LA));
CC=DL4(LC)+DL5(LC)*ALOG(DELTA+DL6(LC));]
PAIRFR=(ALFP1(LE)*CC+ALFP2(LE)*12.*(E/K-0.5)**2*A)/K; ]
RETURN;
END; "END OF FUNCTION PAIRFR"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRFZ(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E;
$REAL EPS,ONEEPS,DELTA,SB1,SB2,EPLUS;
COMIN/LPAIRZ/;
EPS=E/K;
ONEEPS=1.-EPS;

"CHANGED"
"IF(ONEEPS.EQ.0.0) [ONEEPS=1.E-38;]"
"TO"
"IF(ONEEPS.EQ.0.0) [ONEEPS=1.18E-38;]"
"FOR SUN AFB 89/12/27"

IF(ONEEPS.EQ.0.0) [ONEEPS=1.18E-38;]

DELTA=DELC/(EPS*ONEEPS);
IF (DELTA.GE.DELTAM) [PAIRFZ=0.0; ]
ELSE [IF (DELTA.LE.1.)[
SB1=20.867+DELTA*(-3.242+DELTA*0.625)-XLNZ;
SB2=20.209+DELTA*(-1.930+DELTA*(-0.086))-XLNZ;]
ELSE [SB1=21.12-4.184*ALOG(DELTA+0.952)-XLNZ;
SB2=SB1;]
EPLUS=K-E;
PAIRFZ=CONST*((E**2+EPLUS**2)*SB1+0.666667*E*EPLUS*SB2 );]
RETURN;
END;  "END OF FUNCTION PAIRFZ"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRRM(K,E1,E2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K,E1,E2,PAIRRZ;
$INTEGER I;
COMIN/MIXDAT/;
PAIRRM=0.;
DO I=1,NE [PAIRRM=PAIRRM+PZ(I)*PAIRRZ(Z(I),K,E1,E2);]
RETURN;
END;  "END OF FUNCTION PAIRRM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRRR(K,E1,E2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL K,E1,E2;
EXTERNAL PAIRFR;
$REAL DUMMY,PAIRDR,QD;
"     INITIALIZE PAIRFR                                                "

"    CHANGED"

"    CALL PAIRDR(K,E1);"

"    TO"

"    DUMMY=PAIRDR(K,E1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"

DUMMY=PAIRDR(K,E1);

PAIRRR=QD(PAIRFR,E1,E2,'PAIRFR');
RETURN;
END;  "END OF FUNCTION PAIRRR"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRRZ(Z,K,E1,E2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL Z,K,E1,E2;
$REAL DUMMY,PAIRDZ,QD;
EXTERNAL PAIRFZ;
"     INITIALIZE PAIRFZ                                                "

"    CHANGED"

"    CALL PAIRDZ(Z,K,E1);"

"    TO"

"    DUMMY=PAIRDZ(Z,K,E1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"

DUMMY=PAIRDZ(Z,K,E1);

PAIRRZ=QD(PAIRFZ,E1,E2,'PAIRFZ');
RETURN;
END;   "END OF FUNCTION PAIRRZ"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRTE(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***'E' FOR EMPIRICAL OR EXPERIMENTAL PAIR PROD CROSS-SECTION.       "
"   THIS FUNCTION GIVE THE PROPER MIX OF PAIRTZ'S.                   "
;
implicit none;
$REAL K,PAIRTZ;
$INTEGER I;
COMIN/DERCON,MIXDAT/;
PAIRTE=0.0;
IF (K.LE.2.0*RM)RETURN;
DO I=1,NE [PAIRTE=PAIRTE+PZ(I)*PAIRTZ(Z(I),K);]
RETURN;
END;  "END OF FUNCTION PAIRTE"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRTM(K0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K0,PAIRRM;
COMIN/DERCON/;
IF (K0.LE.2.*RM) [PAIRTM=0.0; ]
ELSE [PAIRTM=PAIRRM(K0,RM,K0-RM);]
RETURN;
END;  "END OF FUNCTION PAIRTM"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRTR(K0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL K0,PAIRRR;
COMIN/DERCON/;
IF (K0.LE.2.*RM) [PAIRTR=0.0; ]
ELSE [PAIRTR=PAIRRR(K0,RM,K0-RM);]
RETURN;
END;  "END OF FUNCTION PAIRTR"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRTU(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***THIS IS THE TOTAL PAIR ROUTINE ACTUALLY USED FOR RUNNING.        "
"   IT IS THE EMPIRICAL ROUTINE BELOW 50MEV AND THE THEORETICAL ABOVE"
implicit none;
$REAL K,PAIRTE,PAIRTM;
IF (K.LT.50) [PAIRTU=PAIRTE(K); ]
ELSE [PAIRTU=PAIRTM(K);]
RETURN;
END;  "END OF FUNCTION PAIRTU"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PAIRTZ(Z,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***FUNCTION TO GIVE INTERPOLATED TOTAL PAIR PROD CROSS-SECTION      "
"   FROM TABULATED DATA USING LOG-LOG INTERPOLATION.                 "
"   THIS CROSS-SECTION WILL BE THE CONTRIBUTION THIS Z ELEMENT       "
"   WOULD MAKE IF THERE WERE ONE/MOLECULE,I.E., TO GET THE ACTUAL    "
"   CONTRIBUTION ONE MUST MULTIPLY BY PZ(I).                         "
;
implicit none;
$REAL Z,K;
$REAL PCON,AINTP;
$INTEGER IZ;
COMIN/DERCON/;
"     COMMON WITH DATA FOR PHOTO AND PAIR.                             "
COMIN/PHPAIR,PMCONS,MOLVAR/;
"     PCON CONVERTS CROSS SECTION IN BARNS TO CROSS SECTION IN RLC**-1 "
IF (K.LE.RMT2) [PAIRTZ=0.0; ]
ELSE [PCON=1.E-24*(AN*RHO/WM)*RLC;
IZ=Z;
PAIRTZ=PCON*AINTP(K,PRE,17,PRD(1,IZ),1,.TRUE.,.FALSE.);]
RETURN;
END;  "END OF FUNCTION PAIRTZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PBR1(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BRANCHING RATIO BREMS/(BREMS+BHABHA+ANNIHILATION)                "
implicit none;
$REAL E,BREM,BREMTM,BHABTM,ANIHTM;
BREM=BREMTM(E);
PBR1=BREM/(BREM+BHABTM(E)+ANIHTM(E));
RETURN;
END;  "END OF FUNCTION PBR1"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PBR2(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BRANCHING RATIO (BREMS+BHABHA)/(BREMS+BHABHA+ANNIHILATION)       "
implicit none;
$REAL E,BRBH,BREMTM,BHABTM,ANIHTM;
BRBH=BREMTM(E)+BHABTM(E);
PBR2=BRBH/(BRBH+ANIHTM(E));
RETURN;
END;  "END OF FUNCTION PBR2"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PDEDX(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***POSITRON ENERGY LOSS IN EDIST(2)                                 "
;
implicit none;
$REAL E,SPTOTP;
COMIN/THRESH/;
PDEDX=SPTOTP(E,AE,AP);
RETURN;
END;   "END OF FUNCTION PDEDX"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PHOTTE(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***'E' FOR EMPIRICAL OR EXPERIMENTAL PHOTOEFFECT CROSS-SECTION.     "
"   THIS FUNCTION GIVE THE PROPER MIX OF PHOTTZ'S.                   "
;
implicit none;
$REAL K,PHOTTZ;
$INTEGER I;
COMIN/MIXDAT/;
PHOTTE=0.0;
DO I=1,NE[PHOTTE=PHOTTE+PZ(I)*PHOTTZ(Z(I),K);]
RETURN;
END;   "END OF FUNCTION PHOTTE"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PHOTTZ(Z,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***FUNCTION TO GIVE INTERPOLATED TOTAL PHOTO EFFECT CROSS-SECTION   "
"   FROM TABULATED DATA USING LOG-LOG INTERPOLATION.                 "
"   THIS CROSS-SECTION WILL BE THE CONTRIBUTION THIS Z ELEMENT       "
"   WOULD MAKE IF THERE WERE ONE/MOLECULE,I.E., TO GET THE ACTUAL    "
"   CONTRIBUTION ONE MUST MULTIPLY BY PZ(I).                         "
"   COMMON WITH DATA FOR PHOTO AND PAIR.                             "
;
implicit none;
$REAL Z,K,PCON,AINTP;
$INTEGER IZ;
COMIN/PHPAIR,PMCONS,MOLVAR/;
"     PCON CONVERTS CROSS SECTION IN BARNS TO CROSS SECTION IN RLC**-1 "
PCON=1.E-24*(AN*RHO/WM)*RLC;
IZ=Z;
PHOTTZ=PCON*AINTP(K,PHE(1,IZ),NPHE(IZ),PHD(1,IZ),1,.TRUE.,.TRUE.);
RETURN;
END;  "END OF FUNCTION PHOTTZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION PSIG(E); "POSITRON CROSS SECTION(1/RL)"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E,BREMTM,BHABTM,ANIHTM;
PSIG=BREMTM(E)+BHABTM(E)+ANIHTM(E);
RETURN;
END;   "END OF FUNCTION PSIG"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION QD(F,A,B,MSG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
;COMIN/FileNames/;
" QD appears to be the only place where it is being written to unit 10"
EXTERNAL F;
"$REAL    F;"
$REAL    A,B;
CHARACTER*6 MSG;
logical first_time;
data first_time/.true./;
save first_time;

"    CHANGED"

"    REAL*8 DCADRE,ADUM,BDUM,ERRDUM,MSG;"

"    TO"

"    DOUBLE PRECISION DCADRE,ADUM,BDUM,ERRDUM;"
"    CHARACTER*6 MSG;"

"    FOR SUN COMPATIBILITY AFB 89/12/27"

DOUBLE PRECISION DCADRE,ADUM,BDUM,ERRDUM;
$INTEGER IER;

ADUM=A; BDUM=B;
QD=DCADRE(F,ADUM,BDUM,$AERR,$RERR,ERRDUM,IER);
IF (IER.GT.66)[
    IF( first_time ) [
        first_time = .false.;
        output_file(lenfn-7:lenfn) = 'pegs4err';
        open(10,file=output_file,status='unknown');
    ]
    $UOUTPUT(10) IER,MSG,A,B,QD,ERRDUM;
    (' DCADRE CODE=',I4,' FOR INTEGRAL ',A6,' FROM ',1P,G14.6,' TO ',G14.6,
    ',QD=',G14.6,'+-',G14.6);
]
RETURN;
END;  "END OF FUNCTION QD"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION SPIONB(E0,EE,POSITR);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***STOPPING POWER FOR AN ELECTRON.  THIS FUNCTION ALSO HAS OTHER    "
"   ENTRY POINTS. . .                                                "
"   SPIONP(E0,EE) - STOPPING POWER FOR A POSITRON                    "
"   SPINIT(MEDIUM) - DOES INITIALIZATION FOR THE OTHER ENTRY POINTS  "
"   WHENEVER THE MEDIUM CHANGES.                                     "
"   THIS FUNCTION IS FOR STOPPING POWER DUE TO COLLISIONS WITH LESS  "
"   THAN EE-RM ENERGY TRANSFER AND DOES NOT INCLUDE SOFT BREMS LOSS. "
"   WE USE BERGER AND SELTZER'S FORMULATION.                         "
"   STOPPING POWER IS RETURNED IN UNITS OF MEV/R.L.                  "
;
implicit none;
$REAL   E0,EE;
LOGICAL POSITR;
$REAL   G,EEM,T,ETA2,BETA2,ALETA2,X,D,FTERM,TP2,D2,D3,D4,DELTA;
$INTEGER I;
COMIN/DERCON,LSPION,EPSTAR/; "MOD NOV 24,1988"
"     COMMON POINT FOR E- AND E+ ENTRIES.                              "
G=E0/RM;
EEM=EE/RM-1.;
"     T IS BERGER'S TAU                                                "
T=G-1;
ETA2=T*(G+1.);
BETA2=ETA2/G**2;
ALETA2=ALOG(ETA2);
X=0.21715*ALETA2;
"     0.21715=ALOG10(E)/2.   THIS FACTOR IS BECAUSE THE DEFINITION OF  "
"     X IS ALOG10(P/(MC)) AND ETA2=ETA**2=(P/MC)**2                    "
IF (.NOT.POSITR)["THIS IS ELECTRON CASE"
"     COMPUTE F-TERM FOR ELECTRON.  MAXIMUM TRANSFER IS T/2            "
"     D IS BERGER'S CAPITOL DELTA.                                     "
D=AMIN1(EEM,0.5*T);
"     EEM IS DEFINED AS EE/RM-1 IS ENERGY TRANSFER THRESHOLD FOR       "
"     DISCRETE MOLLER AND BHABHA SCATTERING(IN UNITS OF RM.)           "
FTERM=-1.-BETA2+ALOG((T-D)*D)+T/(T-D)
  +(D*D/2.+(2.*T+1.)*ALOG(1.-D/T))/(G*G);]
"     COMPUTE F-TERM FOR POSITRON.  MAXIMUM TRANSFER IS T.             "
ELSE ["THIS IS POSITRON CASE"
D=AMIN1(EEM,T);
TP2=T+2.;
D2=D*D;
D3=D*D2;
D4=D*D3;
FTERM=ALOG(T*D)-(BETA2/T)*( T + 2.*D - (3.*D2/2.)/TP2
 -(D-D3/3.)/(TP2*TP2)-(D2/2.-T*D3/3.+D4/4.)/TP2**3);]

"     NOW COMPUTE THE DENSITY CORRECTION TERM.                         "

IF(EPSTFL = 0) ["USE STANDARD PEGS4 METHOD"
IF (X.LE.X0) [DELTA=0.0;]
ELSEIF (X.LT.X1) [DELTA=TOLN10*X - CBAR + AFACT*(X1 - X)**SK;]
ELSE [DELTA=TOLN10*X - CBAR;]]

ELSE ["USE LINEAR INTERPOLATION OF USER SUPPLIED INPUT TABLE"

"IEPST IS A POINTER SUCH THAT                              "
"       EPSTEN(IEPST) <= E0 < EPSTEN(IEPST+1)              "
"                                                          "
"IEPST IS INITIALIZED IN BLOCK DATA TO 1. WE START FROM    "
"THE PREVIOUS VALUE OF THE POINTER SINCE WE ASSUME THAT    "
"THE CODE IS WORKING UP OR DOWN A GRID.                    "
"  THIS CODING IS FAR FROM OPTIMAL                         "

IF(E0 >= EPSTEN(IEPST))["AT OR ABOVE PREVIOUS ENTRY"
IF(E0 = EPSTEN(IEPST))["FOUND ENTRY, INCLUDING THE POSSIBILITY"
"THAT WE ARE AT THE TOP OF THE TABLE"     GO TO :END-SEARCH:;]

DO I= IEPST,NEPST-1 [
     IF(E0<EPSTEN(I+1))["WE FOUND IT" IEPST = I; GO TO :END-SEARCH:]
     ]
"IF WE FALL THRU TO HERE, WE MUST BE AT UPPER ENERGY"
IEPST = NEPST; GO TO :END-SEARCH:;
]"END OF BLOCK E0>EPSTEN(IEPST)"

ELSE [ "E0<EPSTEN(IEPST)"

DO I = IEPST,2,-1 [
    IF(E0 >= EPSTEN(I-1)) [IEPST = I-1; GO TO :END-SEARCH:;]
    ]
"   IF WE GET HERE WE MUST BE IN THE FIRST REGION"
    IEPST = 1;]

:END-SEARCH:

"NOW JUST INTERPOLATE LINEARLY IN THE ENERGY"
IF(IEPST < NEPST) [
   DELTA = EPSTD(IEPST) + (E0 - EPSTEN(IEPST))/
   (EPSTEN(IEPST+1) - EPSTEN(IEPST)) * (EPSTD(IEPST+1) - EPSTD(IEPST));]
ELSE [DELTA = EPSTD(NEPST);]

]"END OF EPSTFL NON-ZERO BLOCK"

"     NOW PUT IT ALL TOGETHER                                          "
SPIONB=(SPC1/BETA2)*(ALOG(T + 2.) - SPC2 + FTERM - DELTA);
RETURN;
END;  "END OF FUNCTION SPIONB"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION SPIONE(E0,EE);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E0,EE,SPIONB;
SPIONE=SPIONB(E0,EE,.FALSE.);
RETURN;
END;  "END OF FUNCTION SPIONE"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION SPIONP(E0,EE);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E0,EE,SPIONB;
SPIONP=SPIONB(E0,EE,.TRUE.);
RETURN;
END;  "END OF FUNCTION SPIONP"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION SPTOTE(E0,EE,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
" patched DWOR, Jan 1988 to correct IURST=2,3,4 and add 6 and 7    "
"******************************************************************"
;
implicit none;
$REAL E0,EE,EG;
$REAL SPIONE,BRMSTM;
COMIN/THRESH/;
IF (IUNRST.EQ.0) ["RESTRICTED TOTAL STOPPING POWER I.E. NORMAL"
                  SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,EG);]
ELSEIF(IUNRST.EQ.1)[SPTOTE=SPIONE(E0,E0);]"UNRESTRICTED COLLISION"
ELSEIF(IUNRST.EQ.2)["UNRESTRICTED COLLISION AND RADIATIVE        "
                    SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,E0);]
ELSEIF(IUNRST.EQ.3)["UNRESTRICTED COLLISION +RESTRICTED RADIATIVE"
                    SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,EG);]
ELSEIF(IUNRST.EQ.4)["RESTRICTED COLLISION +UNRESTRICTED RADIATIVE"
                    SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,E0);]
ELSEIF(IUNRST.EQ.5)[SPTOTE=BRMSTM(E0,E0);]"UNRESTRICTED RADIATIVE"
ELSEIF(IUNRST.EQ.6)[SPTOTE=BRMSTM(E0,EG);]"RESTRICTED RADIATIVE  "
ELSEIF(IUNRST.EQ.7)[SPTOTE=SPIONE(E0,EE);]"RESTRICTED COLLISON   "
RETURN;
END;  "END OF FUNCTION SPTOTE"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION SPTOTP(E0,EE,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"MODIFIED JAN 1989 DWOR AS SPTOTE                                  "
"******************************************************************"

;
implicit none;
$REAL E0,EE,EG;
$REAL SPIONP,BRMSTM;
COMIN/THRESH/;
IF (IUNRST.EQ.0) ["RESTRICTED TOTAL STOPPING POWER I.E. NORMAL"
                  SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,EG);]
ELSEIF(IUNRST.EQ.1)[SPTOTP=SPIONP(E0,E0);]"UNRESTRICTED COLLISION"
ELSEIF(IUNRST.EQ.2)["UNRESTRICTED COLLISION AND RADIATIVE        "
                    SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,E0);]
ELSEIF(IUNRST.EQ.3)["UNRESTRICTED COLLISION +RESTRICTED RADIATIVE"
                    SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,EG);]
ELSEIF(IUNRST.EQ.4)["RESTRICTED COLLISION +UNRESTRICTED RADIATIVE"
                    SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,E0);]
ELSEIF(IUNRST.EQ.5)[SPTOTP=BRMSTM(E0,E0);]"UNRESTRICTED RADIATIVE"
ELSEIF(IUNRST.EQ.6)[SPTOTP=BRMSTM(E0,EG);]"RESTRICTED RADIATIVE  "
ELSEIF(IUNRST.EQ.7)[SPTOTP=SPIONP(E0,EE);]"RESTRICTED COLLISON   "
RETURN;
END;  "END OF FUNCTION SPTOTP"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION TMXB(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E;
"THIS FUNCTION FINDS THE TRANSPORT DISTANCE WHICH AT THIS ENERGY"
"IS THE LARGEST CONSISTENT WITH BETHE'S CRITERION, NAMELY"
"  XC**2*B.LE.1;   SINCE XC ANB B ARE INCREASING FUNCTIONS OF T"
" THE TRANSPORT DISTANCE, THE CRITERION FOR TMXB IS THEN"
"  XC**2*B=1;      OTHER RELATIONS USED IN THE DERIVATION ARE"
"EXPLAINED IN SUBROUTINES MIX AND MOLIER.  THEY ARE:"
"  XC=XCC*SQRT(T)/(E*BETA**2); "
"  EXP(B)/B = BLCC*T/BETA**2;  "
"FROM THESE IS DERIVED THE EQUATION THIS FUNCTION IS BASED ON:"
"TMXB=(E**2*BETA**2/XCC**2)*BETA**2/ALOG(BLCC*(E**2*BETA**2/XCC**2));"
;
$REAL ESQ,BETA2,PX2;
COMIN/DERCON,MOLVAR/;
ESQ=E**2;
BETA2=1.0-RMSQ/ESQ;
PX2=ESQ*BETA2/XCC**2;
TMXB=PX2*BETA2/ALOG(BLCC*PX2);
RETURN;
END;   "END OF FUNCTION TMXB"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION TMXDE2(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL E,ESQ,BETASQ,TMXB;
COMIN/DERCON/;
ESQ=E**2;
BETASQ=1.0-RMSQ/ESQ;
TMXDE2=TMXB(E)/(ESQ*BETASQ**2);
RETURN;
END; "END OF FUNCTION TMXDE2"



"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION TMXS(E);"MAXIMUM STEP SIZE VALID FOR MULTIPLE SCATTERING"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL E,TMXB;
$REAL SAFETY,TABSMX;
DATA SAFETY/0.8/,TABSMX/10.0/;
save SAFETY,TABSMX;
TMXS=AMIN1(TMXB(E)*SAFETY,TABSMX);
"THE FACTORE 'SAFETY' IS TO KEEP SOMEWHAT BELOW BETHE'S LIMIT"
"TABSMX IS AN ABSOLUTE LIMIT TO SIZE OF ELECTRON TRANSPORT,"
"  INDEPENDENT OF THE MULTIPLE SCATTERING LIMIT"
RETURN;
END;  "END OF FUNCTION TMXS"

%E  "PEGS4 MORTRAN (Page Eject Control)"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION XSIF (Z);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"EVALUATES EQUATION 2.7.21a OF SLAC-265"

;
implicit none;
$REAL Z,FCOULC;
$INTEGER IZ;
COMIN/RADLEN/;
IF (Z.LE.4.0) [IZ=Z;
XSIF=ALRADP(IZ)/(ALRAD(IZ)-FCOULC(Z));]
ELSE [
XSIF=ALOG(A1440*Z**(-2./3.))/(ALOG(A183*Z**(-1./3.))-FCOULC(Z));]
RETURN;
END;  "END OF FUNCTION XSIF"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL FUNCTION ZTBL(IASYM);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
COMIN/ELEMTB/;
$TYPE IASYM,IA;
$INTEGER ie;
DATA IA/'A'/;
save ia;
IF (IASYM.EQ.IA)["ALTERNATE SYMBOL FOR ARGON" ZTBL=18.0;RETURN;]
"     PUT IN THE REST LATER                                 "
DO IE=1,NET[
IF (IASYM.EQ.ASYMT(IE)) [ZTBL=IE; RETURN;]
]
OUTPUT IASYM,NET;
(1X,A2,' NOT AN ATOMIC SYMBOL FOR AN ELEMENT WITH Z LE ',I3);
ZTBL=0.0;
RETURN;
"END OF FUNCTION ZTBL" END;

"*******************************************************************"
 subroutine open_units;
"*******************************************************************"


implicit none;

;COMIN/FileNames/;
integer narg, iargc;
integer i,lnblnk1,l,l1;
logical have_arg,is_there;
character arg*256,arg1*256,inp_file*256,fn*512,hen_house*128;
logical egs_isdir,append;

narg = iargc();

IF( narg = 0 ) [ "Assume I'm being run from a shell script that has set up "
                 "symbolik links to fort.* files "
    using_sym_links = .true.;
    fn = 'fort.5';
    open(5,file='fort.5',status='old',err=:file-error:);
    open(7,file='fort.7',status='new',err=:data_file_error:);
    open(6,file='fort.6',status='unknown');
    open(10,file='fort.10',status='unknown');
    open(21,file='fort.21',status='unknown');
    inquire(file='fort.20',exist=is_there);
    IF( is_there ) [ open(20,file='fort.20',status='old'); ]
    fn = 'fort.8';
    open(8,file=fn,status='old',err=:no_xsection_file:);
    fn = 'fort.9';
    open(9,file=fn,status='old',err=:no_ffactor__file:);
    return;
]

"======================================"
"Added option to print out a brief help"
"    Ernesto Mainegra-Hing June 02,2004"
"======================================"
IF (narg = 1)[
    call getarg(1,arg); l = lnblnk1(arg);
    IF( ( l = 2 & arg(:l) = '-h' ) |
        ( l = 6  & arg(:l) = '--help' ) ) [
        call show_pegs4_help();
        $CALL_EXIT(0);
    ]
]
"======================================"

using_sym_links = .false.;

" append "
append = .false.;
DO i=1,narg [
    call getarg(i,arg); l = lnblnk1(arg);
    IF( ( l = 2 & arg(:l) = '-a' ) |
        ( l = 8 & arg(:l) = '--append' ) ) [
        append = .true.; goto :found-append:;
    ]
]
:found-append:;

" HEN_HOUSE: either command line argument or taken from machine.macros "
REPLACE {$HEN-HOUSE} WITH { hen_house(:lnblnk1(hen_house)) };
have_arg = .false.; l = 0;
DO i=1,len(hen_house) [ hen_house(i:i) = ' '; ]
have_arg = .false.; l = 0;
DO i=1,narg-1 [
   call getarg(i,arg); l = lnblnk1(arg);
   IF ( ( l = 2 & arg(:l) = '-h' ) |
        ( l = 11 & arg(:l) = '--hen-house' ) ) [
       call getarg(i+1,hen_house); l = lnblnk1(hen_house);
       IF( egs_isdir(hen_house) ) [ have_arg = .true.; ]
   ]
]
IF( ~have_arg ) [ hen_house = $HEN_HOUSE; ]

" EGS_HOME: either command line argument or taken from the environment "
DO i=1,len(egs_home) [ egs_home(i:i) = ' '; ]
DO i=1,narg-1 [
   call getarg(i,arg); l = lnblnk1(arg);
   IF ( ( l = 2 & arg(:l) = '-e' ) |
        ( l = 10 & arg(:l) = '--egs-home' ) ) [
       call getarg(i+1,egs_home); l = lnblnk1(egs_home);
       IF( egs_isdir(egs_home ) ) [ have_arg = .true.; ]
   ]
]
IF( l = 0 | ~have_arg ) [
    call getenv('EGS_HOME',egs_home); l = lnblnk1(egs_home);
    IF( l = 0 ) [
        write(6,*);
        write(6,*) ' EGS_HOME was hot passed as an argument and also ';
        write(6,*) ' the environment variable EGS_HOME is not set! ';
        write(6,*) ' Quiting now.';
        write(6,*);
        $CALL_EXIT(1);
    ]
]

DO i=1,len(inp_file) [ inp_file(i:i) = ' '; ]
DO i=1,len(output_file) [ output_file(i:i) = ' '; ]
DO i=1,len(input_file) [ input_file(i:i) = ' '; ]
DO i=1,len(density_file) [ density_file(i:i) = ' '; ]
DO i=1,len(fn) [ fn(i:i) = ' '; ]

have_arg = .false.;
DO i=1,narg-1 [
   call getarg(i,arg); l = lnblnk1(arg);
   IF ( ( l = 2 & arg(:l) = '-i' ) |
        ( l = 7 & arg(:l) = '--input' ) ) [
       call getarg(i+1,arg);
       l1 = lnblnk1(arg);
       arg1(:len(arg1)) = ' ';
       IF( l1 > 10 & arg(l1-8:l1) = '.pegs4inp' ) [
           arg1(:l1-9) = arg(:l1-9);
           arg(l1-8:l1) = '.pegs4lst';
           inp_file(:l1-9) = arg(:l1-9);
       ]
       ELSE [
           IF( l1 > 248 ) [
               write(6,*) ' Input file name is too long! ';
               $CALL_EXIT(1);
           ]
           inp_file(:l1) = arg(:l1);
           arg1 = arg(:lnblnk1(arg)) // '.pegs4lst';
           arg(l1+1:l1+9) = '.pegs4inp'; l1 = l1 + 9;
       ]
       fn(:l1) = arg(:l1);
       inquire(file=fn,exist=is_there);
       IF ( is_there ) [
           have_arg = .true.; goto :found-input-file:;
       ]
       fn = $EGS_HOME // 'pegs4' // $file_sep // 'inputs' // $file_sep // arg;
       inquire(file=fn,exist=is_there);
       IF ( is_there ) [
           have_arg = .true.; goto :found-input-file:;
       ]
       fn = $HEN-HOUSE // 'pegs4' // $file_sep // 'inputs' // $file_sep // arg;
       inquire(file=fn,exist=is_there);
       IF ( is_there ) [
           have_arg = .true.; goto :found-input-file:;
       ]
       write(6,*) '******************** Error **************************';
       write(6,'(a,a)') ' you specified an input file named ',arg(:l1);
       write(6,'(a,a)') ' but the file does not exist in';
       write(6,'(a,a)') '     ',$EGS_HOME // 'pegs4/inputs/';
       write(6,'(a,a)') '     ',$HEN-HOUSE // 'pegs4/inputs/';
       write(6,'(a)')   '      the current working directory';
       write(6,'(a)') ' and is also not an existing absolute file name';
       write(6,*) '*****************************************************';
       $CALL_EXIT(1);
   ]
]
:found-input-file:
IF( have_arg ) [
    open(5,file=fn,status='old',err=:file-error:);
    DO i=1,lnblnk1(fn) [ input_file(i:i) = fn(i:i); ]
    DO i=lnblnk1(fn)+1,len(input_file) [ input_file(i:i) = ' '; ]
]
ELSE [
    DO i=1,len(input_file) [ input_file(i:i) = ' '; ]
    write(6,'(/a/)') 'No input file. All input must come from the terminal';
]

have_arg = .false.;
DO i=1,narg-1 [
   call getarg(i,arg);
   l = lnblnk1(arg);
   IF ( ( l = 2 & arg(:l) = '-o' ) |
        ( l = 8 & arg(:l) = '--output' ) ) [
       call getarg(i+1,arg); have_arg = .true.;
       goto :found-output-option:;
   ]
]
:found-output-option:
IF( have_arg ) [
    l1 = lnblnk1(arg);
    IF( l1 < 10 | arg(l1-8:l1) ~= '.pegs4dat' ) [
        arg = arg(:lnblnk1(arg)) // '.pegs4dat';
    ]
]
ELSE [
    DO i=1,len(arg) [ arg(i:i) = ' '; ]
    arg(:lnblnk1(inp_file)) = inp_file(:lnblnk1(inp_file));
    call egs_strip_path(arg);
    l = lnblnk1(arg);
    IF( l = 0 ) [
        write(6,*) ' Without input file you must explicitly specify the ';
        write(6,*) ' output file';
        $CALL_EXIT(1);
    ]
    arg(l+1:l+10) = '.pegs4dat';
]
fn = $EGS_HOME // 'pegs4' // $file_sep // 'data' // $file_sep // arg;
IF( append ) [
    open(7,file=fn,status='old',access='append',err=:data1_file_error:);
    "LOOP [ read(7,*,err=:end-of-data:,end=:end-of-data:); ]"
    ":end-of-data:;"
]
ELSE [
    open(7,file=fn,status='new',err=:data_file_error:);
]

fn = $EGS_HOME // 'pegs4' // $file_sep // 'inputs' // $file_sep // arg;
output_file = $EGS_HOME // 'pegs4' // $file_sep // 'data' // $file_sep // arg;
l = lnblnk1(fn); lenfn = l;
IF( lnblnk1(inp_file) > 0 ) [
    fn(l-7:l) = 'pegs4lst';
    open(6,file=fn,status='unknown');
]
"fn(l-7:l) = 'pegs4err'; open(10,file=fn,status='unknown');"
"fn(l-7:l) = 'plot    '; open(21,file=fn,status='unknown');"

have_arg = .false.;
fn(:len(fn)) = ' ';
DO i=1,narg-1 [
   call getarg(i,arg);
   l = lnblnk1(arg);
   IF( ( l = 2 & arg(:l) = '-d' ) |
       ( l = 16 & arg(:l) = '--density-effect' ) ) [
       call getarg(i+1,arg);
       arg = arg(:lnblnk1(arg)) // '.density';
       fn = arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
       fn = $EGS_HOME // 'pegs4/density_corrections/' // arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
       fn = $EGS_HOME // 'pegs4/density_corrections/elements/' // arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
       fn = $EGS_HOME // 'pegs4/density_corrections/compounds/' // arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
       fn = $HEN-HOUSE // 'pegs4/density_corrections/elements/' // arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
       fn = $HEN-HOUSE // 'pegs4/density_corrections/compounds/' // arg;
       inquire(file=fn,exist=is_there);
       IF( is_there ) [
           open(20,file=fn,status='old'); have_arg = .true.;
           goto :found_density_file:;
       ]
   ]
]
:found_density_file:
IF( have_arg ) [
    write(6,'(/a,a/)') '************ Using density file ',fn(:lnblnk1(fn));
    DO i=1,lnblnk1(fn) [ density_file(i:i) = fn(i:i); ]
]

have_arg = .false.; fn(:len(fn)) = ' ';
DO i=1,narg-1 [
    call getarg(i,arg); l = lnblnk1(arg);
    IF( ( l = 2 & arg(:l) = '-x' ) |
        ( l = 10  & arg(:l) = '--xsection' ) ) [
        call getarg(i+1,arg); l = lnblnk1(arg);
        fn(:l) = arg(:l); inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_xsection_file:; ]
        fn = $HEN-HOUSE // 'pegs4/' // arg;
        inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_xsection_file:; ]
        arg = arg(:l) // '.dat'; l = l + 4;
        fn = arg; inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_xsection_file:; ]
        fn = $HEN-HOUSE // 'pegs4/' // arg;
        inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_xsection_file:; ]
    ]
]
fn = $HEN-HOUSE // 'pegs4/pgs4pepr.dat';
:found_xsection_file:
DO i=1,len(xsection_file) [ xsection_file(i:i) = ' '; ]
DO i=1,lnblnk1(fn) [ xsection_file(i:i) = fn(i:i); ]
open(8,file=fn,status='old',err=:no_xsection_file:);
write(6,'(a,a/)') '************ Using cross section data file ',
  fn(:lnblnk1(fn));


have_arg = .false.; fn(:len(fn)) = ' ';
DO i=1,narg-1 [
    call getarg(i,arg); l = lnblnk1(arg);
    IF( ( l = 2 & arg(:l) = '-f' ) |
        ( l = 13  & arg(:l) = '--form-factor' ) ) [
        call getarg(i+1,arg); l = lnblnk1(arg);
        fn(:l) = arg(:l); inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_ffactor__file:; ]
        fn = $HEN-HOUSE // 'pegs4/' // arg;
        inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_ffactor__file:; ]
        arg = arg(:l) // '.dat'; l = l+4;
        fn = arg; inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_ffactor__file:; ]
        fn = $HEN-HOUSE // 'pegs4/' // arg;
        inquire(file=fn,exist=is_there);
        IF( is_there ) [ goto :found_ffactor__file:; ]
    ]
]
fn = $HEN-HOUSE // 'pegs4/pgs4form.dat';
:found_ffactor__file:
DO i=1,len(formf_file) [ formf_file(i:i) = ' '; ]
DO i=1,lnblnk1(fn) [ formf_file(i:i) = fn(i:i); ]
open(9,file=fn,status='old',err=:no_ffactor__file:);
write(6,'(a,a/)') '************ Using form factor data file ',
  fn(:lnblnk1(fn));

fn = $HEN-HOUSE // 'pegs4/aprime.data';
open(22,file=fn,status='old',err=:no_aprime_file:);

return;

:file-error:
write(6,'(//a,a//)') ' Failed to open file ',fn(:lnblnk1(fn));
$CALL_EXIT(1);

:data_file_error:
write(6,'(//a,a)') ' Data file ',fn(:lnblnk1(fn)),' exists.';
write(6,'(a//)') ' Remove or rename it and retry ';
$CALL_EXIT(2);

:data1_file_error:
write(6,'(//a/,a/,a)') ' You have specified the append option, but file ',
                   fn(:lnblnk1(fn)),' does not exist ';
$CALL_EXIT(6);

:no_xsection_file:
write(6,'(//a,a//)') ' Failed to open x-section file ',fn(:lnblnk1(fn));
$CALL_EXIT(3);

:no_ffactor__file:
write(6,'(//a,a//)') ' Failed to open form-factor file ',fn(:lnblnk1(fn));
$CALL_EXIT(4);

:no_aprime_file:
write(6,'(//a,a//)') ' Failed to open Aprime data file ',fn(:lnblnk1(fn));
$CALL_EXIT(5);

end;

integer function lnblnk1(string);
character*(*) string;
integer i,j;
DO i=len(string),1,-1 [
    j = ichar(string(i:i));
    IF( j ~= 9 & j ~= 10 & j ~= 11 & j ~= 12 & j ~= 13 & j ~= 32 ) [
        lnblnk1 = i; return;
    ]
]
lnblnk1 = 0;
return; end;
;

"==============================================================================
subroutine egs_strip_path(fname);
"==============================================================================
" Strip the path name from fname (if any)
implicit none;
character*(*) fname;
$INTEGER i,l,l1,lnblnk1,j;
l = lnblnk1(fname);
DO i=l,1,-1 [
    IF( fname(i:i) = $file_sep ) [
        l1 = l-i;
        fname(:l1) = fname(i+1:l);
        DO j=l1+1,len(fname) [ fname(j:j) = ' '; ]
        return;
    ]
]
return; end;
;

subroutine show_pegs4_help();

write(*,*) 'The usage is somewhat different from the previous';
write(*,*) 'EGSnrc or EGS4 environments since all parameters';
write(*,*) 'are now passed on the command line.';
write(*,*) 'To run the code it is best to go to the directory';
write(*,*) 'where the input file is stored (ifile.pegs4inp has';
write(*,*) 'the same format as defined in the EGSnrc manual)';
write(*,*) 'and issue the command:'; write(*,*);
write(*,'(a,$)') 'pegs4.exe -i ifile [-o ofile] [-a] [-d density]';
write(*,*) '[-x CrossSectData] [-e HEN_HOUSE]'; write(*,*);


write(*,*) '-i ifile         => ifile.pegs4inp is the input file';
write(*,*) '-o ofile         => if present output file is';
write(*,*) '                    $EGS_HOME/pegs4/data/ofile.pegs4dat';
write(*,*) '                    & if not present output  is';
write(*,*) '                    $EGS_HOME/pegs4/data/ifile.pegs4dat';
write(*,*) '-a               => if present that output is appended to';
write(*,*) '                    [i|o]file.pegs4dat';
write(*,*) '-d density       => if present density effect is in';
write(*,*) '                    density.density';
write(*,*) '-x CrossSectData => if present use';
write(*,*) '                    $HEN_HOUSE/pegs4/CrossSectData as';
write(*,*) '                    cross section file instead of';
write(*,*) '                    $HEN_HOUSE/pegs4/pgs4pepr.dat';
write(*,*) '-e HEN_HOUSE     => if present store data on';
write(*,*) '                    $HEN_HOUSE/pegs4/data';
write(*,*) '                    rather than $EGS_HOME/pegs4/data';
write(*,*) '-h or --help     => print this help screen';
return; end;
;
