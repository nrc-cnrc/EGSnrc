%C80
"#############################################################################"
"                                                                             "
"  EGSnrc utility to split density correction files                           "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Iwan Kawrakow, 2003                                       "
"                                                                             "
"  Contributors:                                                              "
"                                                                             "
"#############################################################################"


%Q1
%C80

" $Id: split_del.mortran,v 1.2 2003/07/21 13:25:47 iwan Exp $
"
" split_del is a routine to split Berger and Seltzer's density correction
"           file into separate files, one for each element and material

;
REPLACE {$MAXLEN} WITH {128} "Maximum record length"
REPLACE {$MXELEM} WITH {100}
REPLACE {$MXDATA} WITH {500}
;

program split_del;

character*$MAXLEN record,filename;
integer N_pairs, N_lines, i;
integer    Z($MXELEM);
real       w($MXELEM);
real       energy($MXDATA),delta($MXDATA);
real f;
logical    egs_isdir;
integer    egs_system;
character  element_dir*8, compound_dir*9,
           element_file*12, compound_file*13,
           the_dir*9, the_file*13, output_file*23, command_string*16,
           date_string*24;
data       element_dir/'elements'/, compound_dir/'compounds'/;
data       element_file/'elements.del'/,compound_file/'compounds.del'/;

DO iii=1,2 [

    IF( iii = 1 ) [
        the_dir = element_dir;
        the_file = element_file;
    ]
    ELSE [
        the_dir = compound_dir;
        the_file = compound_file;
    ]

    write(6,'(a,a,a,$)') 'Extracting ',the_file,' ...';
    open(1,file=the_file,status='old',err=:no_file:);
    IF( ~egs_isdir(the_dir) ) [
        command_string = 'mkdir ' // the_dir;
        l = lnblnk1(command_string); command_string(l+1:l+1) = char(0);
        IF( egs_system(command_string) ~= 0 ) [
            write(6,*) 'Failed to create ',the_dir;
            $CALL_EXIT(1);
        ]
    ]

    LOOP[ "Loop over the number of elements/materials

        "Read the title record and get its record length.
        "This title will be converted into a filename.
        read(1,:input:,end=:nomore:) record;
        :input:format(a$MAXLEN);

        "Replace any characters that might cause filename difficulties
        DO i = 1,$MAXLEN [
            IF(record(i:i) = '(') record(i:i) = '_'; " (  --> underscore
            IF(record(i:i) = ')') record(i:i) = ' '; " )  --> blank
            IF(record(i:i) = '/') record(i:i) = '_'; " /  --> underscore
            IF(record(i:i) = ',') record(i:i) = '_'; " ,  --> underscore
            IF(record(i:i) = ':') record(i:i) = '_'; " :  --> underscore
            IF(record(i:i) = '"') record(i:i) = '_'; " "" --> blank
        ]

        "Form the title from non-blanks in the title record
        DO i = 1,$MAXLEN[filename(i:i) = ' ';] " Clear the filename
        l = lnblnk1(the_dir);
        filename = the_dir(:l) // '/';
        ipos = l+1;
        DO i = 1,$MAXLEN [
            IF(record(i:i) ~= ' ') [
                ipos = ipos + 1;
                IF( ipos > $MAXLEN ) [
                    write(6,'(a,a,a,i3,a)')
                      'File name for ',record(:lnblnk1(record)),
                      ' exceeds ',$MAXLEN,' characters';
                    write(6,'(a)') '--->truncating file name';
                    EXIT;
                ]
                filename(ipos:ipos) =  record(i:i);
            ]
        ]
        IF( ipos + 8 > $MAXLEN ) [
            IF( ipos <= $MAXLEN ) [
                write(6,'(a,a,a,i3,a)')
                      'File name for ',record(:lnblnk1(record)),
                      ' exceeds ',$MAXLEN,' characters';
                write(6,'(a)') '--->truncating file name';
            ]
            ipos = $MAXLEN-8
        ]
        filename(ipos+1:ipos+8) = '.density';

        "OUTPUT filename;(' Creating file ',a);

        open(3,file = filename, status='unknown');
        write(3,'(1x,a)') record(:lnblnk1(record));
        read(1,*)  N_pairs,Ei,rho,N_elem;
        write(3,*) N_pairs,Ei,rho,N_elem;
        IF( N_elem > $MXELEM ) [
            write(6,*) 'Too many elements';
            $CALL_EXIT(3);
        ]
        IF( N_pairs > $MXDATA ) [
            write(6,*) 'Too many data points';
            $CALL_EXIT(4);
        ]
        read(1,*,err=:data_error:) (Z(i),w(i),i=1,N_elem);
        read(1,*,err=:data_error:) (energy(i),delta(i),i=1,N_pairs);
        write(3,'(6(i3,f9.6))') (Z(i),w(i),i=1,N_elem);
        write(3,'(4(1pe9.2,",",1pe9.3,1x))') (energy(i),delta(i),i=1,N_pairs);
        close(3);

    ] "End of loop over elements/materials


    :nomore:;
    close(unit=1);
    write(6,*) 'OK';

]

open(4,file='time_stamp',status='unknown');
call egs_get_fdate(date_string);
write(4,*) 'Extracted ',date_string;
$CALL_EXIT(0);

:no_file:
write(6,*) 'Failed to open density file ',the_file;
$CALL_EXIT(2);

:data_error:
write(6,*) 'An arror occured while reading file ',the_file;
$CALL_EXIT(4);

end;
;

integer function lnblnk1(string);
character*(*) string;
integer i,j;
DO i=len(string),1,-1 [
    j = ichar(string(i:i));
    IF( j ~= 9 & j ~= 10 & j ~= 11 & j ~= 12 & j ~= 13 & j ~= 32 ) [
        lnblnk1 = i; return;
    ]
]
lnblnk1 = 0; return; end;
;
