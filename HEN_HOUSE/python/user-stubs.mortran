%C80
"#############################################################################"
"                                                                             "
"  EGSnrc tutor1 application                                                  "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Dave Roger, 1985                                          "
"                                                                             "
"  Contributors:    Iwan Kawrakow                                             "
"                   Frederic Tessier                                          "
"                   Reid Townson                                              "
"                                                                             "
"#############################################################################"
"                                                                             "
"  An EGSnrc user code. It lists the particles escaping from the back of a    "
"  1 mm tantalum plate when a pencil beam of 20 MeV electrons is incident on  "
"  it normally.                                                               "
"                                                                             "
"  The following units are used: unit 6  for (terminal) output, and unit 12   "
"  is PEGS cross section file                                                 "
"                                                                             "
"  Iwan Kawrakow, 2003: Adapted to new EGSnrc MP system by adding call        "
"  egs_init at the beginning and call egs_finish at the end.                  "
"                                                                             "
"#############################################################################"





REPLACE {$egs_debug(#,#);} WITH { write(i_log,{P1}) {P2}; };
REPLACE {$egs_fatal(#,#,#);} WITH {
  $warning('(/a)','***************** Error: ');
  $warning({P1},{P2});
  $warning('(/a)','***************** Quitting now.');
};
REPLACE {$egs_fatal(#,#);} WITH {
  $warning('(/a)','***************** Error: ');
  $warning({P1},{P2});
  $warning('(/a)','***************** Quitting now.');
};
REPLACE {$egs_warning(#,#);} WITH {
  $warning('(/a)','***************** Warning: ');
  $warning({P1},{P2});
};
REPLACE {$warning(#,#);} WITH { write(i_log,{P1}) {P2}; };
REPLACE {$egs_info(#,#);} WITH { write(i_log,{P1}) {P2}; };




"---------------------------------------------------------------------"
"STEP 1:  USER-OVERRIDE-OF-EGSnrc-MACROS                              "
"---------------------------------------------------------------------"
REPLACE {$MXMED} WITH {1}   "only 1 medium in the problem(default 10)"
REPLACE {$MXREG} WITH {3}   "only 3 geometric regions (default 2000)"
REPLACE {$MXSTACK} WITH {15}"less than 15 particles on stack at once"

"define a common to pass information to the geometry routine HOWFAR"
REPLACE {;COMIN/GEOM/;} WITH {;COMMON/GEOM/ZBOUND;$REAL ZBOUND;}
REPLACE {$CALL-HOWNEAR(#);} WITH {
  ;CALL HOWNEAR({P1},X(NP),Y(NP),Z(NP),IRL);
}

%E  "tutor1.mortran"
"********************************************************************"
"                                                                    "
SUBROUTINE AUSGAB(IARG);
"                                                                    "
"  In general, AUSGAB is a routine which is called under a series    "
"  of well defined conditions specified by the value of IARG (see the"
"  EGSnrc manual for the list). This is a particularily simple AUSGAB"
"  Whenever this routine is called with IARG=3 , a particle has      "
"  been discarded by the user in HOWFAR                              "
"  We get AUSGAB to print the required information at that point     "
"                                                                    "
"********************************************************************"
$IMPLICIT-NONE;
$INTEGER IARG;
$REAL EKINE, ANGLE;

COMIN/STACK/;

IF(IARG = 3)[
ANGLE=ACOS(W(NP))*180./3.14159;"angle w.r.t. Z axis in degrees"

IF(IQ(NP) = 0)[EKINE=E(NP);]
ELSE          [EKINE=E(NP)-0.510998946131;]"get kinetic energy"
OUTPUT EKINE,IQ(NP),ANGLE;(T21,F10.3,T33,I10,T49,F10.1);]
RETURN;END;"END OF AUSGAB"

%E  "tutor1.mortran"
"*********************************************************************"
"                                                                     "
SUBROUTINE HOWFAR;
"                                                                     "
" The following is a general specification of HOWFAR                  "
"   Given a particle at (X,Y,Z) in region IR and going in direction   "
"   (U,V,W), this routine answers the question, can the particle go   "
"   a distance USTEP without crossing a boundary?                     "
"           If yes, it merely returns                                 "
"           If no, it sets USTEP=distance to boundary in the current  "
"           direction and sets IRNEW to the region number   on the    "
"           far side of the boundary (this can be messy in general!)  "
"                                                                     "
"   The user can terminate a history by setting IDISC>0. Here we      "
"   terminate all histories which enter region 3 or are going         "
"   backwards in region 1                                             "
"                                                                     "
"                   |               |                                 "
"   REGION 1        |   REGION 2    |       REGION 3                  "
"                   |               |                                 "
"   e- =========>   |               | e- or photon ====>              "
"                   |               |                                 "
"   vacuum          |     Ta        |       vacuum                    "
"                                                                     "
"*********************************************************************"
$IMPLICIT-NONE;
$REAL TVAL;
COMIN/STACK,EPCONT,GEOM/;
"       COMMON STACK contains X,Y,Z,U,V,W,IR and NP(stack pointer)"
"       COMMON EPCONT contains IRNEW, USTEP and IDISC"
"       COMMON GEOM contains ZBOUND"

IF(IR(NP) = 3) [
   IDISC = 1;RETURN;"terminate this history: it is past the plate"
]
ELSEIF(IR(NP) = 2)["We are in the Ta plate - check the geometry"

   IF(W(NP) > 0.0)[
      "going forward - consider first since  most frequent"
      TVAL= (ZBOUND - Z(NP))/W(NP);"TVAL is dist to boundary"
      "                          in this direction"
      IF(TVAL > USTEP)[RETURN;"can take currently requested step"]
      ELSE[USTEP = TVAL; IRNEW=3; RETURN;]
   ]"END OF W(NP)>0 CASE"

   ELSEIF(W(NP) < 0.0)["going back towards origin"
      TVAL = -Z(NP)/W(NP); "distance to plane at origin"
      IF(TVAL > USTEP)[RETURN;"can take currently requested step"]
      ELSE[USTEP = TVAL; IRNEW = 1; RETURN;]
   ]"END W(NP)<0 CASE"

   ELSEIF(W(NP) = 0.0)["cannot hit boundary"RETURN;]
]"end of region 2 case"

ELSEIF(IR(NP) = 1)["in region with source"
   IF(W(NP) >  0.0)["this must be a source particle on z=0 boundary"
      USTEP = 0.0;IRNEW = 2;RETURN;
   ]
   ELSE[ "it must be a reflected particle-discard it"
      IDISC=1;RETURN;
   ]
]"end region 1 case"

END;"END OF SUBROUTINE HOWFAR"

%E  "tutor1.mortran"
"*********************************************************************"
"                                                                     "
SUBROUTINE HOWNEAR(tperp, x, y, z, irl);
"                                                                     "
" The following is a general specification of HOWNEAR                 "
"   Given a particle at (x,y,z) in region irl, HOWNEAR answers the    "
"   question, What is the distance tperp to the closest boundary?     "
"                                                                     "
"  In general this can be a complex subroutine.                       "
"                                                                     "
"*********************************************************************"
$IMPLICIT-NONE;
$REAL tperp, x, y, z;
$INTEGER irl;

;COMIN/GEOM/;      "       COMMON GEOM contains ZBOUND"

IF(irl = 3) [OUTPUT;('Called HOWNEAR in region 3'); RETURN;]

ELSEIF(irl = 2)["We are in the Ta plate - check the geometry"
    tperp = min(z,  (ZBOUND - z));
]

ELSEIF(irl = 1)[OUTPUT;('Called HOWNEAR in region 1'); RETURN;]

END;"end of subroutine HOWNEAR"
"============================end of tutor1.mortran================="
