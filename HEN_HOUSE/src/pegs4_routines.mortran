%C80
"#############################################################################"
"                                                                             "
"  EGSnrc pegs4 routines                                                      "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Authors:         Blake Walters, 2013                                       "
"                                                                             "
"  Contributors:                                                              "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Parts of the EGS code that originate from SLAC are distributed by NRC      "
"  under the terms of the AGPL 3.0 licence, in agreement with SLAC.           "
"                                                                             "
"  The content of this file was adapted from the original pegs4 source code   "
"  to enable on-the-fly pegs data generation in EGSnrc. Please see the pegs4  "
"  sources for more information on the authorship of the original code.       "
"                                                                             "
"#############################################################################"


"Compiler directives"
"==================="
%Q1         "Automatically close comments at end of line
            "but NOTE, this doesn't happen inside a REPLACE macro
            "you must open and close within a REPLACE macro.
%C80        "Allow 80 columns of source/line (default is 72)
!INDENT M2; "Indent Mortran compile listing 2 spaces each nesting level
!INDENT F2; "Indent fortran output 2 spaces each nesting level
%L          "Turn on listing
%I4 "INDENT FOUR SPACES EACH LEVEL"

%E
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE EFUNS(E,V);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;
;

$REAL4 E,V(8);

" IK: Variable declarations for implicit none"
$REAL4 BREM,AMOLL,BHAB,ANNIH,ESIG,PSIG;

" IK: Function declarations for implicit none"
$REAL4 BREMTM,AMOLTM,BHABTM,ANIHTM,SPTOTE,SPTOTP,TMXS,THBREM;

"*****SUBROUTINE TO COMPUTE ELECTRON FUNCTIONS TO BE FIT           "
"     IN A WAY THAT AVOIDS REPETITION.                             "
COMIN/THRESHP,DERCON,EGS-IO/;
THBREM=RMP+APP;"threshold for bremsstrahlung"
IF(IUNRSTP.EQ.0 .OR. IUNRSTP.EQ.1 .OR. IUNRSTP.EQ.5)[
"  REGULAR DATA SET OR"
"   UNRESTRICTED COLLISIONAL(1) OR RADIATIVE(5) STOPPING POWERS"
"write(58,*)' here e ',e;"
BREM=BREMTM(E);
AMOLL=AMOLTM(E);
BHAB=BHABTM(E);
ANNIH=ANIHTM(E);
ESIG=BREM+AMOLL; "TOTAL ELECTRON CROSS-SECTION"
V(1)=ESIG;
PSIG=BREM+BHAB+ANNIH;"TOTAL POSITRON CROSS SECTION"
V(2)=PSIG;
V(3)=SPTOTE(E,AEP,APP); "TOTAL ELECTRON STOPPING POWER"
V(4)=SPTOTP(E,AEP,APP);"TOTAL POSITRON STOPPING POWER"
"EBR1=BREM/(BREM+AMOLL)"
IF (ESIG.GT.0.0)[V(5)=BREM/ESIG;]
ELSE["BELOW THRESHOLD FOR BOTH BREMS AND MOLLER. USE THE BRANCHING"
"RATIO THAT EXISTED WHEN CROSS SECTION APPROACHED ZERO"
IF (THBREM.LE.THMOLLP)[V(5)=1.0;]ELSE[V(5)=0.0;]
]
V(6)=BREM/PSIG;"PBR1=BREM/(BREM+BHABA+ANNIH)"
V(7)=(BREM+BHAB)/PSIG;"PBR2=(BREM+BHABA)/(PSIG)"
"MAXIMUM ALLOWED TRANSPORT STEP, FROM MULTIPLE SCATTERING"
V(8)=TMXS(E);
"write(*,*)'v1,v2,v3,v4,v5,v6,v7,v8 ',v(1),v(2),v(3),v(4),v(5),v(6),v(7),v(8);"
]
"  THE FOLLOWING ARE UNDOCUMENTED ADDITIONS"
ELSEIF(IUNRSTP.EQ.2)[ "FULL CSDA DATA SET WITH NO DISCRETE INTERACTIONS"
/V(1),V(2),V(5),V(6),V(7)/=0.0;
"ZERO TOTAL CROSS SECTION FOR EL & POS, AND ZERO BRANCHING RATIOS"
V(3) = SPTOTE(E,E,E);"  TOTAL UNRESTRICTED STOPPING POWER"
V(4) = SPTOTP(E,E,E);
V(8) = TMXS(E);]
ELSEIF(IUNRSTP.EQ.3)["CONSIDER BREM AND ANNIHILATION IN FLIGHT AS"
"     DISCRETE EVENTS BUT TREAT DELTAS IN CSDA"
BREM=BREMTM(E);  ANNIH=ANIHTM(E);
V(1)=BREM; "TOTAL X-SECTION IS JUST BREM"
V(2)=BREM + ANNIH;"POSITRONS ALSO HAVE ANNIHILATION IN FLIGHT"
V(3)=SPTOTE(E,E,APP);"UNRESTRICTED COLLISIONAL+RESTRICTED RADIATIVE"
V(4)=SPTOTP(E,E,APP);"    ''                             ''    "
V(5)=1.0;"ALL ELECTRON EVENTS ARE BREM EVENTS"
V(6)=BREM/V(2);"FRACTION FOR POSITRONS WHICH IS BREM"
V(7)=V(6);"FRACTION WHICH IS BREM + COLLISION(=0)"
V(8)=TMXS(E);]

ELSEIF(IUNRSTP.EQ.4)["CREATE SECONDARIES BUT HAVE NO DISCRETE BREM OR"
"ANNIHILATION IN FLIGHT"

V(1)=AMOLTM(E);"ONLY MOLLERS FOR ELECTRONS"
V(2)=BHABTM(E);"ONLY BHABHA FOR POSITRONS"
V(3)=SPTOTE(E,AEP,E);"RESTRICTED COLLISIONAL + UNRESTRICTED RADIATIVE"
V(4)=SPTOTP(E,AEP,E);"         ''                         ''       "
V(5)=0.0;"I.E. NEVER BREMS"
V(6)=0.0;"I.E. NEVER BREMS"
V(7)=1.0;"ALL BHABHA - NO ANNIHILATION"
V(8)=TMXS(E);]

ELSE ["IUNRST=6 OR 7 NOT ALLOWED HERE"
OUTPUT IUNRSTP; (//'*********IUNRST=',I4,' NOT ALLOWED BY EFUNS*****'/
' IUNRST=6 OR 7 ONLY ALLOWED WITH CALL OR PLTN OPTIONS'//);
$CALL_EXIT(20);]
RETURN;
END; "END OF SUBROUTINE EFUNS"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BREMTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 E0,BREMRM;
COMIN/THRESHP,DERCON/;
IF (E0.LE.APP+RMP) [BREMTM=0.; ]
ELSE [BREMTM=BREMRM(E0,APP,E0-RMP);]
RETURN;
END; "END OF FUNCTION BREMTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BREMRM(E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 E,K1,K2;
$INTEGER I;
$REAL4    BREMRZ;
COMIN/MIXDAT/;
BREMRM=0.;
DO I=1,NEP [BREMRM=BREMRM+PZP(I)*BREMRZ(ZELEMP(I),E,K1,K2);]
RETURN;
END; "END OF FUNCTION BREMRM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BREMRZ(Z,E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 Z,E,K1,K2;
EXTERNAL BREMFZ;
$REAL4  DUMMY,BREMDZ,QD,BREMFZ;
"     INITIALIZE BREMFZ                                                "

"    CHANGED"

"    CALL BREMDZ(Z,E,K1);"

"    TO"

"    DUMMY=BREMDZ(Z,E,K1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"
"write(58,*)'2 e ',e;"
DUMMY=BREMDZ(Z,E,K1);
BREMRZ=QD(BREMFZ,K1,K2,'BREMFZ');
"write(58,*)'bremrz ',BREMRZ;"
RETURN;
END; "END OF FUNCTION BREMRZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BREMDZ(Z,E,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4    Z,E,K,BRMSDZ;
"***ALL ENTRIES TO THIS FUNCTION GIVE THE CONTRIBUTION THAT ELEMENT Z"
"   WOULD HAVE IF THERE WERE ONE PER MOLECULE.                      "
"   ENTRIES STARTING WITH D DO THEIR OWN INITIALIZATION.             "
"   ENTRIES STARTING WITH F RELY ON PREVIOUS D FOR INITIALIZATION.   "
"   BREMDZ.. D-SIGMA/D-K FOR BREMS IN Z                              "
"   BRMSDZ.. K*(D-SIGMA/D-K) FOR SOFT ENERGY LOSS FROM BREMS IN Z    "

"EVALUATES EQUATION 2.7.108 IN SLAC-265"

BREMDZ=BRMSDZ(Z,E,K)/K;
"write(58,*)'bremdz,z,e,k ',BREMDZ,z,e,k;"
RETURN;
END;  "END OF FUNCTION BREMDZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BREMFZ(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 K,BRMSFZ;
BREMFZ=BRMSFZ(K)/K;
"write(58,*)'bremfz ',BREMFZ;"
RETURN;
END;  "END OF FUNCTION BREMFZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BRMSFZ(K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 K;
$REAL4 EMKLOC,DELTA,SB1,SB2,EE;
COMIN/LBREMZ/;
EMKLOC=EBREMZ-K;
IF(EMKLOC.EQ.0.0) [EMKLOC=1.E-25;]
DELTA=DELC*K/EMKLOC;
IF (DELTA.GE.DELTAM) [BRMSFZ=0.0;]
ELSE [IF (DELTA.LE.1.)[
SB1=20.867+DELTA*(-3.242+DELTA*0.625)-XLNZ;
SB2=20.209+DELTA*(-1.930+DELTA*(-0.086))-XLNZ;]
ELSE [SB1=21.12-4.184*LOG(DELTA+0.952)-XLNZ;
SB2=SB1;]
EE=EMKLOC/EBREMZ;
BRMSFZ=CONST*((1.+EE*EE)*SB1-0.666667*EE*SB2);]
"write(58,*)' const,ee,sb1,sb2,brmsfz ',const,ee,sb1,sb2,brmsfz;"
RETURN;
END; "END OF FUNCTION BRMSFZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION AMOLTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4    E0;
$REAL4    T0,AMOLRM;
"***TOTAL CROSS SECTION FOR MOLLER SCATTERING WITH INCIDENT ELECTRON"
"   ENERGY(TOTAL) OF E0."
COMIN/THRESHP,DERCON/;
IF (E0.LE.THMOLLP) [AMOLTM=0.; ]
ELSE [T0=E0-RMP;
AMOLTM=AMOLRM(E0,AEP,T0*0.5+RMP);] "EQ.2.10.6"
RETURN;
END; "END OF FUNCTION AMOLTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION AMOLRM(EN0,EN1,EN2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4    EN0,EN1,EN2;
$REAL4    T0,T1,T2,TM,EM,C1,C2,BETASQ,CMOLL2,EPS1,EPSP1,EPS2,EPSP2;
"***MOLLER CROSS SECTION FOR INCIDENT ELECTRON OF TOTAL ENERGY EN0 TO"
"   PRODUCE SECONDARY ELECTRON IN THE TOTAL ENERGY RANGE EN1 TO EN2."
COMIN/PMCONS,MOLVAR,DERCON/;
T0=EN0-RMP;
T1=EN1-RMP;
T2=EN2-RMP;
TM=T0/RMP;
EM=TM+1.;
C1=(TM/EM)**2;
C2=(2.*TM+1.)/EM**2;
BETASQ=1.-1./EM**2;
CMOLL2=RLCP*EDEN*2.*PIP*R0**2/(BETASQ*TM); "CONSTANT FACTOR IN EQ.2.10.3"
EPS1=T1/T0;
EPSP1=1.-EPS1;
EPS2=T2/T0;
EPSP2=1.-EPS2;
AMOLRM=CMOLL2*(C1*(EPS2-EPS1)+1./EPS1-1./EPS2+1./EPSP2-1./EPSP1
  -C2*LOG(EPS2*EPSP1/(EPS1*EPSP2))); "EQ.2.10.3"
RETURN;
END; "END OF FUNCTION AMOLRM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BHABTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TOTAL CROSS SECTION FOR BHABHA SCATTERING WITH INCIDENT POSITRON"
"   ENERGY(TOTAL) OF E0."
;
implicit none;
$REAL4 E0,BHABRM;
COMIN/THRESHP/;
IF (E0.LE.AEP) [BHABTM=0.;]
ELSE [BHABTM=BHABRM(E0,AEP,E0);]  "EQ.2.11.4"
RETURN;
END; "END OF FUNCTION BHABTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BHABRM(EN0,EN1,EN2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***BHABHA CROSS SECTION FOR INCIDENT POSITRON OF TOTAL ENERGY EN0 TO"
"   PRODUCE SECONDARY ELECTRON IN THE TOTAL ENERGY RANGE EN1 TO EN2."
;
implicit none;
$REAL4 EN0,EN1,EN2;
$REAL4 T0,T1,T2,TM,EM,Y,BETASI,CBHAB2,B1,B2,B3,B4,EPS1,EPS2;
COMIN/PMCONS,MOLVAR,DERCON/;
T0=EN0-RMP;
T1=EN1-RMP;
T2=EN2-RMP;
TM=T0/RMP;
EM=TM+1.;
Y=1./(TM+2.);
BETASI=1./(1.-1./EM**2);
CBHAB2=RLCP*EDEN*2.*PIP*R0**2/TM; "CONSTANT FACTOR IN EQ.2.11.2"
B1=2.-Y**2;
B2=3.-Y*(6.-Y*(1.-Y*2.));
B3=2.-Y*(10.-Y*(16.-Y*8.));
B4=1.-Y*(6.-Y*(12.-Y*8.));
EPS1=T1/T0;
EPS2=T2/T0;
BHABRM=CBHAB2*(BETASI*(1./EPS1-1./EPS2)-B1*LOG(EPS2/EPS1)
  +B2*(EPS2-EPS1)+EPS2*EPS2*(EPS2*B4/3.-0.5*B3)
  - EPS1*EPS1*(EPS1*B4/3.-0.5*B3));  "EQ.2.11.2"
RETURN;
END; "END OF FUNCTION BHABRM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION ANIHTM(E0);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***TOTAL CROSS SECTION FOR TWO-PHOTON POSITRON-ELECTRON ANNIHILATION"
"   WITH INCIDENT POSITRON ENERGY(TOTAL) OF E0."
;
implicit none;
$REAL4    E0;
$REAL4    GAM,P0P2,P0P,CANIH;
COMIN/PMCONS,MOLVAR,DERCON/;
GAM=E0/RMP;   "EQ.2.12.3"
P0P2=GAM*GAM-1.0;
P0P=SQRT(P0P2);  "EQ.2.12.6"
CANIH=RLCP*EDEN*PIP*R0**2/(GAM+1.); "CONSTANT FACTOR IN EQ.2.12.14"
ANIHTM=CANIH*((GAM*GAM+4.*GAM+1.)/P0P2*LOG(GAM+P0P)
   -(GAM+3.)/P0P);   "EQ.2.12.14"
RETURN;
END;  "END OF FUNCTION ANIHTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION SPTOTP(E0,EE,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"MODIFIED JAN 1989 DWOR AS SPTOTE                                  "
"******************************************************************"

;
implicit none;
$REAL4 E0,EE,EG;
$REAL4 SPIONP,BRMSTM;
COMIN/THRESHP/;
IF (IUNRSTP.EQ.0) ["RESTRICTED TOTAL STOPPING POWER I.E. NORMAL"
                  SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,EG);
"write(*,*)' eo,ee,eg,spionp,brmstm ',e0,ee,eg,SPIONP(E0,EE),BRMSTM(E0,EG);"]
ELSEIF(IUNRSTP.EQ.1)[SPTOTP=SPIONP(E0,E0);]"UNRESTRICTED COLLISION"
ELSEIF(IUNRSTP.EQ.2)["UNRESTRICTED COLLISION AND RADIATIVE        "
                    SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,E0);]
ELSEIF(IUNRSTP.EQ.3)["UNRESTRICTED COLLISION +RESTRICTED RADIATIVE"
                    SPTOTP=SPIONP(E0,E0)+BRMSTM(E0,EG);]
ELSEIF(IUNRSTP.EQ.4)["RESTRICTED COLLISION +UNRESTRICTED RADIATIVE"
                    SPTOTP=SPIONP(E0,EE)+BRMSTM(E0,E0);]
ELSEIF(IUNRSTP.EQ.5)[SPTOTP=BRMSTM(E0,E0);]"UNRESTRICTED RADIATIVE"
ELSEIF(IUNRSTP.EQ.6)[SPTOTP=BRMSTM(E0,EG);]"RESTRICTED RADIATIVE  "
ELSEIF(IUNRSTP.EQ.7)[SPTOTP=SPIONP(E0,EE);]"RESTRICTED COLLISON   "
RETURN;
END;  "END OF FUNCTION SPTOTP"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION SPTOTE(E0,EE,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
" patched DWOR, Jan 1988 to correct IURST=2,3,4 and add 6 and 7    "
"******************************************************************"
;
implicit none;
$REAL4 E0,EE,EG;
$REAL4 SPIONE,BRMSTM;
COMIN/THRESHP/;
IF (IUNRSTP.EQ.0) ["RESTRICTED TOTAL STOPPING POWER I.E. NORMAL"
                  SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,EG);]
ELSEIF(IUNRSTP.EQ.1)[SPTOTE=SPIONE(E0,E0);]"UNRESTRICTED COLLISION"
ELSEIF(IUNRSTP.EQ.2)["UNRESTRICTED COLLISION AND RADIATIVE        "
                    SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,E0);]
ELSEIF(IUNRSTP.EQ.3)["UNRESTRICTED COLLISION +RESTRICTED RADIATIVE"
                    SPTOTE=SPIONE(E0,E0)+BRMSTM(E0,EG);]
ELSEIF(IUNRSTP.EQ.4)["RESTRICTED COLLISION +UNRESTRICTED RADIATIVE"
                    SPTOTE=SPIONE(E0,EE)+BRMSTM(E0,E0);]
ELSEIF(IUNRSTP.EQ.5)[SPTOTE=BRMSTM(E0,E0);]"UNRESTRICTED RADIATIVE"
ELSEIF(IUNRSTP.EQ.6)[SPTOTE=BRMSTM(E0,EG);]"RESTRICTED RADIATIVE  "
ELSEIF(IUNRSTP.EQ.7)[SPTOTE=SPIONE(E0,EE);]"RESTRICTED COLLISON   "
RETURN;
END;  "END OF FUNCTION SPTOTE"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION SPIONE(E0,EE);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 E0,EE,SPIONB;
SPIONE=SPIONB(E0,EE,.FALSE.);
RETURN;
END;  "END OF FUNCTION SPIONE"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION SPIONB(E0,EE,POSITR);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***STOPPING POWER FOR AN ELECTRON.  THIS FUNCTION ALSO HAS OTHER    "
"   ENTRY POINTS. . .                                                "
"   SPIONP(E0,EE) - STOPPING POWER FOR A POSITRON                    "
"   SPINIT(MEDIUM) - DOES INITIALIZATION FOR THE OTHER ENTRY POINTS  "
"   WHENEVER THE MEDIUM CHANGES.                                     "
"   THIS FUNCTION IS FOR STOPPING POWER DUE TO COLLISIONS WITH LESS  "
"   THAN EE-RM ENERGY TRANSFER AND DOES NOT INCLUDE SOFT BREMS LOSS. "
"   WE USE BERGER AND SELTZER'S FORMULATION.                         "
"   STOPPING POWER IS RETURNED IN UNITS OF MEV/R.L.                  "
;
implicit none;
$REAL4   E0,EE;
LOGICAL POSITR;
$REAL4   G,EEM,T,ETA2,BETA2,ALETA2,X,D,FTERM,TP2,D2,D3,D4,DELTA;
$INTEGER I;
COMIN/DERCON,LSPION,EPSTAR/; "MOD NOV 24,1988"
"     COMMON POINT FOR E- AND E+ ENTRIES.                              "
G=E0/RMP;
EEM=EE/RMP-1.;
"     T IS BERGER'S TAU                                                "
T=G-1;
ETA2=T*(G+1.);
BETA2=ETA2/G**2;
ALETA2=LOG(ETA2);
X=0.21715*ALETA2;
"     0.21715=ALOG10(E)/2.   THIS FACTOR IS BECAUSE THE DEFINITION OF  "
"     X IS ALOG10(P/(MC)) AND ETA2=ETA**2=(P/MC)**2                    "
IF (.NOT.POSITR)["THIS IS ELECTRON CASE"
"     COMPUTE F-TERM FOR ELECTRON.  MAXIMUM TRANSFER IS T/2            "
"     D IS BERGER'S CAPITOL DELTA.                                     "
D=AMIN1(EEM,0.5*T);
"     EEM IS DEFINED AS EE/RM-1 IS ENERGY TRANSFER THRESHOLD FOR       "
"     DISCRETE MOLLER AND BHABHA SCATTERING(IN UNITS OF RM.)           "
FTERM=-1.-BETA2+LOG((T-D)*D)+T/(T-D)
  +(D*D/2.+(2.*T+1.)*LOG(1.-D/T))/(G*G);]
"     COMPUTE F-TERM FOR POSITRON.  MAXIMUM TRANSFER IS T.             "
ELSE ["THIS IS POSITRON CASE"
D=AMIN1(EEM,T);
TP2=T+2.;
D2=D*D;
D3=D*D2;
D4=D*D3;
FTERM=LOG(T*D)-(BETA2/T)*( T + 2.*D - (3.*D2/2.)/TP2
 -(D-D3/3.)/(TP2*TP2)-(D2/2.-T*D3/3.+D4/4.)/TP2**3);]

"     NOW COMPUTE THE DENSITY CORRECTION TERM.                         "

IF(EPSTFLP = 0) ["USE STANDARD PEGS4 METHOD"
IF (X.LE.X0) [DELTA=0.0;]
ELSEIF (X.LT.X1) [DELTA=TOLN10*X - CBAR + AFACT*(X1 - X)**SK;]
ELSE [DELTA=TOLN10*X - CBAR;]]

ELSE ["USE LINEAR INTERPOLATION OF USER SUPPLIED INPUT TABLE"

"IEPST IS A POINTER SUCH THAT                              "
"       EPSTEN(IEPST) <= E0 < EPSTEN(IEPST+1)              "
"                                                          "
"IEPST IS INITIALIZED IN BLOCK DATA TO 1. WE START FROM    "
"THE PREVIOUS VALUE OF THE POINTER SINCE WE ASSUME THAT    "
"THE CODE IS WORKING UP OR DOWN A GRID.                    "
"  THIS CODING IS FAR FROM OPTIMAL                         "

IF(E0 >= EPSTEN(IEPST))["AT OR ABOVE PREVIOUS ENTRY"
IF(E0 = EPSTEN(IEPST))["FOUND ENTRY, INCLUDING THE POSSIBILITY"
"THAT WE ARE AT THE TOP OF THE TABLE"     GO TO :END-SEARCH:;]

DO I= IEPST,NEPST-1 [
     IF(E0<EPSTEN(I+1))["WE FOUND IT" IEPST = I; GO TO :END-SEARCH:]
     ]
"IF WE FALL THRU TO HERE, WE MUST BE AT UPPER ENERGY"
IEPST = NEPST; GO TO :END-SEARCH:;
]"END OF BLOCK E0>EPSTEN(IEPST)"

ELSE [ "E0<EPSTEN(IEPST)"

DO I = IEPST,2,-1 [
    IF(E0 >= EPSTEN(I-1)) [IEPST = I-1; GO TO :END-SEARCH:;]
    ]
"   IF WE GET HERE WE MUST BE IN THE FIRST REGION"
    IEPST = 1;]

:END-SEARCH:

"NOW JUST INTERPOLATE LINEARLY IN THE ENERGY"
IF(IEPST < NEPST) [
   DELTA = EPSTD(IEPST) + (E0 - EPSTEN(IEPST))/
   (EPSTEN(IEPST+1) - EPSTEN(IEPST)) * (EPSTD(IEPST+1) - EPSTD(IEPST));]
ELSE [DELTA = EPSTD(NEPST);]

]"END OF EPSTFL NON-ZERO BLOCK"

"     NOW PUT IT ALL TOGETHER                                          "
SPIONB=(SPC1/BETA2)*(LOG(T + 2.) - SPC2 + FTERM - DELTA);
RETURN;
END;  "END OF FUNCTION SPIONB"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION SPIONP(E0,EE);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 E0,EE,SPIONB;
SPIONP=SPIONB(E0,EE,.TRUE.);
RETURN;
END;  "END OF FUNCTION SPIONP"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BRMSTM(E0,EG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 E0,EG,BRMSRM,AU,zero;
parameter (zero=0);
COMIN/DERCON/;
IF (E0.LE.RMP) [BRMSTM=0.; ]
ELSE [AU=AMIN1(EG,E0-RMP);
BRMSTM=BRMSRM(E0,zero,AU);
"write(*,*)'au,e0,brmsrm ',au,e0,BRMSRM(E0,zero,AU);"
]
RETURN;
END; "END OF FUNCTION BRMSTM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BRMSRM(E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;
$REAL4 E,K1,K2,BRMSRZ;
$INTEGER I;
COMIN/MIXDAT/;
BRMSRM=0.;
DO I=1,NEP[BRMSRM=BRMSRM+PZP(I)*BRMSRZ(ZELEMP(I),E,K1,K2);
"write(*,*)'i,e,k1,k2,pz,brmsrz ',i,e,k1,k2,PZ(i_med,I),"
"BRMSRZ(ZELEM(i_med,I),E,K1,K2);"]
RETURN;
END; "END OF FUNCTION BRMSRM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BRMSRZ(Z,E,K1,K2);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 Z,E,K1,K2;
EXTERNAL BRMSFZ;
$REAL4 DUMMY,BRMSDZ,QD,BRMSFZ;
"     INITIALIZE BRMSFZ                                                "

"    CHANGED"

"    CALL BRMSDZ(Z,E,K1);"

"    TO"

"    DUMMY=BRMSDZ(Z,E,K1);"

"    FOR SUN COMATIBILITY AFB 89/12/27"
"write(58,*)' e ',e;"
DUMMY=BRMSDZ(Z,E,K1);
BRMSRZ=QD(BRMSFZ,K1,K2,'BRMSFZ');
"write(58,*)'brmsrz ',BRMSRZ;"
RETURN;
END; "END OF FUNCTION BRMSRZ"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION BRMSDZ(Z,EA,K);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 Z,EA,K;
$REAL4 APRIM,XSIFP,FCOULCP,BRMSFZ;
COMIN/PMCONS,DERCON,MOLVAR,LBREMZ/;
EBREMZ=EA;
DELC=136.*Z**(-1./3.)*RMP/EBREMZ;
CONST=APRIM(Z,EBREMZ)*(AN*RHOP/WM)*R0**2*FSC*Z*(Z+XSIFP(Z))*RLCP;
"write(58,*)' z,ebremz,an,rho,wm,r0,fsc,xsif,rlc,aprim ',z,ebremz,an,rhop,"
"wm,r0,fsc,xsifp(z),RLCP,APRIM(Z,Ebremz);"
XLNZ=4./3.*LOG(Z);
IF (EBREMZ.GE.50)XLNZ=XLNZ+4.*FCOULCP(Z);
".....DELTAM IS THE DELTA AT WHICH THE SQUARE BRACKETS GO TO ZERO      "
DELTAM=EXP((21.12-XLNZ)/4.184)-0.952;
BRMSDZ=BRMSFZ(K);
RETURN;
END;  "END OF FUNCTION BRMSDZ"


"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION APRIM(Z,E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"     EMPIRICAL CORRECTION FACTOR TO BREMS CROSS SECTION               "

" This version can be switched to use different values:                "
"   IAPRIM = 0  equivalent to old PEGS4 (default)                      "
"            1  reads in values from unit 22                           "
"            2  sets APRIM to 1.0                                      "
" Future changes can be accommodated by reading in                     "
" different data on unit 22 and if necessary changing the array sizes: "

;
implicit none;
$REAL4 Z,E;
$INTEGER  napre,naprz,ie,iz,aprim_unit,egs_get_unit,lnblnk1;
$REAL4     EM,AINTP;
character  aprim_file*256;
REPLACE {$NAPRE} WITH {115} " Maximum number of energies ( > 18 )      "
REPLACE {$NAPRZ} WITH {14}  " Maximum number of elements ( > 5 )       "

REPLACE {$NAPR1} WITH {{COMPUTE $NAPRE - 18}}
REPLACE {$NAPR2} WITH {{COMPUTE $NAPRZ - 5}}
REPLACE {$NAPR3} WITH {{COMPUTE $NAPRE * $NAPR2}}
;COMIN/DERCON,EPSTAR,EGS-IO/; "NRC CHANGE NOV 88"
$REAL4 APRIMD($NAPRE,$NAPRZ),EPRIM($NAPRE),ZPRIM($NAPRZ),APRIMZ($NAPRE);
DATA APRIMD/
1.32,1.26,1.18,1.13,1.09,1.07,1.05,1.04,1.03, 1.02,8*1.0,$NAPR1*0.0,
1.34,1.27,1.19,1.13,1.09,1.07,1.05,1.04,1.03,1.02, 8*1.0,$NAPR1*0.0,
1.39,1.30,1.21,1.14,1.10,1.07,1.05,1.04,1.03,1.02,0.994,
 2*0.991,0.990,2*0.989,2*0.988,$NAPR1*0.0,
1.46,1.34,1.23,1.15,1.11,1.08, 1.06,1.05,1.03,1.02,0.989,
 0.973,0.971,0.969,0.967,0.965,2*0.963,$NAPR1*0.0,
1.55,1.40,1.26,1.17,1.12,1.09,1.07,1.05,1.03,1.02,0.955,0.935,
 0.930,0.925,0.920,0.915,2*0.911,$NAPR1*0.0,
$NAPR3*0.0/,
EPRIM /
2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,21.,31.,41.,51.,61.,71.,81.,91.,
$NAPR1*0.0/,
ZPRIM /6.,13.,29.,50.,79.,$NAPR2*0.0/;
save APRIMD,EPRIM,ZPRIM,APRIMZ,napre,naprz;

IF (IAPRIMP.EQ.0) [ " PEGS4 default APRIM"
    IF(IAPRFL = 0)[IAPRFL=1;
    /*
    OUTPUT;
    ('0IAPRIM=0, i.e. uses KOCH AND MOTZ empirical corrections to',
    ' bremsstrahlung cross section'/);
    */
    ]
    IF (E.GE.50) [ APRIM=1.; ]
    ELSE [ " INTERPOLATE APRIM OVER Z "
        EM=E/RMP;
        DO IE=1,18[
           APRIMZ(IE)=
           AINTP(Z,ZPRIM,5,APRIMD(IE,1),$NAPRE,.FALSE.,.FALSE.);
           ] " Z INTERPOLATION IS NOW COMPLETE. NOW DO ENERGY "
        APRIM=AINTP(EM,EPRIM,18,APRIMZ,1,.FALSE.,.FALSE.);
    ]
]
ELSEIF (IAPRIMP.EQ.1) [
    IF (IAPRFL.EQ.0) [ " read in data from APRIME.DATA"
        /*
        OUTPUT;('0IAPRIM=1, i.e. uses NRC(based on NIST/ICRU)',
       ' corrections to bremsstrahlung cross section'/);
        */
        aprim_file = $cstring(hen_house) // 'pegs4' // $file_sep //
                     'aprime.data';
        aprim_unit=22;" want unit 22"
        aprim_unit=egs_get_unit(aprim_unit);
        IF( aprim_unit < 1 ) [
             $egs_fatal(*,'APRIM: failed to get a free fortran unit');
        ]
        open(aprim_unit,file=aprim_file,status='old',err=:no_aprim_file:);

        READ(aprim_unit,*) NAPRZ, NAPRE;
        IF (NAPRZ.GT.$NAPRZ) [
            OUTPUT; (//,' TOO MANY ELEMENTS FOR APRIME INTERPOLATION:',
            /,'   CHANGE $NAPRZ AND RECOMPILE PEGS'); $CALL_EXIT(24);]
        IF (NAPRE.GT.$NAPRE) [
            OUTPUT; (//,' TOO MANY ENERGIES FOR APRIME INTERPOLATION:',
            /,'   CHANGE $NAPRE AND RECOMPILE PEGS'); $CALL_EXIT(24);]
        READ(aprim_unit,*) (EPRIM(IE),IE=1,NAPRE);
        DO IE=1,NAPRE [ EPRIM(IE)=1.+EPRIM(IE)/RMP; ]
        DO IZ=1,NAPRZ [READ(aprim_unit,*)ZPRIM(IZ),(APRIMD(IE,IZ),IE=1,NAPRE);]
        IAPRFL=1;
        close(aprim_unit);
        ]
    EM=E/RMP;
    DO IE=1,NAPRE [ " INTERPOLATE APRIM OVER LOG(Z)  "
        APRIMZ(IE)=
        AINTP(Z,ZPRIM,NAPRZ,APRIMD(IE,1),$NAPRE,.TRUE.,.FALSE.);
        ]           " NOW DO ENERGY INTERPOLATION     "
    APRIM=AINTP(EM,EPRIM,NAPRE,APRIMZ,1,.FALSE.,.FALSE.);
    ]
ELSEIF (IAPRIMP.EQ.2) [
        IF(IAPRFL = 0)[IAPRFL=1;
        /*
        OUTPUT;('0IAPRIM = 2, i.e. uses NO corrections to bremsstrahlung',
        ' cross section'/);
        */
        ]
        APRIM=1.0]
ELSE [ OUTPUT IAPRIMP; (//,' ILLEGAL VALUE FOR IAPRIM: ',I4);
       $CALL_EXIT(24); ]
RETURN;
:no_aprim_file:
$egs_fatal(*,'Cannot open file $HEN_HOUSE/pegs4/aprime.data');
RETURN;
END; "END OF FUNCTION APRIM"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION AINTP(X,XA,NX,YA,ISK,XLOG,YLOG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;

"     LINEAR OR LOG INTERPOLATION FUNCTION.                          "

"CHANGED"
"REAL XA(1),YA(ISK,1);"
"TO"
"REAL XA(NX),YA(ISK,NX);"
"FOR SUN AFB 89/12/27"

$INTEGER NX,ISK;
$REAL4    X;
$REAL4    XA(NX),YA(ISK,NX);
LOGICAL XLOG,YLOG,XLOGL;

$INTEGER I,J;
$REAL4    XI,XJ,XV,YI,YJ;
XLOGL=XLOG;  "SET LOCAL VARIABLE"
"     FIND INTERVAL FOR X INTERPOLATION.                             "
DO J=2,NX[
IF (X.LT.XA(J))GO TO :NSTEP:;]
J=NX;
:NSTEP:    I=J-1;
IF (XA(I).LE.0.0) [XLOGL=.FALSE.;]
IF (.NOT.XLOGL)[ XI=XA(I); XJ=XA(J); XV=X;]
ELSE [XI=LOG(XA(I)); XJ=LOG(XA(J)); XV=LOG(X);]
IF (YLOG.AND.(YA(1,I).EQ.0.0.OR.YA(1,J).EQ.0.0))
   [AINTP=0.0;]
ELSE[
    IF(YLOG)[YI=LOG(YA(1,I));YJ=LOG(YA(1,J));
    IF(XJ.EQ.XI) [AINTP=YI;]
    ELSE [AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI);]
    AINTP=EXP(AINTP);]
    ELSE[YI=YA(1,I); YJ=YA(1,J);
         IF(XJ.EQ.XI) [AINTP=YI;]
         ELSE [AINTP=(YI*(XJ-XV)+YJ*(XV-XI))/(XJ-XI);]]
]
RETURN;
END; "END OF FUNCTION AINTP"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION TMXS(E);"MAXIMUM STEP SIZE VALID FOR MULTIPLE SCATTERING"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 E,TMXB;
$REAL4 SAFETY,TABSMX;
DATA SAFETY/0.8/,TABSMX/10.0/;
save SAFETY,TABSMX;
TMXS=AMIN1(TMXB(E)*SAFETY,TABSMX);
"THE FACTORE 'SAFETY' IS TO KEEP SOMEWHAT BELOW BETHE'S LIMIT"
"TABSMX IS AN ABSOLUTE LIMIT TO SIZE OF ELECTRON TRANSPORT,"
"  INDEPENDENT OF THE MULTIPLE SCATTERING LIMIT"
RETURN;
END;  "END OF FUNCTION TMXS"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION TMXB(E);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
$REAL4 E;
"THIS FUNCTION FINDS THE TRANSPORT DISTANCE WHICH AT THIS ENERGY"
"IS THE LARGEST CONSISTENT WITH BETHE'S CRITERION, NAMELY"
"  XC**2*B.LE.1;   SINCE XC ANB B ARE INCREASING FUNCTIONS OF T"
" THE TRANSPORT DISTANCE, THE CRITERION FOR TMXB IS THEN"
"  XC**2*B=1;      OTHER RELATIONS USED IN THE DERIVATION ARE"
"EXPLAINED IN SUBROUTINES MIX AND MOLIER.  THEY ARE:"
"  XC=XCC*SQRT(T)/(E*BETA**2); "
"  EXP(B)/B = BLCC*T/BETA**2;  "
"FROM THESE IS DERIVED THE EQUATION THIS FUNCTION IS BASED ON:"
"TMXB=(E**2*BETA**2/XCC**2)*BETA**2/LOG(BLCC*(E**2*BETA**2/XCC**2));"
;
$REAL4 ESQ,BETA2,PX2;
COMIN/DERCON,MOLVAR/;
ESQ=E**2;
BETA2=1.0-RMPSQ/ESQ;
PX2=ESQ*BETA2/XCCP**2;
TMXB=PX2*BETA2/LOG(BLCCP*PX2);
RETURN;
END;   "END OF FUNCTION TMXB"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION ALKE(E);"LOG OF KINETIC ENERGY"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 E;
COMIN/DERCON/;
ALKE=LOG(E-RMP);
"write(58,*)' alke,e,rm,e-rm ',alke,e,rmp,e-rmp;"
RETURN;
END;  "END OF FUNCTION ALKE"
"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION ALKEI(X);"INVERSE OF LOG OF KINETIC ENERGY"
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
$REAL4 x;
COMIN/DERCON/;
ALKEI=EXP(X) + RMP;
RETURN;
END;  "END OF FUNCTION ALKEI"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE PWLF1(NI,NIMX,XL,XU,XR,EP,ZTHR,ZEP,NIP,XFUN,XFI,
                 AX,BX,NALM,NFUN,AF,BF,VFUNS);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

"***PWLF1 IS A ROUTINE WHICH WILL FIT UP TO 10(CURRENTLY) FUNCTIONS  "
"   SIMULTANEOUSLY ON AN INTERVAL (XL,XU) OF THE INDEPENDENT VARIABLE"
"   X OF THE FUNCTIONS. THE FIT IS A PIECEWISE LINEAR FUNCTION OF    "
"   XFUN(X).  XFI IS THE INVERSE FUNCTION OF XFUN.  THE SUBINTERVALS "
"   ARE CHOSEN OF UNIFORM WIDTH IN XFUN(X) AND SUFFICIENT OF THEM    "
"   ARE CHOSEN SO THAT THE FIT GIVES A RELATIVE ERROR[EP FOR ALL     "
"   THE FUNCTIONS OVER ALL THE SUBINTERVALS.                         "
"   QFIT IS AN AUXILIARY FUNCTION.       "
"   EXPLANATION OF THE ARGUMENTS:                                    "
"   NI   ON RETURN IS NUMBER OF SUBINTERVALS USED FOR THE FIT.       "
"   XL   LOWER LIMIT OF INTERVAL ON WHICH TO FIT THE FUNCTIONS.      "
"   XU   UPPER LIMIT                                                 "
"   XR   VALUE OF X WHICH WILL BE FORCED TO BE A SUBINTERVAL BOUNDARY"
"        THE SIGNIFICANCE OF THIS IS THAT THE STRAIGHT LINES ON THE  "
"        SUBINTERVALS ARE CHOSEN TO FIT EXACTLY AT THE SUBINTERVAL   "
"        BOUNDARIES, THUS IF ONE WANTS AN EXACT FIT OF THE FUNCTIONS "
"        AT A PARTICULAR POINT, XR SHOULD BE SET TO THAT VALUE.      "
"        OTHERWISE XR SHOULD BE SET TO XH.  ANOTHER REQUIREMENT      "
"        IS THAT XU SHOULD BE LARGER THAN XL.                        "
"   EP   THE MAXIMUM RELATIVE ERROR ALLOWED THE FIT.                 "
"   NIP  THE MINUIMUM NUMBER OF POINTS INTERIOR TO (XL,XU) AT WHICH  "
"        THE FIT IS TO BE TESTED FOR RELATIVE ERROR VS. EP.          "
"   XFUN A FUNCTION OF X OVER WHICH IT IS HOPED THE FUNCTIONS TO BE  "
"        FIT ARE MORE LINEAR THAN OVER X.  XFUN IS EXPECTED TO BE    "
"        MONOTONICALLY INCREASING IN X.                              "
"   XFI  THE INVERSE OF XFUN. THAT IS XFI(XFUN(X))=X.                "
"   AX,BX ARE COEFFICIENTS USED AS SHOWN BELOW TO DETERMINE WHICH    "
"        SUBINTERVAL A VALUE OF X IS IN.                             "
"   AF,BF ARE ARRAYS OF COEFFICIENTS USED TO GET VALUES OF THE FUNCS."
"   THE PROCEDURE FOR FINDING THE FIT VALUE OF FUNCTION IFUN IS:     "
"   INTERV=AX*XFUN(X)+BX                                             "
"   VALUE=AF(INTERV,IFUN)*XFUN(X)+BF(INTERV,IFUN)                    "
"   NALM  IS THE MAXIMUM NUMBER OF SUBINTERVALS FOR WHICH ARRAY SPACE"
"         HAS BEEN ALLOCATED.                                        "
"   NFUN  IS THE NUMBER OF FUNCTIONS TO BE FITTED(SIMULTANEOUSLY,I.E."
"         ALL FUNCTIONS HAVE THE SAME XFUN AND SUBINTERVALS, AND ALL "
"         ARE REQUIRED TO BE FIT WITH MAX REL ERR[EP)                "
"   VFUNS IS A SUBROUTINE TO FILL AN ARRAY WITH THE VALUES OF THE    "
"   FUNCTIONS TO BE FITTED.                                          "
;
implicit none;

COMIN/EGS-IO/;

$INTEGER NI,NIMX,NIP,NALM,NFUN;
$REAL4    XL,XU,XR,EP,AX,BX,XFUN,XFI;
EXTERNAL XFI,VFUNS,XFUN;
$REAL4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN);
"   QFIT IS A LOGICAL FUNCTION WHICH IS TRUE IF THE STATED NUMBER    "
"   OF INTERVALS GIVES A SUFFICIENTLY CLOSE FIT.                     "
LOGICAL QFIT;

" IK: Variable declarations for implicit none"
$INTEGER NL,NU,IPRN,NJ,NK;
$REAL4    REM;
"   FIND # OF INTERVALS REQUIRED.                                    "
NL=0;
NU=1;
IPRN=0;
LOOP [NJ=MIN0(NU,NIMX);
"write(58,*)' 1 nj ',nj;"
IF (QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
 AX,BX,NALM,NFUN,AF,BF,VFUNS,0)) EXIT;
IF (NU.GE.NIMX) [
/*
OUTPUT NIMX,EP;
(' NUMBER OF ALLOCATED INTERVALS(=',I5,') WAS INSUFFICIENT'
       ,/ ,' TO GET MAXIMUM RELATIVE ERROR LESS THAN ',1P,G14.6);
*/
"write(58,*)' nj ',nj;"
NI=NJ;RETURN;]
NL=NU;
NU=NU*2;]
"   WE NOW HAVE AN UPPER AND LOWER LIMIT ON NI, REFINE IT.           "
NU=NJ ; "SAVE SUCCESSFUL INDEX"
WHILE(NU.GT.NL+1)["LOOP UNTIL CONVERGENCE"
NJ=(NL+NU)/2;
NK=NJ; "THIS IS NECESSARY BECAUSE QFIT MAY LOWER NJ,BUT NEED ORIGINAL"
" FOR SETTING NL OR MAY GET INTO INFINITE LOOP."
IF (QFIT(NJ,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
AX,BX,NALM,NFUN,AF,BF,VFUNS,0))[NU=NJ;]ELSE[NL=NK;]
]
"     NU IS NOW THE SMALLEST NI WHICH FITS OK.                       "
NI=NU;
IF (NI.EQ.NJ)RETURN;"LAST TEST WAS SUCCESS"
"     CALL IT ONCE MORE TO GET THE FITS.                             "
IF (.NOT.QFIT(NI,XL,XU,XR,EP,ZTHR,ZEP,REM,NIP,XFUN,XFI,
AX,BX,NALM,NFUN,AF,BF,VFUNS,0)) OUTPUT NI;
(' CATASTROPHE---DOES NOT FIT WHEN IT SHOULD,NI=',I5);
RETURN;
END;  "END OF SUBROUTINE PWLF1"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
LOGICAL FUNCTION QFIT(NJ,XL,XH,XR,EP,ZTHR,ZEP,REM,NJP,XFUN,XFI,
 AX,BX,NALM,NFUN,AF,BF,VFUNS,IPRN);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
COMIN/EGS-IO/;
"EXTERNAL XFUN,XFI,VFUNS;"
EXTERNAL VFUNS;
$REAL4    XFUN,XFI;
$INTEGER NJ,NALM,NFUN,NJP,IPRN;
$REAL4    XL,XH,XR,AX,BX,REM,EP;
$REAL4 FSXL(10),FSXH(10),FIP(10),FFIP(10),AFIP(10),RE(10),AER(10);
$REAL4 AF(NALM,NFUN),BF(NALM,NFUN),ZTHR(NFUN),ZEP(NFUN);
"     CONSTRUCT THE INTERVAL COEFFICIENTS.                             "
"     XR SHOULD BE IN THE INTERVAL (XL,XH).  IF NOT IT WILL BE SE TO TH"
"     NEAREST LIMIT.  SUBINTERVALS WILL BE ARRANGED SO                 "
"     THAT XR IS ALWAYS ON A SUBINTERVAL BOUNDARY.   THE PURPOSE OF THI"
"     FEATURE IS TO MORE EASILY FIT FUNCTIONS WHICH HAVE AN INTERIOR   "
"     DISCONTINUITY IN SLOPE.  EXAMPLES ARE THE MOLLER AND PAIR        "
"     CROSS SECTIONS WHICH CONTRIBUTE DISCONTINUITIES IN SLOPE         "
"     TO THE ELECTRON AND PHOTON INTERACTION PROBABILITIES IN          "
"     THE INTERIOR OF THE ENERGY RANGES FOR THESE PARTICLES.           "
"     IN ABLE TO GIVE SOME VALUE FOR X'S WHICH MAY LIE SLIGHTLY OUTSIDE"
"     THE INTERVAL (XL,XH) AN EXTRA SUBINTERVAL ON EACH SIDE OF (XL,XH)"
"     IS PROVIDED, WHICH USED THE SAME STRAIGHT LINES AS THE ADJACENT  "
"     INCLUDED SUBINTERVAL.  NJ IS THE TOTAL NUMBER OF SUBINTERVALS    "
"     AND NI IS DEFINED TO BE THE NUMBER OF INTERNAL SUBINTERVALS=NJ-2."
"     NJP IS THE MINUMUM NUMBER OF POINTS INTERIOR TO THE INTERVAL     "
"     (XL,XH) AT WHICH THE FIT IS TO BE TESTED.  A NUMBER NIP WILL BE  "
"     CHOSEN AS THE NUMBER OF INTERIOR POINTS WITHIN EACH SUBINTERVAL  "
"     AT WHICH TO TEST SO THAT NIP*NI]=NJP.                        "
$REAL4    XS,XFL,XFH,XFS,XM,DX,W,XLL,SXFL,XSXF,SXFH,DSXF,WIP,
         SXFIP,XIP;
$INTEGER NI,NIP,ISUB,IFUN,JSUB,IP;
$INTEGER nkp;
DATA NKP/3/;
save nkp;
IF (XH.LE.XL)[
OUTPUT XL,XH;(' QFIT ERROR:XL SHOULD BE < XH. XL,XH=',2G14.6);
QFIT=.FALSE.; RETURN;]
XS=AMAX1(XL,AMIN1(XH,XR));
"     GET NUMBER OF INTERNAL SUBINTERVALS ARE ALLOWED AND CHECK        "
NI=NJ-2;
"     AT LEAST 2 SUBINTERVALS ARE NEEDED IF XR(XS) IS NOT AN END POINT."
IF (((XS.EQ.XL.OR.XS.EQ.XH).AND.NI.GE.1).OR.NI.GE.2) [XFL=XFUN(XL);]
ELSE [QFIT=.FALSE.; RETURN;]
XFH=XFUN(XH);
XFS=XFUN(XS);
"write(58,*)'xfh,xfs,xh,xs ',xfh,xfs,xh,xs;"
"     SET SUBINTERVAL WIDTH.                                           "
XM=AMAX1(XFH-XFS,XFS-XFL);
DX=XFH-XFL;
W=XM/AMAX1(1.,AINT(NI*XM/DX));
"write(58,*)' w,xm,ni,dx ',w,xm,ni,dx;"
"     RESET NI TO HOW MANY WE'RE ACTUALLY GOING TO USE.                "
NI=NI-AINT(NI-DX/W);
"     COMPUTE HOW MANY INTERIOR POINTS TO SAMPLE IN EACH SUBINTERVAL.  "
NIP=MAX0(NKP,(NJP+NI-1)/NI);
"     MAKE NIP ODD                                                     "
NIP=(NIP/2)*2+1;
"     SET ACTUAL LOWER LIMIT OF INTERVAL.                              "
IF (XFH-XFS.LE.XFS-XFL) [XLL=XFL;]
ELSE [XLL=XFH-NI*W;]
"     COEFICIENTS FOR USER TO COMPUTE WHICH SUBINTERVAL TO USE.        "
"     ISUBINT=AX*XFUN(X)+BX                                            "
AX=1./W;
BX=2.-XLL*AX;
"     THE RIGHT BOUNDARY OF SUBINTERVAL I IS XFI(XLL+W*(I-1))          "
"     NOW COMPUTE THE FIT COEFFICIENTS FOR THE SUBINTERVALS            "
"     AND FIND MAXIMUM RELATIVE ERROR(REM).                            "
REM=0.0;
QFIT=.TRUE.;
"     LOOP OVER SUBINTERVALS                                           "
"     INITIALIZE LOWER BOUNDARY AND VALUE.                             "
SXFL=AMAX1(XLL,XFL);
ISUB=0;
XSXF=XFI(SXFL);
"write(58,*)' 1 xsxf ',XSXF;"
CALL VFUNS(XSXF,FSXL);
IF (IPRN.NE.0) WRITE(6,:FMT:) ISUB,SXFL,XSXF,(FSXL(IFUN),IFUN=1,NFUN);
:FMT: FORMAT(' QFIT:ISUB,SXF,XSXF,FSX()=',I4,1P,9G11.4/(1X,12G11.4));
DO ISUB=1,NI[
"     ALLOW FOR EXTRA SUBINTERVAL OUTSIDE THE MAIN INTERVAL            "
JSUB=ISUB+1;
SXFH=AMIN1(XLL+W*ISUB,XH);
XSXF=XFI(SXFH);
"write(58,*)' 2 xsxf ',XSXF;"
CALL VFUNS(XSXF,FSXH);
IF (IPRN.NE.0)WRITE(6,:FMT:)ISUB,SXFH,XSXF,(FSXH(IFUN),IFUN=1,NFUN);
DSXF=SXFH-SXFL;
"write(58,*)' xll,w,isub,xh ',xll,w,isub,xh;"
"write(58,*)' dsxf,sxfh,sxfl ',dsxf,sxfh,sxfl;"
DO IFUN=1,NFUN[
AF(JSUB,IFUN)=(FSXH(IFUN)-FSXL(IFUN))/DSXF;
BF(JSUB,IFUN)=(FSXL(IFUN)*SXFH-FSXH(IFUN)*SXFL)/DSXF;] "END OF IFUN"
"     LOOP OVER INTERIOR POINTS TO LOOK FOR MAX. REL.ERROR             "
"     COMPUTE INTERIOR POINT SPACING.                                  "
WIP=DSXF/(NIP+1);
"write(58,*)' dsxf,nip ',dsxf,nip;"
DO IP=1,NIP[
"     VALUE OF XFUN AT THE INTERIOR POINT OF THIS SUBINTERVAL.         "
SXFIP=SXFL+IP*WIP;
XIP=XFI(SXFIP);
"write(58,*)' sxfl,ip,wip ',sxfl,ip,wip;"
"     COMPUTE FUNCTION AT INTERIOR POINT                               "
"write(58,*)' xip ',XIP;"
CALL VFUNS(XIP,FIP);
"     COMPUTE FITTED VALUES.                                           "
DO IFUN=1,NFUN[
FFIP(IFUN)=AF(JSUB,IFUN)*SXFIP+BF(JSUB,IFUN);
AFIP(IFUN)=ABS(FIP(IFUN));
AER(IFUN)=ABS(FFIP(IFUN)-FIP(IFUN));
RE(IFUN)=0.0;
IF (FIP(IFUN).NE.0.0) [RE(IFUN)=AER(IFUN)/AFIP(IFUN);]
IF (AFIP(IFUN).GE.ZTHR(IFUN)) [REM=AMAX1(REM,RE(IFUN));]
ELSEIF (AER(IFUN).GT.ZEP(IFUN)) [QFIT=.FALSE.;]
] "END OF IFUN"
"*****WRITE OUT SO WE CAN SEE HOW WE ARE DOING.                        "
IF (IPRN.NE.0) [
OUTPUT ISUB,IP,SXFIP,XIP,REM,QFIT,(FIP(IFUN),FFIP(IFUN),
 RE(IFUN),AER(IFUN),IFUN=1,NFUN);
(1X,2I4,1P,2G12.5,6P,F12.0,L2,1P,2G11.4,6P,F11.0,1P,G11.4/
 (1X,3(1P,2G11.4,6P,F11.0,1P,G11.4)));]
] "END OF IP"
"     SAVE RIGHT BOUNDARY AND VALUE FOR NEXT SUBINTERVAL.              "
SXFL=SXFH;
DO IFUN=1,NFUN [FSXL(IFUN)=FSXH(IFUN);]
] "END OF ISUB"
"     SET UP SKIRTING SUBINTERVALS(VIA EXTRAPOLATION)                  "
DO IFUN=1,NFUN[
AF(1,IFUN)=AF(2,IFUN);
BF(1,IFUN)=BF(2,IFUN);
AF(NI+2,IFUN)=AF(NI+1,IFUN);
BF(NI+2,IFUN)=BF(NI+1,IFUN);] "END OF IFUN"
QFIT=QFIT.AND.REM.LE.EP;
NJ=NI+2; "TELL ACTUAL NO. OF SUBINTERVALS USED."
"write(58,*)'ni ',ni;"
RETURN;
END; "END OF LOGICAL FUNCTION QFIT

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION QD(F,A,B,MSG);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

implicit none;
COMIN/EGS-IO/;
$REAL4    A,B,F;
EXTERNAL F;
CHARACTER*6 MSG;
logical first_time;
data first_time/.true./;
save first_time;

"    CHANGED"

"    REAL*8 DCADRE,ADUM,BDUM,ERRDUM,MSG;"

"    TO"

"    DOUBLE PRECISION DCADRE,ADUM,BDUM,ERRDUM;"
"    CHARACTER*6 MSG;"

"    FOR SUN COMPATIBILITY AFB 89/12/27"

"DOUBLE PRECISION DCADRE,ADUM,BDUM,ERRDUM;"
$REAL4 DCADRE,ADUM,BDUM,ERRDUM;
$INTEGER IER;

ADUM=A; BDUM=B;
QD=DCADRE(F,ADUM,BDUM,$AERR,$RERR,ERRDUM,IER);
"write(58,*)' qd ',QD;"
IF (IER.GT.66)[
    OUTPUT IER,MSG,A,B,QD,ERRDUM;
    (' DCADRE CODE=',I4,' FOR INTEGRAL ',A6,' FROM ',1P,G14.6,' TO ',G14.6,
    ',QD=',G14.6,'+-',G14.6);
]
RETURN;
END;  "END OF FUNCTION QD"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
"DOUBLE PRECISION FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER);"
$REAL4 FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER);
implicit none;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
"                                                                  "
"                                                                  "
"------------------------------------------------------------------"
"-DCADRE--------D-------LIBRARY 1----------------------------------"
"------------------------------------------------------------------"
"                                                                  "
"FUNCTION:          - INTEGRATE F(X) FROM A TO B, USING CAUTIOUS   "
"                     ADAPTIVE ROMBERG EXTRAPOLATION.              "
"                                                                  "
"USAGE:             - FUNCTION DCADRE(F,A,B,AERR,RERR,ERROR,IER)   "
"                                                                  "
"PARAMETERS: DCADRE - ESTIMATE OF THE INTEGRAL OF F(X) FROM A TO B."
"                                                                  "
"            F      - A SINGLE-ARGUMENT REAL FUNCTION SUBPROGRAM   "
"                     SUPPLIED BY THE USER.  F MUST BE DECLARED    "
"                     EXTERNAL IN THE CALLING PROGRAM.             "
"                                                                  "
"            A,B    - THE TWO ENDPOINTS OF THE INTERVAL OF         "
"                     INTEGRATION (INPUT).                         "
"                                                                  "
"            AERR   - DESIRED ABSOLUTE ERROR IN THE ANSWER (INPUT)."
"                                                                  "
"            RERR   - DESIRED RELATIVE ERROR IN THE ANSWER (INPUT)."
"                                                                  "
"            ERROR  - ESTIMATED BOUND ON THE ABSOLUTE ERROR OF     "
"                     THE OUTPUT NUMBER, DCADRE.                   "
"                                                                  "
"            IER    - ERROR PARAMETER                              "
"                                                                  "
"                     WARNING ERROR(WITH FIX) = 64 + N             "
"                                                                  "
"                       N = 1 IMPLIES THAT ONE OR MORE SINGULAR-   "
"                             ITIES WERE SUCCESSFULLY HANDLED.     "
"                                                                  "
"                       N = 2 IMPLIES THAT, IN SOME SUBINTERVAL(S),"
"                             THE ESTIMATE OF THE INTEGRAL WAS     "
"                             ACCEPTED MERELY BECAUSE THE ESTIMATED"
"                             ERROR WAS SMALL, EVEN THOUGH NO REG- "
"                             ULAR BEHAVIOR WAS RECOGNIZED.        "
"                                                                  "
"                     TERMINAL ERROR = 128 + N                     "
"                                                                  "
"                       N = 3 FAILURE DUE TO INSUFFICIENT INTERNAL "
"                             WORKING STORAGE.                     "
"                                                                  "
"                       N = 4 FAILURE.  THIS MAY BE DUE TO TOO MUCH"
"                             NOISE IN THE FUNCTION (RELATIVE TO   "
"                             THE GIVEN ERROR REQUIREMENTS) OR DUE "
"                             TO AN ILL-BEHAVED INTEGRAND.         "
"                                                                  "
"                       N = 5 INDICATES THAT RERR IS GREATER THAN  "
"                             0.1, OR RERR IS LESS THAN 0.0, OR    "
"                             RERR IS TOO SMALL FOR THE PRECISION  "
"                             OF THE MACHINE.                      "
"                                                                  "
"------------------------------------------------------------------"
"VERSION DATE:      - 8 OCTOBER 1974                               "
"                                                                  "
"MORTRAN VERSION    - 4 OCTOBER 1984/1545 (W. R. NELSON)           "
"------------------------------------------------------------------"
"                                                                  "
; "NOTE: SEMI-COLON TO CLEAR MORTRAN BUFFER                        "
"                                                                  "
"ADDED"
"EXTERNAL F;"
"FOR SUN AFB 89/12/27"

"EXTERNAL F;"

DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4),TS(2049);
DIMENSION IBEGS(30),BEGIN(30),FINIS(30),EST(30);
DIMENSION REGLSV(30);
LOGICAL H2CONV,AITKEN,RIGHT,REGLAR,REGLSV;
/*
DOUBLE PRECISION T,R,AIT,DIF,RN,TS,BEGIN,FINIS,EST,AITLOW;
DOUBLE PRECISION H2TOL,AITTOL,LENGTH,JUMPTL,ZERO,P1,HALF,ONE;

"CHANGED"
"DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,F,ERROR,A,B;"
"TO"
"DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B;"
"FOR SUN AFB 89/12/27"

DOUBLE PRECISION TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B;

DOUBLE PRECISION AERR,RERR,STEPMN,STEPNM,STAGE,CUREST,FNSIZE;
DOUBLE PRECISION PREVER,BEG,FBEG,END,FEND,STEP,ASTEP,TABS,HOVN;
DOUBLE PRECISION FN,SUM,SUMABS,ABSI,VINT,TABTLM,ERGL,ERGOAL;
DOUBLE PRECISION ERRA,ERRR,FEXTRP,ERRER,DIFF,SING,FEXTM1,ALG4O2;
DOUBLE PRECISION H2NXT,SINGNX,SLOPE,FBEG2,ALPHA;
DOUBLE PRECISION ERRET,H2TFEX,FI;
*/
$REAL4 T,R,AIT,DIF,RN,TS,BEGIN,FINIS,EST,AITLOW;
$REAL4 H2TOL,AITTOL,LENGTH,JUMPTL,ZERO,P1,HALF,ONE;
$REAL4 TWO,FOUR,FOURP5,TEN,HUN,CADRE,ERROR,A,B;
$REAL4 AERR,RERR,STEPMN,STEPNM,STAGE,CUREST,FNSIZE;
$REAL4 PREVER,BEG,FBEG,END,FEND,STEP,ASTEP,TABS,HOVN;
$REAL4 FN,SUM,SUMABS,ABSI,VINT,TABTLM,ERGL,ERGOAL;
$REAL4 ERRA,ERRR,FEXTRP,ERRER,DIFF,SING,FEXTM1,ALG4O2;
$REAL4 H2NXT,SINGNX,SLOPE,FBEG2,ALPHA;
$REAL4 ERRET,H2TFEX,FI;
"ADDED"
"REAL RVAL,F;"
"FOR SUN AFB 89/12/27"

$REAL4 RVAL,F;

$INTEGER IBEGS,IER,ISTAGE,IBEG,IEND,L,N,LM1,N2,ISTEP,II,III,I,ISTEP2,IT,NNLEFT;
$INTEGER MAXTS,MAXTBL,MXSTGE;
DATA AITLOW,H2TOL,AITTOL,JUMPTL,MAXTS,MAXTBL,MXSTGE/1.1D0,.15D0,
     .1D0,.01D0,2049,10,30/;
DATA RN(1),RN(2),RN(3),RN(4)/.7142005D0,.3466282D0,.843751D0,
     .1263305D0/;
DATA ZERO,P1,HALF,ONE,TWO,FOUR,FOURP5,TEN,HUN/0.0D0,0.1D0,0.5D0,
     1.0D0,2.0D0,4.0D0,4.5D0,10.0D0,100.0D0/;
save MAXTS,MAXTBL,MXSTGE;
ALG4O2=LOG10(TWO);
/CADRE,ERROR,CUREST,VINT/=ZERO;
IER=0;
LENGTH=ABS(B-A);
IF(LENGTH.EQ.ZERO) GO TO 215;
IF(RERR.GT.P1.OR.RERR.LT.ZERO) GO TO 210;
IF(AERR.EQ.ZERO.AND.(RERR+HUN).LE.HUN) GO TO 210;
ERRR=RERR;
ERRA=ABS(AERR);
STEPMN=(LENGTH/FLOAT(2**MXSTGE));
STEPNM=DMAX1(LENGTH,ABS(A),ABS(B))*TEN;
STAGE=HALF;
ISTAGE=1;
FNSIZE=ZERO;
PREVER=ZERO;
REGLAR=.FALSE.;
"                              THE GIVEN INTERVAL OF INTEGRATION   "
"                                IS THE FIRST INTERVAL CONSIDERED. "
BEG=A;

"CHANGED"
"FBEG=F(BEG)*HALF;"
"TO"
"RVAL=BEG;FBEG=F(RVAL)*HALF;"
"FOR SUN AFB 89/12/27"

RVAL=BEG;FBEG=F(RVAL)*HALF;
"write(*,*)' rval, f, half ',rval,F(RVAL),half;"

TS(1)=FBEG;
IBEG=1;
END=B;

"CHANGED"
"FEND=F(END)*HALF;"
"TO"
"RVAL=END;FEND=F(RVAL)*HALF;"
"FOR SUN AFB 89/12/27"

RVAL=END;FEND=F(RVAL)*HALF;

TS(2)=FEND;
IEND=2;
5 RIGHT=.FALSE.;
"                              INVESTIGATION OF A PARTICULAR       "
"                                SUBINTERVAL BEGINS AT THIS POINT. "
10 STEP=END - BEG;
ASTEP=ABS(STEP);
IF(ASTEP.LT.STEPMN) GO TO 205;
IF(STEPNM+ASTEP.EQ.STEPNM) GO TO 205;
T(1,1)=FBEG + FEND;
TABS=ABS(FBEG) + ABS(FEND);
L=1;
N=1;
H2CONV=.FALSE.;
AITKEN=.FALSE.;
15 LM1=L;
L=L + 1;
"                              CALCULATE THE NEXT TRAPEZOID SUM,   "
"                                T(L,1), WHICH IS BASED ON *N2* + 1"
"                                EQUISPACED POINTS. HERE,          "
"                                N2 = N*2 = 2**(L-1).              "
N2=N + N;
FN=N2;
ISTEP=(IEND - IBEG)/N;
IF(ISTEP.GT.1) GO TO 25;
II=IEND;
IEND=IEND + N;
IF(IEND.GT.MAXTS) GO TO 200;
HOVN=STEP/FN;
III=IEND;
FI=ONE;
DO I=1,N2,2[
TS(III)=TS(II);

"CHANGED"
"TS(III-1)=F(END - FI * HOVN);"
"TO"
"RVAL=END-FI*HOVN;TS(III-1)=F(RVAL);"
"FOR SUN AFB 89/12/27"

RVAL=END-FI*HOVN;TS(III-1)=F(RVAL);

FI=FI+TWO;
III=III-2;
II=II-1;]
ISTEP=2;
25 ISTEP2=IBEG + ISTEP/2;
SUM=ZERO;
SUMABS=ZERO;
DO I=ISTEP2,IEND,ISTEP[
SUM=SUM + TS(I);
SUMABS=SUMABS + ABS(TS(I));]
T(L,1)=T(L-1,1)*HALF+SUM/FN;
TABS=TABS*HALF+SUMABS/FN;
ABSI=ASTEP*TABS;
N=N2;
"                              GET PRELIMINARY VALUE FOR *VINT*    "
"                                FROM LAST TRAPEZOID SUM AND UPDATE"
"                                THE ERROR REQUIREMENT *ERGOAL*    "
"                                FOR THIS SUBINTERVAL.             "
IT=1;
VINT=STEP*T(L,1);
TABTLM=TABS*TEN;
FNSIZE=DMAX1(FNSIZE,ABS(T(L,1)));
ERGL=ASTEP*FNSIZE*TEN;
ERGOAL=STAGE*DMAX1(ERRA,ERRR*ABS(CUREST+VINT));
"                              COMPLETE ROW L AND COLUMN L OF *T*  "
"                                ARRAY.                            "
FEXTRP=ONE;
DO I=1,LM1[
FEXTRP=FEXTRP*FOUR;
T(I,L)=T(L,I) - T(L-1,I);
T(L,I+1)=T(L,I) + T(I,L)/(FEXTRP-ONE);]
ERRER=ASTEP*ABS(T(1,L));
"                              PRELIMINARY DECISION PROCEDURE      "
"                                IF L = 2 AND T(2,1) = T(1,1),     "
"                                GO TO 135 TO FOLLOW UP THE        "
"                                IMPRESSION THAT INTERGRAND IS     "
"                                STRAIGHT LINE.                    "
IF(L.GT.2) GO TO 40;
IF(TABS+P1*ABS(T(1,2)).EQ.TABS) GO TO 135;
GO TO 15;
"                              CACULATE NEXT RATIOS FOR            "
"                                COLUMNS 1,...,L-2 OF T-TABLE      "
"                                RATIO IS SET TO ZERO IF DIFFERENCE"
"                                IN LAST TWO ENTRIES OF COLUMN IS  "
"                                ABOUT ZERO                        "
40 DO 45 I=2,LM1;
DIFF=ZERO;
IF(TABTLM+ABS(T(I-1,L)).NE.TABTLM) DIFF=T(I-1,LM1)/T(I-1,L);
T(I-1,LM1)=DIFF;
45 CONTINUE;
IF(ABS(FOUR-T(1,LM1)).LE.H2TOL) GO TO 60;
IF(T(1,LM1).EQ.ZERO) GO TO 55;
IF(ABS(TWO-ABS(T(1,LM1))).LT.JUMPTL) GO TO 130;
IF(L.EQ.3) GO TO 15;
H2CONV=.FALSE.;
IF(ABS((T(1,LM1)-T(1,L-2))/T(1,LM1)).LE.AITTOL) GO TO 75;
50 IF(REGLAR) GO TO 55;
IF(L.EQ.4) GO TO 15;
55 IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175;
GO TO 145;
"                              CAUTIOUS ROMBERG EXTRAPOLATION      "
60 IF(H2CONV) GO TO 65;
AITKEN=.FALSE.;
H2CONV=.TRUE.;
65 FEXTRP=FOUR;
70 IT=IT + 1;
VINT=STEP*T(L,IT);
ERRER=ABS(STEP/(FEXTRP-ONE)*T(IT-1,L));
IF(ERRER.LE.ERGOAL) GO TO 160;
IF(ERGL+ERRER.EQ.ERGL) GO TO 160;
IF(IT.EQ.LM1) GO TO 125;
IF(T(IT,LM1).EQ.ZERO) GO TO 70;
IF(T(IT,LM1).LE.FEXTRP) GO TO 125;
IF(ABS(T(IT,LM1)/FOUR-FEXTRP)/FEXTRP.LT.AITTOL)
FEXTRP=FEXTRP*FOUR;
GO TO 70;
"                              INTEGRAND MAY HAVE X**ALPHA TYPE    "
"                                SINGULARITY                       "
"                                RESULTING IN A RATIO OF *SING*  = "
"                                2**(ALPHA + 1)                    "
75 IF(T(1,LM1).LT.AITLOW) GO TO 175;
IF(AITKEN) GO TO 80;
H2CONV=.FALSE.;
AITKEN=.TRUE.;
80 FEXTRP=T(L-2,LM1);
IF(FEXTRP.GT.FOURP5) GO TO 65;
IF(FEXTRP.LT.AITLOW) GO TO 175;
IF(ABS(FEXTRP-T(L-3,LM1))/T(1,LM1).GT.H2TOL) GO TO 175;
SING=FEXTRP;
FEXTM1=ONE/(FEXTRP - ONE);
AIT(1)=ZERO;
DO 85 I=2,L;
AIT(I)=T(I,1) + (T(I,1)-T(I-1,1))*FEXTM1;
R(I)=T(1,I-1);
DIF(I)=AIT(I) - AIT(I-1);
85 CONTINUE;
IT=2;
90 VINT=STEP*AIT(L);
ERRER=ERRER*FEXTM1;
IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 95;
ALPHA=LOG10(SING)/ALG4O2 - ONE;
IER=MAX0(IER,65);
GO TO 160;
95 IT=IT + 1;
IF(IT.EQ.LM1) GO TO 125;
IF(IT.GT.3) GO TO 100;
H2NXT=FOUR;
SINGNX=SING+SING;
100 IF(H2NXT.LT.SINGNX) GO TO 105;
FEXTRP=SINGNX;
SINGNX=SINGNX+SINGNX;
GO TO 110;
105 FEXTRP=H2NXT;
H2NXT=FOUR*H2NXT;
110 DO 115 I=IT,LM1;
R(I+1)=ZERO;
IF(TABTLM+ABS(DIF(I+1)).NE.TABTLM) R(I+1)=DIF(I)/DIF(I+1);
115 CONTINUE;
H2TFEX=-H2TOL*FEXTRP;
IF(R(L)-FEXTRP.LT.H2TFEX) GO TO 125;
IF(R(L-1)-FEXTRP.LT.H2TFEX) GO TO 125;
ERRER=ASTEP*ABS(DIF(L));
FEXTM1=ONE/(FEXTRP - ONE);
DO 120 I=IT,L;
AIT(I)=AIT(I) + DIF(I)*FEXTM1;
DIF(I)=AIT(I) - AIT(I-1);
120 CONTINUE;
GO TO 90;
"                              CURRENT TRAPEZOID SUM AND RESULTING "
"                                EXTRAPOLATED VALUES DID NOT GIVE  "
"                                A SMALL ENOUGH *ERRER*.           "
"                                NOTE -- HAVING PREVER .LT. ERRER  "
"                                IS AN ALMOST CERTAIN SIGN OF      "
"                                BEGINNING TROUBLE WITH IN THE FUNC"
"                                TION VALUES. HENCE, A WATCH FOR,  "
"                                AND CONTROL OF, NOISE SHOULD      "
"                                BEGIN HERE.                       "
125 FEXTRP=DMAX1(PREVER/ERRER,AITLOW);
PREVER=ERRER;
IF(L.LT.5) GO TO 15;
IF(L-IT.GT.2.AND.ISTAGE.LT.MXSTGE) GO TO 170;
ERRET=ERRER/(FEXTRP**(MAXTBL-L));
IF(ERRET.GT.ERGOAL.AND.(ERGL+ERRET).NE.ERGL) GO TO 170;
GO TO 15;
"                              INTEGRAND HAS JUMP (SEE NOTES)      "
130 IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 170;
"                                NOTE THAT  2*FN=2**L              "
DIFF=ABS(T(1,L))*(FN+FN);
GO TO 160;
"                              INTEGRAND IS STRAIGHT LINE          "
"                                TEST THIS ASSUMPTION BY COMPARING "
"                                THE VALUE OF THE INTEGRAND AT     "
"                                FOUR *RANDOMLY CHOSEN* POINTS WITH"
"                                THE VALUE OF THE STRAIGHT LINE    "
"                                INTERPOLATING THE INTEGRAND AT THE"
"                                TWO END POINTS OF THE SUB-INTERVAL"
"                                IF TEST IS PASSED, ACCEPT *VINT*  "
135 SLOPE=(FEND-FBEG)*TWO;
FBEG2=FBEG+FBEG;
DO 140 I=1,4;

"CHANGED"
"DIFF=ABS(F(BEG+RN(I)*STEP) - FBEG2-RN(I)*SLOPE);"
"TO"
"RVAL=BEG+RN(I)*STEP;DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE);"
"FOR SUN AFB 89/12/27"

RVAL=BEG+RN(I)*STEP;DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE);

IF(TABTLM+DIFF.NE.TABTLM) GO TO 155;
140 CONTINUE;
GO TO 160;
"                              NOISE MAY BE DOMINANT FEATURE       "
"                                ESTIMATE NOISE LEVEL BY COMPARING "
"                                THE VALUE OF THE INTEGRAND AT     "
"                                FOUR *RANDOMLY CHOSEN* POINTS WITH"
"                                THE VALUE OF THE STRAIGHT LINE    "
"                                INTERPOLATING THE INTEGRAND AT THE"
"                                TWO ENDPOINTS. IF SMALL ENOUGH,   "
"                                ACCEPT *VINT*                     "
145 SLOPE=(FEND-FBEG)*TWO;
FBEG2=FBEG+FBEG;
I=1;

"CHANGED"
"150 DIFF=ABS(F(BEG+RN(I)*STEP) - FBEG2-RN(I)*SLOPE);"
"TO"
"150 RVAL=BEG+RN(I)*STEP;DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE);"
"FOR SUN AFB 89/12/27"

150 RVAL=BEG+RN(I)*STEP;DIFF=ABS(F(RVAL) - FBEG2-RN(I)*SLOPE);

155 ERRER=DMAX1(ERRER,ASTEP*DIFF);
IF(ERRER.GT.ERGOAL.AND.(ERGL+ERRER).NE.ERGL) GO TO 175;
I=I+1;
IF(I.LE.4) GO TO 150;
IER=66;
"                              INTERGRATION OVER CURRENT SUB-      "
"                                INTERVAL SUCCESSFUL               "
"                                ADD *VINT* TO *DCADRE* AND *ERRER*"
"                                TO *ERROR*, THEN SET UP NEXT SUB- "
"                                INTERVAL, IF ANY.                 "
160 CADRE=CADRE + VINT;
ERROR=ERROR + ERRER;
IF(RIGHT) GO TO 165;
ISTAGE=ISTAGE - 1;
IF(ISTAGE.EQ.0) GO TO 220;
REGLAR=REGLSV(ISTAGE);
BEG=BEGIN(ISTAGE);
END=FINIS(ISTAGE);
CUREST=CUREST - EST(ISTAGE+1) + VINT;
IEND=IBEG - 1;
FEND=TS(IEND);
IBEG=IBEGS(ISTAGE);
GO TO 180;
165 CUREST=CUREST + VINT;
STAGE=STAGE+STAGE;
IEND=IBEG;
IBEG=IBEGS(ISTAGE);
END=BEG;
BEG=BEGIN(ISTAGE);
FEND=FBEG;
FBEG=TS(IBEG);
GO TO 5;
"                              INTEGRATION OVER CURRENT SUBINTERVAL"
"                                IS UNSUCCESSFUL. MARK SUBINTERVAL "
"                                FOR FURTHER SUBDIVISION. SET UP   "
"                                NEXT SUBINTERVAL.                 "
170 REGLAR=.TRUE.;
175 IF(ISTAGE.EQ.MXSTGE) GO TO 205;
IF(RIGHT) GO TO 185;
REGLSV(ISTAGE+1)=REGLAR;
BEGIN(ISTAGE)=BEG;
IBEGS(ISTAGE)=IBEG;
STAGE=STAGE*HALF;
180 RIGHT=.TRUE.;
BEG=(BEG+END)*HALF;
IBEG=(IBEG+IEND)/2;
TS(IBEG)=TS(IBEG)*HALF;
FBEG=TS(IBEG);
GO TO 10;
185 NNLEFT=IBEG - IBEGS(ISTAGE);
IF(IEND+NNLEFT.GE.MAXTS) GO TO 200;
III=IBEGS(ISTAGE);
II=IEND;
DO 190 I=III,IBEG;
II=II + 1;
TS(II)=TS(I);
190 CONTINUE;
DO 195 I=IBEG,II;
TS(III)=TS(I);
III=III + 1;
195 CONTINUE;
IEND=IEND + 1;
IBEG=IEND - NNLEFT;
FEND=FBEG;
FBEG=TS(IBEG);
FINIS(ISTAGE)=END;
END=BEG;
BEG=BEGIN(ISTAGE);
BEGIN(ISTAGE)=END;
REGLSV(ISTAGE)=REGLAR;
ISTAGE=ISTAGE + 1;
REGLAR=REGLSV(ISTAGE);
EST(ISTAGE)=VINT;
CUREST=CUREST + EST(ISTAGE);
GO TO 5;
"                              FAILURE TO HANDLE GIVEN INTEGRA-    "
"                                TION PROBLEM                      "
200 IER=131;
GO TO 215;
205 IER=132;
GO TO 215;
210 IER=133;
215 CADRE=CUREST + VINT;
220 DCADRE=CADRE;
9000 CONTINUE;
9005 RETURN;
END;  "END OF FUNCTION DCADRE"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE SPINIT(density_file);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;
implicit none;

COMIN/PMCONS,SPCOMM,DERCON,MOLVAR,BREMPRP,ELEMTB,LSPION,EPSTAR,THRESHP,
EGS-IO,MIXDAT,MISC/;

$REAL4 IMEV;
" IK: Variable declarations for implicit none"
$INTEGER IM,J,IZ,IE,I,ICHECK,IESPEL,IPEGEL,density_unit,lnblnk1,egs_get_unit;
$REAL4    VPLASM,ALIADG,EDENL,ALGASP,EPSTRH,
         TLRNCE,EPSTWT;
CHARACTER*256 density_file;

TOLN10=2.0*LOG(10.0);IM=-100;

IF(EPSTFLP < 0 | EPSTFLP > 1) [
        EPSTFLP = 0;
]
"ABOVE IS NRCC MOD DEC 1988"

IF(EPSTFLP=0)["DEFAULT TO STANDARD PEGS4 METHODS"

"MATERIAL MUST BE FOUND IN THE SSB TABLE OR THE S-P"
"      GENERAL FORMULA WILL BE USED.

"CHECK TO SEE IF MATERIAL IS A 'STERNHEIMER-SELTZER-BERGER' (SSB)"
"MATERIAL, FOR WHICH THE DENSITY EFFECT PARAMETERS ARE ALREADY"
"SPECIFIED.  IF IT IS NOT, THEN CALCULATE THEM USING THE GENERAL"
"FORMULA BY STERNHEIMER-PEIERLS (S-P)."

"STERNHEIMER-SELTZER-BERGER (SSB) LOOKUP TABLE SECTION:"
:TRY: DO IM=1,NUMSTMED [DO J=1,LMED
[IF (IDSTRN(J).NE.MEDTBL(J,IM)) NEXT :TRY:;]
"CALCULATION FOLLOWS IF A MATCH IS FOUND"
AFACT=STDATA(1,IM); SK=STDATA(2,IM); X0=STDATA(3,IM);
X1=STDATA(4,IM); IEV=STDATA(5,IM); CBAR=STDATA(6,IM);
IMEV=IEV*1.0E-6; "EV TO MEV"
VPLASM=SQRT(EDEN*R0*C**2/PIP);
GO TO :SSB-PARAMETERS-DEFINED:;]

"STERNHEIMER-PEIERLS (S-P) GENERAL FORMULA SECTION:"
IM=0;
"DETERMINE THE MEAN EXCITATION ENERGY, IMEV (IN MEV)"
IF (NEP.EQ.1) ["ELEMENT"
IZ=ZELEMP(1);
IF (IZ.EQ.1.OR.IZ.EQ.7.OR.IZ.EQ.8) ["I.E., DIATOMIC MOLECULE"
OUTPUT ; (' STOPPED IN SUBROUTINE SPINIT BECAUSE THIS',/,
 ' ELEMENT (H, N, OR O) CAN ONLY EXIST AS A DIATOMIC MOLECULE.',/,
 ' REMEDY:  USE COMP OPTION FOR H2, N2, OR O2 WITH NE=2,PZ=1,1'/,
 '          AND, IN THE CASE OF A GAS, DEFINE STERNHEIMER ID',/,
 '          (I.E., IDSTRN) LIKE H2-GAS');
$CALL_EXIT(21);]
IEV=ITBL(IZ);     "EV"
]

ELSE ["COMPOUND/MIXTURE---USE BRAGG ADDITIVITY RULE"
ALIADG=0.0;
DO IE=1,NEP [
IZ=ZELEMP(IE);
IF (IZ.EQ.1) [IEV=19.2;]   "EV"
ELSEIF (IZ.EQ.6) [IF (GASPP.EQ.0.0) [IEV=81.0;] ELSE [IEV=70.0;]]
ELSEIF (IZ.EQ.7) [IEV=82.0;]
ELSEIF (IZ.EQ.8) [IF (GASPP.EQ.0.0) [IEV=106.0;] ELSE [IEV=97.0;]]
ELSEIF (IZ.EQ.9) [IEV=112.0;]
ELSEIF (IZ.EQ.17) [IEV=180.0;]
ELSE [IEV=1.13*ITBL(IZ);]
"NRCC comment - above 7 lines reflect table 6 in ref 59 of SLAC-265"
"       Berger and Seltzer's fudge to get better agreement with expt"
ALIADG=ALIADG + PZP(IE)*ZELEMP(IE)*LOG(IEV);
]
ALIADG=ALIADG/ZC;
IEV=EXP(ALIADG);    "EV"
]

IMEV=IEV*1.0E-6;  "EV TO MEV"
"COMPUTE VARIOUS STERNHEIMER CONSTANTS"
IF (GASPP.EQ.0.0) [EDENL=EDEN;]
ELSE ["VPLASM MUST BE FOR NTP FOR A GAS, AND EDEN HAS"
"      BEEN DEFINED IN MIX FOR THE ACTUAL PRESSURE"
       EDENL=EDEN/GASPP;]
VPLASM = SQRT(EDENL*R0*C**2/PIP);
"ABOVE PATCHED JAN 9,1989 TO REFLECT ERROR POINTED OUT BY"
"PROF KAMAE, TOKYO UNIVERSITY, VIA HIDEO HIRAYAMA"

CBAR=1. + 2.*LOG(IMEV/(HBAR*2*PIP*VPLASM/ERGMEV));

IF (NEP.EQ.1.AND.INT(ZELEMP(1)).EQ.2.AND.GASPP.NE.0.0)[
          "SPECIAL HE(GAS) CASE"
X0=2.191; X1=3.0; SK=3.297;
]

ELSEIF (NEP.EQ.2.AND.INT(ZELEMP(1)).EQ.1
        .AND.INT(ZELEMP(2)).EQ.1) [
IF (GASPP.EQ.0.0) ["SPECIAL H2(LIQUID) CASE"
X0=0.425; X1=2.0; SK=5.949;
]
ELSE ["SPECIAL H2(GAS) CASE"
X0=1.837; X1=3.0; SK=4.754;
]
]

ELSE ["REGULAR CASES"
SK=3.0;
IF (GASPP.EQ.0.0) ["SOLIDS AND LIQUIDS"
IF (IEV.LT.100.0) [
IF (CBAR.LT.3.681) [X0=0.2; X1=2.0;]
ELSE [X0=0.326*CBAR - 1.0; X1=2.0;]
]
ELSE ["IEV GE 100.0"
IF (CBAR.LT.5.215) [X0=0.2; X1=3.0;]
ELSE [X0=0.326*CBAR - 1.5; X1=3.0;]
]
IF (X0.GE.X1) [OUTPUT X0,X1,CBAR;
(' STOPPED IN SPINIT DUE TO X0.GE.X1 , X0,X1,CBAR=',3G15.5,/
,' IF THIS IS GAS, YOU MUST DEFINE GASP(ATM)'); $CALL_EXIT(21);]
]
ELSE ["GASES---AT NTP AT THIS STAGE"
IF (CBAR.LT.10.0) [X0=1.6; X1=4.0;]
ELSEIF (CBAR.LT.10.5) [X0=1.7; X1=4.0;]
ELSEIF (CBAR.LT.11.0) [X0=1.8; X1=4.0;]
ELSEIF (CBAR.LT.11.5) [X0=1.9; X1=4.0;]
ELSEIF (CBAR.LT.12.25) [X0=2.0; X1=4.0;]
ELSEIF (CBAR.LT.13.804) [X0=2.0; X1=5.0;]
ELSE [X0=0.326*CBAR - 2.5; X1=5.0;]
]
]  "END OF STERNHEIMER-PEIERLS (S-P) GENERAL FORMULA SECTION"

:SSB-PARAMETERS-DEFINED:

"GAS PRESSURE CORRECTION COMES NEXT"
IF (GASPP.NE.0.0) [
ALGASP=LOG(GASPP);
CBAR=CBAR - ALGASP;
X0=X0 - ALGASP/TOLN10;
X1=X1 - ALGASP/TOLN10;
]

IF (IM.EQ.0) [AFACT=(CBAR - TOLN10*X0)/(X1 - X0)**SK;]
]"END OF EPSTFL=0 BLOCK"

ELSE[ "EPSTFL=1 BLOCK  I.E. READ IN THE INPUT FROM THE DENSITY"
     "INPUT FILE"
"get the name of the density file"
density_file=$cstring(density_file);
density_unit=20;
density_unit=egs_get_unit(density_unit);
IF( density_unit < 1 ) [
        $egs_fatal(*,'SPINIT: failed to get a free fortran unit');
]
open(density_unit,file=density_file,status='old',err=:no_density_file:);

READ(density_unit,:A:)EPSTTL;:A:  FORMAT(A);
READ(density_unit,*) NEPST,IEV,EPSTRH,NELEPS;
READ(density_unit,*) (ZEPST(I),WEPST(I),I=1,NELEPS);
READ(density_unit,*) (EPSTEN(I),EPSTD(I),I=1,NEPST);

close(density_unit);

IF(NEPST>150)[OUTPUT NEPST;
(//' *****NEPST=',I4,' IS GREATER THAN THE 150 ALLOWED');$CALL_EXIT(22);]
"CONVERT TO TOTAL ENERGIES"
DO I=1,NEPST[EPSTEN(I) = EPSTEN(I) + RMP;]
IMEV = IEV*1.E-06;

"CHECK THAT WE HAVE COVERED ENERGY RANGES NEEDED"
IF( AEP < EPSTEN(1))[OUTPUT EPSTEN(1),AEP;
(//' ****LOWEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E10.3/
T20,'WHICH IS HIGHER THAN THE VALUE OF AE=',1P,E10.3,' MEV'/
' ***IT HAS BEEN SET TO AE***'//);EPSTEN(1) = AEP;]
IF( UEP > EPSTEN(NEPST))[ OUTPUT EPSTEN(NEPST),UEP;
(//' ****HIGHEST ENERGY INPUT FOR DENSITY EFFECT IS',1P,E10.3/
T20,'WHICH IS LOWER THAN THE VALUE OF UE=',1P,E10.3,' MEV'/
' ***IT HAS BEEN SET TO UE***'//);EPSTEN(NEPST) = UEP;]

"DO A CHECK ON THE COMPOSITION AND DENSITY TO INSURE THE RIGHT DELTA"
"HAS BEEN PICKED UP. ALLOW A TOLERANCE OF 1 PERCENT ERROR ON THE"
"COMPOSITION BY WEIGHT."

ICHECK=0; "FLAG GETS SET TO UNITY IF THE COMPOSITION DOES NOT MATCH"
    TLRNCE=0.01; "TOLERANCE ALLOWED ON FRACTION BY WEIGHT"

"FIRST CHECK THAT THE NUMBER OF ELEMENTS ARE THE SAME"
IF(NELEPS.NE.NEP) ICHECK=1;

"NOW CHECK THAT THE DENSITIES ARE THE SAME WITHIN TOLERANCE"
IF( (ICHECK.EQ.0)  .AND.
  ( (EPSTRH.LT.((1.0-TLRNCE)*RHOP)) .OR.
    (EPSTRH.GT.((1.0+TLRNCE)*RHOP))
  ) ) ICHECK=1; "DENSITY IS OUT OF RANGE"
"WE MUST FIRST NORMALIZE THE PEGS FRACTIONS BY WEIGHT TO ENSURE THEY"
"ARE NORMALIZED TO UNITY"
EPSTWT = 0.0;DO I=1,NEP[ EPSTWT = EPSTWT + RHOZP(I);]
IF(EPSTWT=0.0)[
OUTPUT;(//' *****IN SPINIT***SOMETHING WRONG, MOLECULAR WEIGHT OF',
'MOLECULE IS ZERO (I.E. SUM OF RHOZ)***'//);]

IF(ICHECK.EQ.0)[
    IESPEL=0;    "INITIALIZE ESP ELEMENT COUNTER"
    ICHECK=1;    "ASSUME FAILURE"
    LOOP["LOOP OVER ESP COMPONENTS"
        IESPEL=IESPEL+1;
        IPEGEL=0;    "INITIALIZE PEGS ELEMENT COUNTER"
        LOOP["LOOP OVER PEGS COMPONENTS"
            IPEGEL=IPEGEL+1;
            IF(INT(ZELEMP(IPEGEL)).EQ.ZEPST(IESPEL))[ICHECK=0;EXIT;]
            ]WHILE(IPEGEL.LT.NEP);
            IF( (ICHECK.EQ.0) "Z OF ELEMENT MATCHES"
            .AND.
            ( (WEPST(IESPEL).LT.((1.0-TLRNCE)*RHOZP(IPEGEL)/EPSTWT))
             .OR. (WEPST(IESPEL).GT.((1.0+TLRNCE)*RHOZP(IPEGEL)/EPSTWT))
            ) ) ICHECK=1; "MATCHED ELEMENT BUT WEIGHT FRACTION WRONG"
        ]WHILE(IESPEL.LT.NELEPS);
    ] "END OF TEST FOR ICHECK = 0"

IF(ICHECK.EQ.1)[ "PRINT MESSAGE AND STOP"
OUTPUT;
(////'0*** COMPOSITION IN INPUT DENSITY FILE DOES NOT MATCH ',
' THAT BEING USED BY PEGS'//' ***** QUITTING EARLY***'////);
$CALL_EXIT(23); " ERRORS DETECTED";
]


]"END OF EPSTFL=1 BLOCK"


SPC1=2.*PIP*R0**2*RMP*EDEN*RLCP;
SPC2=LOG((IMEV/RMP)**2/2.0);
/*
OUTPUT;(//' PARAMETERS COMPUTED IN SPINIT.'//1X,64('-'));
IF(IM.EQ.0) [OUTPUT ;
(' STERNHEIMER-PEIERLS GENERAL FORMULA USED FOR THE DENSITY EFFECT,');]
ELSEIF(IM.GT.0) [OUTPUT;
(' STERNHEIMER-SELTZER-BERGER TABLE USED FOR DENSITY EFFECT');]
ELSEIF(IM = -1) [OUTPUT;
(' STERNHEIMER-SELTZER-BERGER DENSITY EFFECT DATA SUPPLIED BY USER');]
ELSE[
OUTPUT EPSTTL;(' DENSITY EFFECT READ IN DIRECTLY:'/T10,A);]
OUTPUT;(1X,64('-')/);
OUTPUT IEV;(/' ADJUSTED MEAN IONIZATION = ',F8.2,' EV'/1X,38('-')//);
IF(EPSTFLP = 0) [
  write(i_log,*)' IEV,VPLASM,CBAR,X0,X1,SK,AFACT= ',
        IEV,VPLASM,CBAR,X0,X1,SK,AFACT;
]
*/
"$DUMP SPC1,SPC2;"

RETURN;
:no_density_file:
$egs_fatal(*,' Failed to open density file ',density_file);
RETURN;
END;  "END OF SUBROUTINE SPINIT"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE MIX;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
;

implicit none;

" IK: Variable declarations for implicit none"
$INTEGER I,IZZ;
$REAL4    AL183,ZAB,V2000;

" IK: Function declarations for implicit none"
$REAL4 FCOULCP,XSIFP;

COMIN/MIMSD,MIXDAT,MOLVAR,PMCONS,DERCON,RADLEN,BREMPRP/;
$REAL4 XSI(20),ZZX(20),FZC(20),FCOUL(20),ZZ(20);
" MOLVAR - - MOLECULAR VARIABLES NEEDED BY DIFFER, AND MOLIER      "

" THE FOLLOWING ASSUMES THAT THE MATERIAL BEING DEALT WITH         "
" IS EITHER A COMPOUND, OR A HOMOGENEOUS MIXTURE.                  "
"          MOLECULAR VARIABLES                                     "
" NE       NUMBER OF DIFFERENT TYPES OF ATOMS IN THE MATERIAL.     "
" PZ(I)    PROPORTION OF ELEMENT OF TYPE I.  IF A COUMPOUND,       "
" THEN PZ(I) WILL BE THE NUMBER OF ATOMS OF TYPE I IN THE MOLECULE."
" IF A MIXTURE,SUCH AS CONCRETE, PZ(I) COULD BE THE PER CENT OF    "
" THE ATOMS WHICH ARE OF TYPE I.                                   "
" Z(I)     PERIODIC NUMBER OF ATOMS OF TYPE I                      "
" WA(I)    ATOMIC WEIGHT FOR ATOMS OF TYPE I.                      "
" WM = SUM(PZ(I)*WA(I)) = MOLECULAR  WEIGHT IF A COUMPOUND         "
" OR A 'MIXTURE WEIGHT' IF A MIXTURE.                              "
" RHO      DENSITY OF THE MATERIAL. (IN GRAMS/CM**3)               "
" RHOZ(I)  PARTIAL DENSITY DUE TO ATOMS OF TYPE I. (GM/CM**3)      "
"          ELECTRON DENSITY VARIABLE                               "
" ZC = SUM(PZ(I)*Z(I)) = NUMBER OF ELECTRONS/MOLECULE              "
"          BREMSSTRAHLUNG AND PAIR PRODUCTION VARIABLES ARE WEIGHTE"
" BY PZ(I)*Z(I)**2 FOR THE NUCLEUS, AND BY PZ(I)*Z(I)*XSI(I) FOR   "
" ATOMIC ELECTRONS.                                                "
" TPZ = SUM(PZ(I))                                                 "
" XSI(I) = LOG(A1440/Z(I)**(2./3.))/(LOG(A183/Z(I)**(1./3.))  -    "
"               FCOUL(Z(I)) )                                      "
" ZZX(I) =  PZ(I)*Z(I)*(Z(I)+XSI(I)) = BREMS AND PAAR WEIGHTS      "
" EZ = ZC/TPZ  EFFECTIVE Z                                         "
" ZT = SUM(ZZX(I))                                                 "
" ZA = LOG(A183)*ZT   BUTCHER AND MESSELS L.C.'A' (1960)P.18       "
" ZB = SUM(ZZX(I)*LOG(Z(I)**(-1./3.)  B&M'S L.C.'B' IBID.          "
" ZF = SUM(ZZX(I)*FCOUL(Z(I))),WHERE FCOUL IS THE COULOMB          "
" CORRECTION FUNCTION.                                             "
" RATIOS--                                                         "
" ZG = ZB/ZT ,EXP(ZG)=WEIGHTED GEOMETRIC MEAN OF Z**(-1/3)         "
" ZP = ZB/ZA , B&M IBID.P18 L.C.'P'                                "
" ZV= (ZB-ZF)/ZT                                                   "
" ZU = (ZB-ZF)/ZA                                                  "
"          MULTIPLE SCATTERING VARIABLES                           "
" ACCORDING TO MESSEL AND CRAWFORD(1970), MOST OF THE MULTIPLE     "
" SCATTERING DUE TO THE FIELD OF THE ATOMIC ELECTRONS IS ALREADY   "
" ACCOUNTED FOR BY THE DISCRETE MOLLER SCATTERING. HENCE,THE       "
" FOLLOWING VARIABLES ARE ONLY WEIGHTED BY PZ(I)*Z(I)**2           "
" HOWEVER I HAVE NOT JUSTIFIED THE ABOVE ASSERTION THEORETICALLY   "
" THEORETICALLY, AND COMPARISON OF EXPERIMENTS WITH EGS HAVE       "
" SHOWN EGS PHOTON SPECTRUM DEFICIENT IN THE BACKWARD DIRECTION.   "
" THEREFORE, I WILL EXPERIMENT WITH RESTORING THE ELECTRON SCATTER-"
" ING TERM.  ITS CONTRIBUTION WILL BE REPRESENTED BY THE MACRO VAR-"
" IABLE, $FUDGEMS, WHICH WILL HAVE THE VALUE 0.0 FOR NO ELECTRON   "
" SCATTERING AND 1.0 FOR FULL ELECTRON SCATTERING.  AND WE NOW HAVE"
" WEIGHTING BY PZ(I)*Z(I)*(Z(I)+$FUDGEMS).                         "
" ZZ(I) = PZ(I)*Z(I)*(Z(I)+$FUDGEMS) "
" ZS = SUM(ZZ(I))                                                  "
" ZE = SUM(ZZ(I)*LOG(Z(I)**(-2./3.)))                              "
" ZX = SUM(ZZ(I)*LOG(1.+3.34*(FSC*Z(I))**2))                       "
"               ELECTON DENSITY(ELECTRONS/CM**3)                   "
" EDEN=AN*RHO/WM*ZC                                                "
"          RADIATION LENGTH                                        "
" USEFUL FOR GAUGING THE STEP SIZE, EVEN IF IT IS NOT USED AS THE  "
" UNIT OF DISTANCE.                                                "
"  1./RLC =(AN*RHO/WM)*4.0*FSC*R0**2*                              "
"    SUM( Z(I)*(Z(I)+XSI(I))*(LOG(A183*Z(I)**(-1./3.)-FCOUL(Z(I))) "
"        =(AN*RHO/WM)*4.*FSC*R0**2*(ZAB-ZF)                        "
" INPUT MOLECULAR VARIABLES AND COMPUTE Z-RELATED PARAMETERS       "
/*
OUTPUT ; (/' IN SUBROUTINE MIX: '/);
IF (GASPP.EQ.0.0) [OUTPUT NEP,RHOP;
(' NUMBER OF ELEMENTS = ',I3,',  DENSITY=',1P,G15.6,' (G/CM**3)');]
ELSE [OUTPUT NEP,RHOP,GASPP;
(' NUMBER OF ELEMENTS = ',I3,',  DENSITY=',1P,G15.6,' (G/CM**3) AT NTP',
 '  GAS PRESSURE=',1P,G15.6,' ATM.');]
OUTPUT (I,ZELEMP(I),WAP(I),PZP(I),RHOZP(I),
I=1,NEP);
('0  I       Z(I)           WA(I)          PZ(I)         RHOZ(I) '/
' INDEX   PERIODIC        ATOMIC       PROPORTION     PROPORTION '/
'          NUMBER         WEIGHT        BY NUMBER      BY WEIGHT '//
(I5,1P,4G15.6));
*/
"SCALE RHO FOR GASES BY THE GAS PRESSURE"
IF (GASPP.NE.0.0) [RHOP=GASPP*RHOP;]
"     FIND VARIOUS SUMS AND SET OTHER VARIABLES                        "
AL183 = LOG(A183);
/TPZ,WM,ZC,ZT,ZB,ZF,ZS,ZE,ZX,ZAB/=0.0;
DO I=1,NEP[
TPZ = TPZ + PZP(I);
WM = WM + PZP(I)*WAP(I);
ZC = ZC + PZP(I)*ZELEMP(I);
FZC(I) =(FSC*ZELEMP(I))**2;
FCOUL(I) = FCOULCP(ZELEMP(I));
XSI(I) = XSIFP (ZELEMP(I));
ZZX(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+XSI(I));
IF (ZELEMP(I).LE.4.0) [IZZ=ZELEMP(I);
ZAB=ZAB+ZZX(I)*ALRAD(IZZ);] "IN THE CASE OF Z.LE.4 "
ELSE [ZAB=ZAB+ZZX(I)*(AL183+LOG(ZELEMP(I)**(-1./3.)));] "Z.GT.4"
ZT = ZT + ZZX(I);
ZB = ZB + ZZX(I)*LOG(ZELEMP(I)**(-1./3.));
ZF = ZF + ZZX(I)*FCOUL(I);
ZZ(I) = PZP(I)*ZELEMP(I)*(ZELEMP(I)+$FUDGEMS);
ZS = ZS + ZZ(I);
ZE = ZE + ZZ(I)*((-2./3.)*LOG(ZELEMP(I)));
ZX = ZX + ZZ(I)*LOG(1.+3.34*FZC(I));
]
"END OF I LOOP"
EZ = ZC/TPZ;
ZA = AL183*ZT;
ZG = ZB/ZT;
ZP = ZB/ZA;
ZV = (ZB-ZF)/ZT;
ZU = (ZB-ZF)/ZA;
EDEN=AN*RHOP/WM*ZC;
RLCP = 1./( (AN*RHOP/WM)*4.0*FSC*R0**2*(ZAB-ZF) );
/*
OUTPUT WM,ZC,ZT,ZA,ZB,ZAB,ZF,ZG,ZP,ZV,ZU,ZS,ZE,ZX,RLCP,
 (I,XSI(I),ZZX(I),FZC(I),FCOUL(I),ZZ(I),I=1,NEP);
('0Z VARIABLES--WM,ZC,ZT,ZA,ZB,ZAB'/1P,6E14.6/
 '0ZF,ZG,ZP,ZV,ZU,ZS'/1P,6E14.6/'0ZE,ZX,RLC'/1P,3E14.6/
'0(I,XSI,ZZX,FZC,FCOUL,ZZ,I=1,NE)'/
 (I5,1P,5E14.6));
*/
"$DUMP EDEN;"

"NOW COMPUTE MATERIAL-DEPENDENT CONSTANTS FOR MULTIPLE SCATTERING"
"LET B BE MOLIERE'S UPPER CASE B, AND LET BLC BE MOLIERE'S LOWER CASE B"
"THEN USING SCOTT'S NOTATION, A MEASURE OF THE NUMBER OF SCATTERS IS"
"OMEGA0=EXP(BLC).  NOW B AND BLC ARE RELATED BY"
"BLC=B-ALOG(B);, OR EXP(BLC)=EXP(B)/B; "
"NOW LET T BE THE TRANSPORT DISTANCE IN RL. THEN,"
"OMEGA0=EXP(BLC)"
"      =( A6680*RHO*ZS*EXP(ZE/ZS)*RLC/(WM*EXP(ZX/ZS)) )*T/BETA**2"
"WHERE BETA IS V/C FOR THE PARTICLE"
"NOW SUPPOSE THAT XC IS CHI-SUB-C, THE CHARACTERISTIC ANGLE OF"
"MOLIERE'S THEORY.  THEN IT IS GIVEN BY"
"XC= (A22P9/RADDEG)*SQRT( ZS*RHO*RLC/WM ) * SQRT(T) /(E*BETA**2) "
" WHERE E IS THE ENERGY OF THE PARTICLE IN MEV."
"NOW IN MOLIERE'S THEORY, LET XRM BE XC*SQRT(B).  THEN"
" (MOLIERE'S REDUCE ANGLE)=(REAL ANGLE)/XRM."
"FOR THE VARIABLE SAMPLING DONE IN EGS, A DIFFERENT REDUCED"
"ANGLE IS USED:"
" (REDUCED ANGLE FOR VARIABLE SAMPLING)=(REAL ANGLE)/XRV "
" WHERE NOW XRV=XC*SQRT(BLC)."
"THIS IS DONE BECAUSE BLC IS MORE SIMPLY RELATED TO THE TRANSPORT"
"DISTANCE THAN IS B."

"WITH THIS BACKGROUND WE NOW PROCEED TO COMPUTE"
"XR0, TEFF0, BLCC, AND XCC, WHICH ARE PARAMETERS NEEDED IN EGS"
"THESE PARAMETERS ARE USED AS FOLLOWS:(IN OUR NOTATION)"
"XRM=XR0*SQRT(T*B/(T0*BMIN))/(E*BETA) "
"  WHERE B IS EVALUATED FOR DISTANCE T, AND T0 IS THE"
"  DISTANCE THAT WOULD GIVE B=BMIN. T0 IS A FUNCTION OF BETA, AND"
"  IS GIVEN BY THE EXPRESSION  "
"T0=TEFF0*BETA**2;  THIS IS ALSO THE DEFINING RELATION FOR TEFF0"
"BMIN IS THE MINIMUM VALUE OF B FOR WHICH MOLIERE CONSIDERED HIS THEORY"
"VALID.  WE CURRENTLY GIVE BMIN A VALUE OF 4.5."
"OMEGA0=BLCC*T/BETA**2  IS THE USEAGE OF BLCC"
"XRV= XCC*SQRT( T*BLC )/(E*BETA**2) IS THE USAGE OF XCC"

"WE NOW PROCEED TO SOLVE FOR THE ABOVE QUANTITIES."
"COMPARING THE TWO EXPRESSIONS FOR OMEGA0, WE CONCLUDE THAT:"

BLCCP= A6680*RHOP*ZS*EXP(ZE/ZS)*RLCP/(WM*EXP(ZX/ZS)) ;
"NOW USING THE EXPRESSION FOR OMEGA0 AT B=BMIN,WE HAVE"
" OMEGA0=EXP(BLCMIN)"
"       =EXP(BMIN)/BMIN"
"       =BLCC*T0/BETA**2"
"       =BLCC*TEFF0    ,     THEREFORE"

TEFF0P = ( EXP(BMIN)/BMIN )/BLCCP;

"COMPARING THE TWO EXPRESSION FOR XRV WE CONCLUDE THAT"
"XC= XCC * SQRT(T) /(E*BETA**2)"
"COMPARING THIS WITH OUR PREVIOUS EXPRESSION FOR XC, WE OBTAIN"

XCCP= (A22P9/RADDEG) * SQRT( ZS*RHOP*RLCP/WM );

"NOW COMPARING THE TWO EXPRESSIONS FOR XRM WE OBTAIN"
"XRM=XC*SQRT(B)       USING DEFINITION OF XRM"
"   =(XCC(i_med)*SQRT(T)/(E*BETA**2)) *SQRT(B)  AFTER SUBSTITUTING FOR XC"
"   =XR0*SQRT((T*B)/(T0*BMIN))/(E*BETA)  USING EXPRESSION DEFINING XR0"
"   =XR0*SQRT((T*B)/(TEFF0*BETA**2*BMIN))/(E*BETA)  EXPANDING T0"
" THUS AFTER SOME CANCELLATION AND SOLVING FOR XR0 WE OBTAIN"

XR0P = XCCP*SQRT(TEFF0P*BMIN);

"THIS COMPLETE THE MS CALCULATIONS"
/*
OUTPUT BLCCP,XCCP,TEFF0P,XR0P;
('0BLCC,XCC,TEFF0,XR0=',1P,4E14.5);
*/
RETURN;
END; "END OF SUBROUTINE MIX"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
SUBROUTINE DIFFER;
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"
implicit none;
;

" IK: Variable declarations for implicit none"
$REAL4 AL183,F10,F20,A1DEN,A2DEN,B1DEN,B2DEN,C1DEN,C2DEN;
INTEGER I;

COMIN/MOLVAR,BREMPRP,DBRPR,DERCON,RADLEN/;
"**********************************************************************"
"***THE DIFFERENTIAL CROSS-SECTIONS OF BREMSSTRAHLUNG AND PAIR       "
"   PRODUCTION ARE Z-DEPENDENT.  BUTCHER AND MESSEL USE A SAMPLING   "
"   TECHNIQUE FOR BREMSSTRAHLUNG WHICH ALSO DEPENDS ON THE LARGEST   "
"   AND SMALLEST ALLOWED ENERGY VALUES.                              "
"   THIS IS NOW TAKEN INTO ACCOUNT BY THE FUNCTION ILOG2(E/AP) WHICH "
"   GIVES THE NUMBER OF SUBDISTRIBUTIONS NEED TO PRODUCE PHOTONS DOWN"
"   TO THE LIMIT AP.                                                 "
"   THE DIFFERENTAL CROSS SECTIONS USED FOR BREMS AND PAIR ARE--     "
"   (THEY ARE CROSS SECTION PER RADIATION LENGTH)                    "

"***BELOW 50MEV (BETHE-HEITLER)--                                      "
"         BREMS--                                                      "
"     PHI1=(LOG(2)*(4/3+1/(9*LOG(A183)*(1+ZP)))* (1/LOG(2)*(1-EPS)/EPS)"
"    1 * A(DELTAPRIME) + (1/2) * (2*EPS) * B(DELTAPRIME)               "
"         PAIR --                                                      "
"     PHI2=(2/3 - 1/(36*LOG(A183)*(1+ZP)))*(1) * C(DELTAPRIME)         "
"    1  + (1/12*(4/3+1/(9*LOG(A183)*(1+ZP))))* (12*(EPS-1/2)**2)       "
"    2 * A(DELTAPRIME)                                                 "
"       WHERE A,B,C ARE SCREENING REJECTION FUNCTIONS GIVEN BY         "
"       A(D)=(3*F1(D)-F2(D)+8*ZG)/(3*F1(0)-F2(0)+8*ZG)                 "
"       B(D)=(F1(D)+4*ZG)/(F1(0)+4*ZG)                                 "
"       C(D)=(3*F1(D)+F2(D)+16*ZG)/(3*F1(0)+F2(0)+16*ZG)               "
"       AND WHERE                                                      "
"       DELTAPRIME= 136.*EXP(ZG)*RM*DEL= DELCM *DEL                    "
"       AND                                                            "
"       DEL =  EPS/(E*(1-EPS))      BREMSSTRAHLUNG                     "
"           =  1/(E*EPS*(1-EPS))    PAIR PRODUCTION                    "
"       F1(D) AND F2(D) ARE SCREENING FUNCTIONS GIVEN APPROXIMATELY BY "
"             IF D.LE.1 ,THEN                                          "
"       F1(D) = 20.867 - 3.242*D + 0.625*D**2                          "
"       F2(D) = 20.209 - 1.930*D - 0.086*D**2                          "
"         BUT IF D.GT.1 ,THEN                                          "
"       F1(D)=F2(D)= 21.12 - 4.184*ALOG(D+0.952)                       "
"         IN ADDITION WE HAVE THAT                                     "
"       F1(0)= 4.*ALOG(A183)                                           "
"       F2(0)= F1(0) - 2./3.                                           "
"***ABOVE 50 MEV (COULOMB CORRECTED BETHE HEITLER)                     "
"         BREMS--                                                      "
"     PHI1=(LOG(2)*(4/3+1/(9*LOG(A183)*(1+ZU)))* (1/LOG(2)*(1-EPS)/EPS)"
"    1 * A(DELTAPRIME) + (1/2) * (2*EPS) * B(DELTAPRIME)               "
"         PAIR --                                                      "
"     PHI2=(2/3-1/(36*LOG(A183)*(1+ZU)))* 1 * C(DELTAPRIME)            "
"    1  + (1/12*(4/3+1/(9*LOG(A183)*(1+ZU))))* (12*(EPS-1/2)**2)       "
"    2  * A(DELTAPRIME)                                                "
"       WHERE A,B,AND C ARE NOW GIVEN BY                               "
"       A(D) = (3*F1(D)-F2(D)+8*ZV)/(3*F1(0)-F2(0)+8*ZV)               "
"       B(D) = (F1(D)+4*ZV)/(F1(0)+4*ZV)                               "
"       C(D) = (3*F1(D)+F2(D)+16*ZV)/(3*F1(0)+F2(0)+16*ZV)             "
"       AND DELTAPRIME,DEL,F1, AND F2 ARE THE SAME AS BELOW 50 MEV.    "
"   BREMSSTRAHLUNG ALPHA(I), I=1,...,N.  ALPHA(N+1)=0.5                "
AL2 = LOG(2.);
AL183= LOG(A183);
ALPHIP(1)= AL2*(4./3. + 1./(9.*AL183*(1.+ZP)));
ALPHIP(2)= AL2*(4./3. + 1./(9.*AL183*(1.+ZU)));
"*****PAIR PRODUCTION DIFFERENTIAL CROSS-SECTION NUMBERS               "
ALFP1(1)= 2./3. - 1./(36.*AL183*(1.+ZP));
ALFP1(2)= 2./3. - 1./(36.*AL183*(1.+ZU));
ALFP2(1)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZP)));
ALFP2(2)= (1./12.)*(4./3. + 1./(9.*AL183*(1+ZU)));
"*****BRANCHING RATIO FOR PAIR PRODUCTION SAMPLING                     "
BPARP(1)= ALFP1(1)/(ALFP1(1)+ALFP2(1));
BPARP(2)= ALFP1(2)/(ALFP1(2)+ALFP2(2));

"*****WE MUST ALWAYS HAVE A,B,C(DELTA) POSITIVE. SHOWER ASSURES THIS BY"
"     REQUIRING DEL.LT.DELPOS(),AND HENCE THAT DELTA.LT.DELCM *DELPOS()"
"     THE CROSS-OVER POINT IS IN THE DELTA.GT.1 REGION,AND THE CROSSING"
"     CONDITION REDUCES TO --                                          "
"       F1(D) + 4*ZG = 0     IF  E.LT.50 MEV                           "
"       F1(D) + 4*ZV = 0     IF  E.GT.50 MEV                           "
"     OR --                                                            "
"       21.12 - 4.184*ALOG(DELCM *DELPOS(1)+0.952) +4.*ZG =0     E.LT.5"
"       21.12 - 4.184*ALOG(DELCM *DELPOS(2)+0.952) +4.*ZV =0     E.GT.5"
"       THUS DELPOS IN THE TWO ENERGY REGIONS IS GIVEN BY              "
DELCMP= 136.0*EXP(ZG)*RMP;
DELPOSP(1)= (EXP((21.12+4.*ZG)/4.184)-0.952)/DELCMP;
DELPOSP(2)= (EXP((21.12+4.*ZV)/4.184)-0.952)/DELCMP;
"     CALCULATION OF THE BETHE-HEITLER(B-H) A,B,C(DELTA).AND THE       "
"     COULUMB CORRECTED(CC) A,B,C(DELTA).  THE SHOWER PROGRAM COMPUTES "
"     THESE SIX SCREENING REJECTION FUNCTION WITH THE EXPRESSIONS--    "
"       DL1(LVL)+DELTA*(DL2(LVL)+DELTA*DL3(LVL))   IF DELTA.LT.1 ,AND B"
"       DL4(LVL)+DL5(LV)*ALOG(DELTA+DL6(LVL))      IF DELTA.GE.1       "
"       WHERE LVL IS USED TO SELECT THE FUNCTION--                     "
"       LVL=1   B-H A(DELTA)                                           "
"          =2   B-H B(DELTA)                                           "
"          =3   B-H C(DELTA)                                           "
"          =4   CC  A(DELTA)                                           "
"          =5   CC  B(DELTA)                                           "
"          =6   CC  C(DELTA)                                           "
"     FIRST COMPUTE THE DENOMINATORS                                   "
F10=4.*AL183;
F20=F10 - 2./3.;
A1DEN =3.0*F10- F20 + 8.0*ZG;
A2DEN =3.0*F10- F20 + 8.0*ZV;
B1DEN = F10 + 4.0*ZG;
B2DEN = F10 + 4.0*ZV;
C1DEN = 3.0*F10+ F20 + 16.0*ZG;
C2DEN = 3.0*F10+ F20 + 16.0*ZV;
"     LVL=1, B-H A(DELTA)                                              "
DLP1(1)= (3.0*20.867-20.209+8.0*ZG)/A1DEN;
DLP2(1)= (3.0*(-3.242)-(-1.930))/A1DEN;
DLP3(1)= (3.0*(0.625)-(0.086))/A1DEN;
DLP4(1)= (2.0*21.12+8.0*ZG)/A1DEN;
DLP5(1)=  2.0*(-4.184)/A1DEN;
DLP6(1)=  0.952;
"     LVL=4, CC  A(DELTA)                                              "
DLP1(4)= (3.0*20.867-20.209+8.0*ZV)/A2DEN;
DLP2(4)= (3.0*(-3.242)-(-1.930))/A2DEN;
DLP3(4)= (3.0*(0.625)-(0.086))/A2DEN;
DLP4(4)= (2.0*21.12+8.0*ZV)/A2DEN;
DLP5(4)=  2.0*(-4.184)/A2DEN;
DLP6(4)=  0.952;
"     LVL=2, B-H B(DELTA)                                              "
DLP1(2)= (20.867+4.0*ZG)/B1DEN;
DLP2(2)= -3.242/B1DEN;
DLP3(2)=  0.625/B1DEN;
DLP4(2)= (21.12+4.0*ZG)/B1DEN;
DLP5(2)= -4.184/B1DEN;
DLP6(2)= 0.952;
"     LVL=5, CC B(DELTA)                                               "
DLP1(5)= (20.867+4.0*ZV)/B2DEN;
DLP2(5)= -3.242/B2DEN;
DLP3(5)= 0.625/B2DEN;
DLP4(5)= (21.12+4.0*ZV)/B2DEN;
DLP5(5)= -4.184/B2DEN;
DLP6(5)= 0.952;
"     LVL=3, B-H C(DELTA)                                              "
DLP1(3)= (3.0*20.867+20.209+16.0*ZG)/C1DEN;
DLP2(3)= (3.0*(-3.242)+(-1.930))/C1DEN;
DLP3(3)= (3.0*0.625+(-0.086))/C1DEN;
DLP4(3)= (4.0*21.12+16.0*ZG)/C1DEN;
DLP5(3)=  4.0*(-4.184)/C1DEN;
DLP6(3)=  0.952;
"     LVL=6, CC  C(DELTA)                                              "
DLP1(6)= (3.0*20.867+20.209+16.0*ZV)/C2DEN;
DLP2(6)= (3.0*(-3.242)+(-1.930))/C2DEN;
DLP3(6)= (3.0*0.625+(-0.086))/C2DEN;
DLP4(6)= (4.0*21.12+16.0*ZV)/C2DEN;
DLP5(6)=  4.0*(-4.184)/C2DEN;
DLP6(6)=  0.952;
"*****PUNCHED AND PRINTED OUTPUT                                       "
/*
OUTPUT ; (/,' IN SUBROUTINE DIFFER:'//
' DIFFERENTIAL CROSS-SECTION DATA,COMMON BREMPR'/
' DL1(6),DL2(6),DL3(6),DL4(6),DL5(6),DL6(6),ALPHI(2),BPAR(2),',
 'DELCM,DELPOS(2)');
OUTPUT DLP1,DLP2,DLP3,DLP4,DLP5,
DLP6,ALPHIP,BPARP,DELCMP,DELPOSP;
(1X,6E14.5);
*/
RETURN;
END; "END OF SUBROUTINE DIFFER"

$REAL4 function FCOULCP(Z);
"************************"
implicit none;
$REAL4 Z,ASQ;
COMIN/DERCON/;
ASQ=(FSC*Z)**2;
FCOULCP = ASQ*(1.0/(1.0+ASQ)+0.20206+ASQ*(-0.0369+
 ASQ*(0.0083+ASQ*(-0.002))));
RETURN;
END;  "END OF FUNCTION FCOULC"

$REAL4 function XSIFP(Z);
"**********************"
implicit none;
$REAL4 Z,FCOULCP;
$INTEGER IZ;
COMIN/RADLEN/;
IF (Z.LE.4.0) [IZ=Z;
XSIFP=ALRADP(IZ)/(ALRAD(IZ)-FCOULCP(Z));]
ELSE [
XSIFP=ALOG(A1440*Z**(-2./3.))/(ALOG(A183*Z**(-1./3.))-FCOULCP(Z));]
RETURN;
END;  "END OF FUNCTION XSIF"

"******************************************************************"
"                                STANFORD LINEAR ACCELERATOR CENTER"
$REAL4 FUNCTION ZTBL(IASYM);
"                                VERSION 4.00  --  26 JAN 1986/1900"
"******************************************************************"

;
implicit none;
COMIN/ELEMTB,EGS-IO/;
$TYPE IASYM,IA;
$INTEGER ie;
DATA IA/'A'/;
save ia;
IF (IASYM.EQ.IA)["ALTERNATE SYMBOL FOR ARGON" ZTBL=18.0;RETURN;]
"     PUT IN THE REST LATER                                 "
DO IE=1,NET[
IF (IASYM.EQ.ASYMT(IE)) [ZTBL=IE; RETURN;]
]
OUTPUT IASYM,NET;
(1X,A2,' NOT AN ATOMIC SYMBOL FOR AN ELEMENT WITH Z LE ',I3);
ZTBL=0.0;
RETURN;
"END OF FUNCTION ZTBL" END;
