
###############################################################################
#
#  EGSnrc configuration example for gcc and gfortran
#  Copyright (C) 2015 National Research Council Canada
#
#  This file is part of EGSnrc.
#
#  EGSnrc is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Affero General Public License as published by the
#  Free Software Foundation, either version 3 of the License, or (at your
#  option) any later version.
#
#  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for
#  more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
#
#  Author:          Ernesto Mainegra-Hing, 2011
#
#  Contributors:
#
###############################################################################
#
#  EGSnrc configuration file
#
#  This is a working example configuration file for the GNU compiler suite
#  version 4.5.1 20101208 (SUSE Linux) using gfortran on openSUSE 11.4
#  (x86_64), codename Celadon.
#
#  ATTENTION: This file is just for reference! You can however load it in
#  either egs_gui or egs_inprz with the configuration tool and create the
#  proper machine specific files machine.mortran, machine.macros, machine.f
#  as well as compile the C utilities files.
#
#  One could also use the script $HEN_HOUSE/scripts/configure from its
#  location, but the EGS_CONFIG file will be created from scratch through
#  a series of user-provided inputs.
#
#  BEWARE: HEN_HOUSE must be set to the proper location below !!!!
#
###############################################################################


DSEP = /

my_machine = gfortran-suse11.4
canonical_system = x86_64-unknown-linux-gnu
make_prog = gmake

HEN_HOUSE = /home/mainegra/HEN_HOUSE/
SPEC_DIR = $(HEN_HOUSE)specs/

# Include the standard Unix spec file
#
include $(SPEC_DIR)unix.spec

# Include definitions common for all systems.
# These are mainly directory names, executable names, etc.,
# which are constructed from the previous definitions.
#
include $(SPEC_DIR)all_common.spec

# Fortran compiler name and options
#
F77 = gfortran
F77_LINK = gfortran
FCFLAGS =  -fPIC
FOPT = -O3 -ffast-math
FDEBUG = -g
FLIBS =
FOUT = -o
FOBJE = o


# C compiler name and options
#
CC = gcc
C_FLAGS = -O2 -fPIC
COUT = -o

# The following is for creating a DSO
# (dynamic shared object, also known as DLL in the Windows world)
# At this point we don't have a procedure in place to determine
# the compile/link flags necessary to create a DSO.
# We therefore put generic values here that are known to work
# on Linux with the GNU, PGI and Intel compilers, on Windows
# with the GNU compiler and on IRIX with the SGI compiler.
# It is up to the user to adjust if this does not work for them.
# Note that the -Wl,-Bsymbolic option is needed on the systems tested
# to make fortran common blocks local to the DSO.
#
SHLIB_FLAGS = -shared -Wl,-Bsymbolic

# When using the GNU compiler on Linux, one must link against the static
# g2c library, otherwise I/O is shared between the
# main process and the library => the library process fails
# because units that it wants to open are already opened
# by the main process.
# The following variable is set to be empty, but if you use
# the GNU compiler set it to /usr/lib/libg2c.a (or wherever your
# static g2c library is installed).
#
SHLIB_LIBS =

# Use the following make variable in EGSnrc user codes that
# use the new parallel processing implementation to set the variable
# EGS_EXTRA_OBJECTS
#
CUTIL_OBJECTS = $(HEN_HOUSE)lib/$(my_machine)/egs_c_utils.o

# Use the following variable in EGSnrc user codes that
# use a BEAMnrc user code compiled and linked as a DSO
# (dynamic shared object, a.k.a DLL in the Windows world)
# as a particle source.
#
BEAMLIB_OBJECTS = $(HEN_HOUSE)lib/$(my_machine)/load_beamlib.o

# load_beamlib uses system calls to load a DSO and to resolve the addresses
# of the various functions in the DSO (dlopen and dlsym on Unix,
# LoadLibrary and GetProcAddress on Windows). On Linux, Windows with GCC
# and various other Unixes the system library that must be linked to get
# access to these system calls is dl. If this is not the case for you,
# adjust accordingly.
#
BEAMLIB_EXTRA_LIBS = -ldl $(IAEA_LIB)

# FC_FLAGS gets used for compiling the EGSnrc fortran routines and for
# linking for EGSnrc user-codes written in C. We set FC_FLAGS by
# default to be given by $(FCFLAGS) $(FOPT). This is OK for most
# compilers. Unfortunately, some Fortran compilers insert a default
# main function and then complain about multiply defined main
# (theirs and the main of the user-code written in C), unless a special
# flag is passed. For instance, the PGI compiler needs -Mnomain.
# As I don't know how to test for this feature, it is left up to you
# to read the documentation of your compiler and adjust FC_FLAGS in
# case it does not work.
#
FC_FLAGS = $(FOPT) $(FCFLAGS)

# The following variables are needed to define the IAEA phase space library
# and the way EGSnrc user codes link against it.
#
dso = dso$(DSEP)$(my_machine)
abs_dso = $(HEN_HOUSE)egs++$(DSEP)$(dso)
ABS_DSO = $(abs_dso)$(DSEP)
IAEA_LIB = -L$(abs_dso) -Wl,-rpath,$(abs_dso) -liaea_phsp
IAEA_PHSP_MACROS = $(EGS_UTILS)iaea_phsp_macros.mortran
