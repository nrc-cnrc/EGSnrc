%C80
"#############################################################################"
"                                                                             "
"  EGSnrc egs++ egs_fac application mortran macros                            "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Iwan Kawrakow, 2008                                       "
"                                                                             "
"  Contributors:                                                              "
"                                                                             "
"#############################################################################"


REPLACE {$MXGE} WITH {2000};

/*
   We want to have an additional array of floating numbers with the size
   of the particle stack, which will have the attenuation wnweighting
   factors.
 */
REPLACE {;COMIN/STACK-EXTRA/;} WITH {
  common/extra_stack/ expmfp($MXSTACK),
                      is_fat($MXSTACK),
                      expmfpI,is_fatI;
  $REAL               expmfp,expmfpI;
  $INTEGER            is_fat,is_fatI;
};
APPEND {;COMIN/STACK-EXTRA/;} TO {;COMIN/STACK/;};
REPLACE {$TRANSFERPROPERTIESTO#FROM#;} WITH {
    X{P1}=X{P2};Y{P1}=Y{P2};Z{P1}=Z{P2};IR{P1}=IR{P2};
    WT{P1}=WT{P2};DNEAR{P1}=DNEAR{P2};LATCH{P1}=LATCH{P2};
    expmfp{P1}=expmfp{P2};
    is_fat{P1}=is_fat{P2};
};

/*! Make sure that ausgab gets called, even if the step is
    not positive. This is needed to correctly register
    region changes
*/
REPLACE {$CALL-HOWFAR-IN-ELECTR; } WITH{;
    IF(callhowfar | wt(np) <= 0) [
        call egs_howfar;
        IF( idisc = 0 & ustep <= 0 ) [
            IF( ustep < -1e-4 ) [
                ierust = ierust + 1;
                IF( ierust > 1000 )[
                    $egs_fatal(*,'Too many negative steps');
                    $CALL_EXIT(1);
                ]
            ]
            IF( ustep <= 0 ) [ ustep = 0; edep = 0; ]
            $AUSCALL($TRANAUSB);
            $electron_region_change;
            $AUSCALL($TRANAUSA);
        ]
    ]
};

/*
   We want to use the photon splitting technique introduced by
   Kawrakow & Fippel [PMB 45 (2000) 2163] implemented via
   the $SELECT-PHOTON-MFP macro.
 */
REPLACE {$SELECT-PHOTON-MFP;} WITH {;
    call select_photon_mfp(dpmfp);
    IF( dpmfp < 0 ) return;
};

/*
   Range rejection/Russian roulette
 */
REPLACE {$RANGE-DISCARD;} WITH {;
    IF( i_do_rr > 0 ) [
        call range_discard(tperp,range);
        IF( idisc > 0 ) goto :USER-ELECTRON-DISCARD: ;
        IF( idisc < 0 ) [ idisc=0; np = np-1; return; ]
    ]
};

REPLACE {$CALL-HOWNEAR(#);} WITH {;
    IF( range > dnear(np) ) [ call egs_hownear({P1}); ]
    ELSE [ {P1} = dnear(np); ]
    e_range = range;
};

subroutine calculate_photon_mfp(gmfp,cohfac);
implicit none;
$REAL gmfp,cohfac;
$declare_max_medium;
;
COMIN/PHOTIN,USEFUL,EPCONT,X-OPTIONS/;
$INTEGER lgle;
$REAL    GMFPR0;

$SET INTERVAL GLE,GE;
$EVALUATE GMFPR0 USING GMFP(GLE);
$SET-RHOF;
GMFP=GMFPR0/RHOF;
$RAYLEIGH-CORRECTION;
return; end;
;

subroutine calculate_photon_branching(gbr1,gbr2);
implicit none;
$REAL gbr1,gbr2;
$declare_max_medium;
;COMIN/PHOTIN,USEFUL,EPCONT/;
$INTEGER lgle;

$SET INTERVAL GLE,GE;
$EVALUATE GBR1 USING GBR1(GLE);
$EVALUATE GBR2 USING GBR2(GLE);
return; end;
;

subroutine do_old_rayleigh;
implicit none;
$declare_max_medium;
;
;COMIN/PHOTIN,USEFUL,EPCONT,STACK,RANDOM,UPHIOT,THRESH/;
$REAL xxx,x2,q2,CSQTHE,REJF,RNNORJ;
$INTEGER lxxx;

:RAYLEIGH-SAMPLING-LOOP1: LOOP [
    $RANDOMSET XXX;
    $SET INTERVAL XXX,RCO; $EVALUATE X2 USING RSCT(XXX);
    Q2=X2*RMSQ/(20.60744*20.60744);
    COSTHE=1.-Q2/(2.*E(NP)*E(NP));
    IF (ABS(COSTHE).GT.1) GO TO :RAYLEIGH-SAMPLING-LOOP1:;
    CSQTHE=COSTHE*COSTHE; REJF=(1.0+CSQTHE)/2.0;
    $RANDOMSET RNNORJ;
] UNTIL (RNNORJ <= REJF);
SINTHE=SQRT(1.0-CSQTHE); CALL UPHI(2,1);
return; end;
;
subroutine do_rayleigh;
implicit none;
$declare_max_medium;
;
;COMIN/PHOTIN,USEFUL,EPCONT,STACK,RANDOM,UPHIOT,THRESH/;
$INTEGER lgle;
LGLE=GE1(MEDIUM)*GLE+GE0(MEDIUM);
call egs_rayleigh_sampling(medium,e(np),gle,lgle,costhe,sinthe);
call uphi(2,1);
return; end;
;

subroutine compute_range(eke,elke,medium,lelec,range);
implicit none;
$REAL eke,elke,range;
$INTEGER medium,lelec;
;integer max_med; parameter (max_med = MXMED);
;COMIN/ELECIN/;
$REAL elkei,ekei,rhof,fedep,elktmp,dedxmid,aux;
$INTEGER lelke,lelktmp,qel;

qel = (1 + lelec)/2; rhof = 1;
$SET INTERVAL elke,eke;
$COMPUTE-RANGE;
return; end;
;
