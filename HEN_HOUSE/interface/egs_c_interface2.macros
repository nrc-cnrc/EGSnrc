%C80
"#############################################################################"
"                                                                             "
"  EGSnrc common block reorganization for C interface                         "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Iwan Kawrakow, 2003                                       "
"                                                                             "
"  Contributors:    Ernesto Mainegra-Hing                                     "
"                   Blake Walters                                             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  This is a set of macros that slightly re-organizes EGSnrc common blocks,   "
"  so that only a relatively small set of common blocks needs to be exported  "
"  as C structures. It is only needed when generating the EGSnrc fortran code "
"  used with the C inteface and should get included after egsnrc.macros.      "
"                                                                             "
"  In the original ecut, pcut are arrays of dimension $MXREG, where $MXREG is "
"  a macro that defines the maximum number of regions the geometry can have.  "
"  For the C/C++ interface we wish to completely decouple EGSnrc routines     "
"  from the geometry so that the C/C++ user code programmer can dynamically   "
"  allocate resources depending on the actual number of regions. We therefore "
"  use ecut, pcut, ecut_new, pcut_new to interact with the user with respect  "
"  to particle transport cut-off energies. ecut, ecut_new, pcut, pcut_new are "
"  initialized to zero by default. If the user does not wish to use transport "
"  thresholds different than the particle production thresholds ae and ap,    "
"  they don't need to do anything with ecut, ecut_new, pcut, pcut_new. If the "
"  user wants to use higher thresholds, possibly different from one region to "
"  another, then the user code must do the following:                         "
"                                                                             "
"  - In the function start_new_particle() called before the transport of      "
"    a new particle starts, the user should set pcut and ecut to the desired  "
"    values based on the region number of the top particle on the stack.      "
"                                                                             "
"  - In howfar(), the user should set ecut_new, pcut_new to the desired       "
"    values in the new region after the step (provided the particle is        "
"    entering a new region, i.e., irnew is different from ir(np), see the     "
"    geometry interface specs)                                                "
"                                                                             "
"#############################################################################"


" Single or double precision for floating point operations "
REPLACE {$REAL} WITH {EGS_Float};


" Take care of the rundom numner generator "
REPLACE {$NRANDOM} WITH {128};
REPLACE {;COMIN/RANDOM/;} WITH {;
    common/randomm/ rng_array($NRANDOM), rng_seed;
    integer*4       rng_seed;
    $REAL           rng_array;
};
REPLACE {$RANDOMSET#;} WITH {;
    IF( rng_seed > $NRANDOM ) [
        rng_seed = $NRANDOM;
        call egs_fill_rndm_array(rng_seed,rng_array);
        rng_seed = 1;
    ]
    {P1} = rng_array(rng_seed); rng_seed = rng_seed + 1;
};
REPLACE {$RNG-DEFAULT-INITIALIZATION;} WITH {;};
REPLACE {$INITIALIZERNGUSING#AND#;} WITH {;
 $egs_fatal(*,
 'The INITIALIZE RNG USING macro should not be used with the C++ interface!');
};

REPLACE {;COMIN/BOUNDS/;} WITH {

 ;common/bounds/ ecut, pcut, ecut_new, pcut_new, vacdst;
  $REAL          ecut, pcut, ecut_new, pcut_new, vacdst;

};

" Remove iprdst, ibrdst and ibr_nist, they will go into a "
" a cross section options common that will get exported   "
REPLACE {;COMIN/BREMPR/;} WITH {
 ;common/brempr/
     $LGN(DL(8,$MXMED)/1,2,3,4,5,6/),
     $LGN(ALPHI,BPAR,DELPOS(2,$MXMED)),
     $LGN(WA,PZ,ZELEM,RHOZ($MXMED,$MXEL)),
     PWR2I($MXPWR2I),
     $LGN(DELCM,ZBRANG,LZBRANG,NNE($MXMED)),
     ASYM($MXMED,$MXEL,2);
  $TYPE     ASYM;
  $REAL     $LGN(DL/1,2,3,4,5,6/),ALPHI,BPAR,DELPOS,WA,PZ,ZELEM,
            RHOZ,PWR2I,DELCM,ZBRANG,LZBRANG;
  $INTEGER  NNE;

};

" Remove ibcmp, which will go into the cross section options common "
" that will get exported                                            "
REPLACE {;COMIN/COMPTON-DATA/;} WITH {

  ;common/compton_data/ iz_array($MXTOTSH),be_array($MXTOTSH),
                        Jo_array($MXTOTSH),erfJo_array($MXTOTSH),
                        ne_array($MXTOTSH),shn_array($MXTOTSH),
                        shell_array($MXMDSH,$MXMED),
                        eno_array($MXMDSH,$MXMED),
                        eno_atbin_array($MXMDSH,$MXMED),n_shell($MXMED);
  $INTEGER              iz_array,ne_array,shn_array,
                        shell_array,eno_atbin_array,n_shell;
  $REAL                 be_array,Jo_array,erfJo_array,eno_array;

};

" Remove iedgfl and iphter, to go into the cross section options common "
REPLACE {;COMIN/EDGE/;} WITH
{;
   COMMON/EDGE/binding_energies($MXSHELL,$MXELEMENT),
               interaction_prob($MXSHELL,$MXELEMENT),
               relaxation_prob($MXTRANS,$MXELEMENT),
               edge_energies($MXEDGE,$MXELEMENT),
               edge_number($MXELEMENT),
               edge_a($MXEDGE,$MXELEMENT),
               edge_b($MXEDGE,$MXELEMENT),
               edge_c($MXEDGE,$MXELEMENT),
               edge_d($MXEDGE,$MXELEMENT);
   $REAL       binding_energies, interaction_prob, relaxation_prob,
               edge_energies, edge_a,edge_b,edge_c,edge_d;
   $INTEGER    edge_number;
};

" Remove spin_effects, which determines a cross section being used     "
" and is therefore logically better to be in the cross section options "
" common. smaxir used to be an array that provides a max. geometrical  "
" step size restriction on a region-by-region basis. But we wish to    "
" decouple EGSnrc for the geometry (see comments about ecut, pcut      "
" above). smaxir, smax_new are set by default to 1e10, i.e. no step    "
" size restriction. If the user wishes to control smax, possibly on a  "
" region by region bases, then                                         "
"   - set smaxir to the desired value in start_new_particle()          "
"   - set smax_new to the desired value in howfar(), if the particle   "
"     will enter a new region after the step.                          "
REPLACE {;COMIN/ET-Control/;} WITH {
  ;common/ET_control/
              smaxir,smax_new,estepe,ximax,skindepth_for_bca,
              transport_algorithm,bca_algorithm,exact_bca;
    $REAL     smaxir,smax_new,estepe,ximax,skindepth_for_bca;
    $INTEGER  transport_algorithm,bca_algorithm;
    $LOGICAL  exact_bca;
};

" From MEDIA, the only variables that the C user should have access to "
" rho and nmed (the functions egs_add_medium and egs_set_medium are    "
" provided for accessing media names)                                  "
" => split COMIN/MEDIA/ into 2 commons and export only the second      "
REPLACE {;COMIN/MEDIA/;} WITH {
  ;COMMON/MEDIA_p/ $LGN(RLC,RLDU,MSGE,MGE,MSEKE,
                   MEKE,MLEKE,MCMFP,MRANGE,IRAYLM,IPHOTONUCM($MXMED)),
                   MEDIA(24,$MXMED);
   $TYPE    MEDIA;
   $REAL    RLC,RLDU;
   $INTEGER MSGE,MGE,MSEKE,MEKE,MLEKE,MCMFP,MRANGE,IRAYLM,
            IPHOTONUCM;
   common/media/   rho($MXMED),photon_xsections,eii_xfile,
                   comp_xsections,photonuc_xsections,
                   nmed;
   $REAL           rho;
   $INTEGER        nmed;
   character*16    photon_xsections;
   character*16    eii_xfile;
   character*16    comp_xsections;
   character*16    photonuc_xsections;
};

" IRAYLR gets removed and goes into the x-section options.             "
" rhor and med are also removed so that EGSnrc can be decoupled from the"
" geometry (see comment about ecut, pcut and also smax above)          "
" EGSnrc obtains medium information in the following manner:           "
"  - in start_new_particle() the user must set medium and rhor (in     "
"    common/useful/) to the medium index and mass density scaling for  "
"    region of the top particle on the stack. rhor is the ratio of the "
"    mass density in that region to the default mass density of the    "
"    medium occupying the region and is normally 1, but can be used    "
"    to overwrite the default mass density. Note that this is different"
"    from the original EGSnrc implementation where rhor(irl) was the   "
"    actual mass density, not the ratio of actual to default.          "
"  - in howfar(), the user must set medium_new and rhof_new to the     "
"    values in the new region, if the particle will enter a new region "
"    after the step.                                                   "

REPLACE {;COMIN/EII-DATA/;} WITH {;
    common/eii_data/
        eii_xsection_a($MAX_EII_BINS), "EII x-section interpolation coeff."
        eii_xsection_b($MAX_EII_BINS), "EII x-section interpolation coeff."
        eii_cons($MXMED),
        eii_a($MAX_EII_SHELLS),        "energy grid coeff. for each shell "
        eii_b($MAX_EII_SHELLS),        "energy grid coeff. for each shell "
        eii_L_factor,                  "L-shell EII xsection scaling factor"
        eii_z($MAX_EII_SHELLS),        "Z of each shell                   "
        eii_sh($MAX_EII_SHELLS),       "shell type (1=K, 2=LI, eyc.)      "
        eii_nshells($MXELEMENT),       "No. of EII shells for each element"
        eii_nsh($MXMED),               "No. of EII shells for each medium "
        eii_first($MXMED,$MXEL),       "First EII shell in the list of shells"
        eii_no($MXMED,$MXEL);          "N. of EII shells                  "
    $REAL     eii_xsection_a,eii_xsection_b,eii_a,eii_b,eii_cons,eii_L_factor;
    $INTEGER  eii_z,eii_sh,eii_nshells;
    $INTEGER  eii_first,eii_no;
    $INTEGER  eii_elements,eii_nsh;
};

REPLACE {;COMIN/MISC/;} WITH {
  ;common/misc/ DUNIT,KMPI,KMPO;
   $REAL        DUNIT;
   $INTEGER     KMPI,KMPO;
};

REPLACE {;COMIN/USEFUL/;} WITH {
 ;common/useful/ pzero, prm, prmt2, rm, rhor, rhor_new, medium, medium_new,
                 medold;
  real*8         pzero, prm, prmt2;
  $REAL          rm, rhor, rhor_new;
  $INTEGER       medium, medium_new, medold;
};

" And now the cross section options common                             "
" Some of the flags were originally arrays for turning on/off options  "
" on a region-by-rgion basis (ibcmp, iraylr, iedgfl, iphter).          "
" If you wish to change the options from their default, use this common"
" For the options that need data to be loaded (iraylr, ibcmp, iedgfl,  "
" ibr_nist, spin_effects), make sure that they are set before calling  "
" hatch. If you want to vary these options by region, then             "
"   - set the appropriate ausgab flag to be called before the          "
"     interaction                                                      "
"   - in ausgab, set the flag to the desired value.                    "
REPLACE {;COMIN/X-OPTIONS/;} WITH {
 ;common/xsection_options/ ibrdst, iprdst, ibr_nist, spin_effects,
                           ibcmp,iraylr,iedgfl,iphter,pair_nrc,itriplet,
                           radc_flag,eii_flag,iphotonuc;
  $INTEGER                 ibrdst, iprdst, ibr_nist,eii_flag,iphotonuc,
                           ibcmp,iraylr,iedgfl,iphter,pair_nrc,
                           radc_flag,itriplet;
  $LOGICAL                 spin_effects;
};

" Again, to remove geometry dependence make e_max_rr and i_do_rr sclars"
REPLACE {;COMIN/EGS-VARIANCE-REDUCTION/;} WITH {;
 common/egs_vr/  e_max_rr, e_max_rr_new, prob_RR, nbr_split, i_play_RR,
                 i_survived_RR, n_RR_warning, i_do_rr;
  $REAL          e_max_rr,e_max_rr_new,prob_RR;
  $INTEGER       nbr_split,i_play_RR,i_survived_RR,n_RR_warning, i_do_rr;
};

" We now have to replace all occurences of arrays of dimension $MXREG "
" to scalars                                                          "
REPLACE {pcut(#)} WITH {pcut};
REPLACE {PCUT(#)} WITH {pcut};
REPLACE {ecut(#)} WITH {ecut};
REPLACE {ECUT(#)} WITH {ecut};
REPLACE {med(#)} WITH {med};
REPLACE {MED(#)} WITH {med};
REPLACE {rhor(#)} WITH {rhor};
REPLACE {RHOR(#)} WITH {rhor};
REPLACE {ibcmp(#)} WITH {ibcmp};
REPLACE {IBCMP(#)} WITH {ibcmp};
REPLACE {iraylr(#)} WITH {iraylr};
REPLACE {IRAYLR(#)} WITH {iraylr};
REPLACE {iedgfl(#)} WITH {iedgfl};
REPLACE {IEDGFL(#)} WITH {iedgfl};
REPLACE {iphter(#)} WITH {iphter};
REPLACE {IPHTER(#)} WITH {iphter};
REPLACE {smaxir(#)} WITH {smaxir};
REPLACE {SMAXIR(#)} WITH {smaxir};
REPLACE {e_max_rr(#)} WITH {e_max_rr};
REPLACE {i_do_rr(#)} WITH {i_do_rr};
REPLACE {iphotonucr(#)} WITH {iphotonuc};
REPLACE {IPHOTONUCR(#)} WITH {IPHOTONUC};

" Set default values "
REPLACE {$set-region-by-region-defaults;} WITH {;
  ecut = 0; pcut = 0; smaxir = $MAX-SMAX;
  ecut_new = 0; pcut_new = 0; smax_new = $MAX-SMAX;
  rhor = 1; rhor_new = 1;
  ibcmp = $IBCMP-DEFAULT; iraylr = 0; iphotonuc=$IPHOTONUCR-DEFAULT;
  iedgfl = $IEDGFL-DEFAULT; iphter = $IPHTER-DEFAULT;
  i_do_rr = 0; e_max_rr = 0; e_max_rr_new = 0;
};

"below replaces version in $HEN_HOUSE/egsnrc.macros"
"necessary for setting smax_new to default SMAX in the case where"
"smaxir was set by the user <=0.  Both SMAXIR and smax_new must then be reset"
"to the default SMAX.  Situation arises because user values are input"
"after setting defaults via the $set-region-by-region-defaults macro"
"above."
REPLACE {$HATCH-USER-INPUT-INIT;} WITH {;
DO J=1,$MXREG [
  IF(smaxir(J)<=0.0) [smaxir(J)=$MAX-SMAX;]
]
IF(smax_new<=0.0) [smax_new=$MAX-SMAX;]
;}

" Should bound compton data be loaded ? "
REPLACE {$need_bound_compton_data(#);} WITH { {P1} = ibcmp.gt.0; };

" Should relaxation data be loaded ? "
REPLACE {$need_relaxation_data(#);} WITH {
  {P1} = (iedgfl.gt.0.and.iedgfl.le.100);
};

" Are Rayleigh data required ? "
REPLACE {$need_rayleigh_data;} WITH {;
  DO j=1,nmed [ iraylm(j) = iraylr; ]
};

" Are photonuclear data required ? "
REPLACE {$need_photonuc_data;} WITH {;
  DO j=1,nmed [ iphotonucm(j) = iphotonuc; ]
};

" rhor, ecut, pcut initializtion in hatch "
REPLACE {$adjust_rhor_ecut_pcut;} WITH {;
    DO md=1,nmed [
        ecut = max(ecut,ae(md));
        pcut = max(pcut,ap(md));
    ]
};

" hownear and range discard: before calling hownear, we set e_range in "
" common/epcont/ to the residual range of the electron and idisc to 0  "
" In hownear the user calculates the minimum perpendicular distance to "
" a boundary. If the user wishes to range-discard the electron, he/she "
" should set idisc (also in /epcont/) to 50 + 49*iq(np).               "

REPLACE {$CALL-HOWNEAR(#);} WITH {
  e_range = range; idisc = 0; call egs_hownear({P1});
};

REPLACE {$CALL-HOWFAR-IN-ELECTR;} WITH {;
  IF(callhowfar | wt(np) <= 0) [ call egs_howfar; ]
};

REPLACE {$CALL-HOWFAR-IN-PHOTON;} WITH {;
  IF( ustep > dnear(np) | wt(np) <= 0 ) [ call egs_howfar; ]
};

REPLACE {$AUSCALL(#);} WITH {
   iarg={P1};
   IF (IAUSFL(IARG+1).NE.0) [call egs_ausgab(iarg);]
};



" Range discard is up to the user
REPLACE {$RANGE-DISCARD;} WITH {;
  IF( idisc > 0 ) goto :USER-ELECTRON-DISCARD:;
};

" Minimum ecut for default min. step-size for PRESTA-I BCA "
REPLACE {$set_ecutmn;} WITH {
  ecutmn = 1e30;
  DO i=1,nmed [
      ecutmn = Min(ecutmn,ae(i));
  ]
  ecutmn = Max(ecutmn,ecut);
};

REPLACE {$start_new_particle;} WITH {
    call egs_start_particle;
    IF( idisc > 0 ) [ np=np-1; return; ]
};

REPLACE {$electron_region_change;} WITH {
  ir(np) = irnew; irl = irnew; rhor = rhor_new;
  medium = medium_new; ecut = ecut_new; smaxir = smax_new;
};

REPLACE {$photon_region_change;} WITH {
  ir(np) = irnew; irl = irnew; rhor = rhor_new;
  medium = medium_new; pcut = pcut_new;
};

REPLACE {$SET-RHOF;} WITH { rhof = rhor; };

REPLACE {$default_nmed} WITH {0};

REPLACE {narg = iargc();} WITH {call egs_iargc(narg);};
REPLACE {call getarg(#,#);} WITH {call egs_getarg({P1},{P2});};

" The following set of macros is there so that $MXSTACK and $MXMED "
" get defined via the macros in array_sizes.h                      "
REPLACE {$MXMED} WITH {max_med};
REPLACE {$MXSTACK} WITH {max_stack};
REPLACE {;COMIN/STACK/;} WITH {;
  integer max_stack; parameter (max_stack = MXSTACK);
  common/stack/
    $LGN(E,X,Y,Z,U,V,W,DNEAR,WT,IQ,IR,LATCH($MXSTACK)),
         LATCHI,NP,NPold;
    $ENERGY PRECISION E;
    $REAL             X,Y,Z,U,V,W,DNEAR,WT;
    $INTEGER          IQ,IR,LATCH,LATCHI,NP,NPold;
};
REPLACE {$COMIN-BREMS;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,BREMPR,EPCONT,NIST-BREMS,STACK,THRESH,UPHIOT,USEFUL,RANDOM,
         EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-HATCH;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,BOUNDS,BREMPR,ELECIN,MEDIA,MISC,PHOTIN,STACK,THRESH,
         UPHIIN,UPHIOT,USEFUL,USER,RANDOM,ET-Control,
         EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-PAIR;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,BREMPR,STACK,THRESH,UPHIOT,USEFUL,RANDOM,
          EPCONT,NRC-PAIR-DATA,TRIPLET-DATA,EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-PHOTO;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/BOUNDS,BREMPR,DEBUG,EDGE,EPCONT,MEDIA,PHOTIN,RANDOM,
         STACK,UPHIOT,USEFUL,EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-PHOTON;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,BOUNDS,MEDIA,MISC,EPCONT,PHOTIN,STACK,THRESH,UPHIOT,
         USEFUL,USER,RANDOM,EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-SET-DEFAULTS;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/BOUNDS,BREMPR,COMPTON-DATA,EDGE,ELECIN,EPCONT,CH-Steps,ET-Control,
         MEDIA,MISC,PHOTIN,RANDOM,STACK,THRESH, UPHIIN,UPHIOT,USEFUL,
         EGS-VARIANCE-REDUCTION,EGS-IO,Spin-Data,EII-DATA,rayleigh_inputs,
         EMF-INPUTS/;
};
REPLACE {$COMIN-INIT-COMPT;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/COMPTON-DATA,BREMPR,EDGE,MEDIA,MISC,USEFUL,EGS-IO/;
};
REPLACE {$COMIN-COMPT;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/COMPTON-DATA,DEBUG,EPCONT,STACK,THRESH,UPHIOT,USEFUL,RANDOM,
         EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-ELECTR;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,BOUNDS,ELECIN,EPCONT,MEDIA,MISC,STACK,THRESH,
         UPHIIN,UPHIOT,USEFUL,USER,RANDOM,ET-Control,CH-Steps,
         EGS-VARIANCE-REDUCTION,EGS-IO,EMF-INPUTS/;
};
REPLACE {$COMIN-MSCATI;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/BOUNDS,ELECIN,MEDIA,MISC,RANDOM,ET-Control,USEFUL,EGS-IO/;
};
REPLACE {$COMIN-MOLLER;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,STACK,THRESH,UPHIOT,USEFUL,RANDOM,
         EGS-VARIANCE-REDUCTION,EGS-IO/;
};
REPLACE {$COMIN-BHABHA;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/DEBUG,STACK, THRESH,UPHIOT,USEFUL,RANDOM,EGS-VARIANCE-REDUCTION,
         EGS-IO/;
};

REPLACE {$COMIN-EII-INIT;} WITH {;
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/BREMPR,EDGE,EGS-IO,EII-DATA,ELECIN,MEDIA,THRESH,USEFUL/;
};
REPLACE {$COMIN-EII-SAMPLE;} WITH {
  ;integer max_med; parameter (max_med = MXMED);
  ;COMIN/EPCONT,EII-DATA,EGS-VARIANCE-REDUCTION,RANDOM,STACK,THRESH,
         UPHIOT,USEFUL,EGS-IO/;
};

REPLACE {$declare_max_medium;} WITH {
  ;integer max_med; parameter (max_med = MXMED);
};

#include 'array_sizes.h';
#ifdef SINGLE;
#define EGS_Float real*4;
#else;
#define EGS_Float real*8;
#endif;
#define EGS_Float4 real*4;

" The following set of macros takes care of the various cross section "
" options being available when needed                                 "

APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-SET-DEFAULTS;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-BREMS;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-COMPT;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-ELECTR;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-HATCH;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-INIT-COMPT;};
APPEND {;COMIN/THRESH,X-OPTIONS/;} TO {$COMIN-MSCATI;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-PAIR;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-PHOTO;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-PHOTON;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-EII-INIT;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-INIT-TRIPLET;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-GET-TRANSPORTP;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-MOLLER;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-RADC-INIT;};
APPEND {;COMIN/X-OPTIONS/;} TO {$COMIN-INIT-NIST-BREMS;};

" make a couple of renames "
REPLACE {subroutine egs_init;} WITH {subroutine egs_init_f;};
REPLACE {SUBROUTINE HATCH;} WITH {subroutine egs_hatch;};

/*
   The folowing was an ttempt to redirect fortran I/O
   to the C++ interface. Unfortunately it fails with
   segmentation violations in the fortran I/O
   subroutines that I don't understand.

" redirect I/O from the fortran subroutines to the C++ application "
REPLACE {$egs_info(#,#);} WITH {
    write(write_buffer,{P1}) {P2};
    call egs_info_output(write_buffer);
};
REPLACE {$warning(#,#);} WITH {
    write(write_buffer,{P1}) {P2};
    call egs_warning_output(write_buffer);
};
REPLACE {$declare_write_buffer;} WITH {character*8192 write_buffer;};

APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-ANNIH;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-BHABHA;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-BREMS;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-COMPT;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-COMPT-old;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-ELECTR;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-HATCH;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-MOLLER;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-PAIR;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-PHOTON;};
APPEND {$declare_write_buffer;} TO {$DEFINE-LOCAL-VARIABLES-PHOTO;};
APPEND {$declare_write_buffer;} TO {$COMIN-INIT-TRIPLET;};
APPEND {$declare_write_buffer;} TO {$COMIN-EII-SAMPLE;};

*/
